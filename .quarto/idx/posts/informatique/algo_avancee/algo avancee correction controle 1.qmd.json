{"title":"algo avancee correction controle","markdown":{"yaml":{"title":"algo avancee correction controle","description":"correction détaillée","date":"2023-03-02","categories":["informatique"],"jupyter":"python3","toc":true},"headingText":"Implémentation d'une liste chaînée","containsRefs":false,"markdown":"\n\n\n:::{.callout-tip collapse=true}\n\n```{python}\nclass Node:\n    def __init__ (self, value, next=None):\n        self.valeur = value\n        self.suivant = next\n\n    def __str__ (self):\n        return f\"({', '.join(map(str, self.to_list()))})\"\n\n    def to_list(self) -> list:\n        if self.suivant is None:\n            return [self.valeur]\n        return [self.valeur] + self.suivant.to_list()\n```\n:::\n\n# Sujet de 14h45\n\n\n## 1. `genAlea`\n\n```{python}\nfrom random import randint\n\ndef genAlea(nb_val: int) -> Node:\n    \"\"\"Retourner une liste chaînée de nbVal entiers aléatoires entre 1 et 100.\n    Args:\n        nb_val (int): Le nombre d'entiers à générer\n    Returns:\n        Node: La liste de nb_val\n    \"\"\"\n    res = None\n    for _ in range(nb_val):\n        res = Node(randint(1, 100), res)\n    return res\n\nprint(\"12 nombres aléatoires :\", genAlea(12))\n```\n\n\n## 2. `compteSup`\n\n```{python}\ndef compteSup(L: Node, seuil) -> int:\n    \"\"\"Retourne le nombre de valeurs de L strictement supérieures à seuil.\n    Args:\n        L (Node): La liste chaînée.\n        seuil (comparable): La valeur de seuil (on compte les valeurs strictement supérieures au seuil).\n    Returns:\n        int: Le nombre de valeurs strictement supérieurs au seuil.\n    \"\"\"\n    nb_vals_sup = 0\n    while L is not None:\n        if L.valeur > seuil:\n            nb_vals_sup += 1\n        L = L.suivant\n    return nb_vals_sup\n\nL = Node(3, Node(1, Node(4, Node(1, Node(5, Node(9, Node(2)))))))\nseuil = 4\nprint(L, \"contient\", compteSup(L, seuil), \"valeurs strictement supérieures à\", seuil)\n```\n\n\n## 3. `dansIntervalle` récursivement\n\n```{python}\ndef dansIntervalle(L: Node, a, b) -> Node:\n    \"\"\"Créer une nouvelle liste à partir de L en ne gardant que les éléments dans l'intervalle [a, b].\n    Args:\n        L (Node): La liste chaînée de départ.\n        a (comparable): Le minimum de l'intervalle\n        b (comparable): Le maximum de l'intervalle\n    Returns:\n        Node: Une nouvelle liste pour laquelle on a gardé seulement les élément qui sont dans l'intervalle [a, b].\n    \"\"\"\n    if a > b:\n        raise ValueError(\"a doit être inférieur ou égal à b.\")\n    ##### ajouter/enlever un # devant la ligne suivante pour changer d'implémentation #####\n    if L is None: return None\n    if a <= L.valeur <= b:\n        # on garde le node actuel\n        return Node(L.valeur, dansIntervalle(L.suivant, a, b))\n    return dansIntervalle(L.suivant, a, b)\n\nL = Node(3, Node(1, Node(4, Node(1, Node(5, Node(9, Node(2, Node(6, Node(5, Node(3, Node(5, Node(8, Node(9, Node(7, Node(9, Node(3, Node(2, Node(3))))))))))))))))))\nprint(dansIntervalle(L, 2, 4))\n```\n\n## 4. `dansIntervalle` avec un itérateur fonctionnel\n\n\n:::{.callout-info collapse=true}\n## Implémentation de `Lfilter`\n\n```{python}\ndef Lfilter(L : Node, f):\n    \"\"\"Filtrer les valeurs de L selon le prédicat f.\n    On garde seulement les valeurs de les pour lesquelles\n    f(valeur) == True.\n    Args:\n        L (Node): La liste de départ.\n        f (fonction): Le prédicat (fonction qui renvoie True\n                      ou False).\n    Returns:\n        Node: La nouvelle liste contenant seulement les\n              valeurs de L pour lesquelles f(valeur) == True\n              (on conserve l'ordre).\n    \"\"\"\n    if L is None:\n        return None\n    p = L\n    while p is not None and not f(p.valeur):\n        p = p.suivant\n    if p is None:\n        return None\n\n    res = Node(p.valeur)\n    w = res\n    while p.suivant is not None:\n        p = p.suivant\n        if f(p.valeur):\n            w.suivant = Node(p.valeur)\n            w = w.suivant\n    return res\n```\n:::\n\n\n```{python}\ndef dansIntervalle(L: Node, a, b) -> Node:\n    \"\"\"Créer une nouvelle liste à partir de L en ne gardant que les éléments dans l'intervalle [a, b].\n    Args:\n        L (Node): La liste chaînée de départ.\n        a (comparable): Le minimum de l'intervalle\n        b (comparable): Le maximum de l'intervalle\n    Returns:\n        Node: Une nouvelle liste pour laquelle on a gardé seulement les élément qui sont dans l'intervalle [a, b].\n    \"\"\"\n    if a > b:\n        raise ValueError(\"a doit être inférieur ou égal à b.\")\n    # avec un itérateur fonctionnel\n    return Lfilter(L, lambda x: a <= x <= b)\n\n\nL = Node(3, Node(1, Node(4, Node(1, Node(5, Node(9, Node(2, Node(6, Node(5, Node(3, Node(5, Node(8, Node(9, Node(7, Node(9, Node(3, Node(2, Node(3))))))))))))))))))\nprint(dansIntervalle(L, 2, 4))\n```\n\n\n# Sujet de 15h30\n\n\n## 1. `genRandom`\n\n```{python}\ndef genRandom(nbVal: int) -> Node:\n    \"\"\"Créer une liste de nbVal nombres aléatoires entre 0 et 20\n    Args:\n        nbVal (int): Le nombre de nombres aléatoires à générer.\n    Returns:\n        Node: Une liste chaînée qui contient `nbVal` nombre\n              aléatoires entre 0 et 20.\n    \"\"\"\n    if nbVal <= 0:\n        return None\n    return Node(randint(0, 20), genRandom(nbVal - 1))\n\nL = genRandom(10)\nprint(L)\n```\n\n## 2. `compteInf`\n\n```{python}\ndef compteInf(L: Node, seuil) -> int:\n    \"\"\"Compter le nombre de valeurs strictement inférieures à `seuil` dans L.\n    Args:\n        L (Node): La liste dans laquelle on compte.\n        seuil: La valeur utilisée pour les comparaisons.\n    Returns:\n        int: Le nombre de valeurs dans `L` qui sont\n             strictement inférieures à `seuil`.\n    \"\"\"\n    res = 0\n    while L is not None:\n        if L.valeur < seuil:\n            res += 1\n        L = L.suivant\n    return res\n\nprint(compteInf(L, 10))\n```\n\n\n\n## 3. `horsIntervalle` récursivement\n\n```{python}\ndef horsIntervalle(L: Node, a, b) -> Node:\n    \"\"\"Retirer les éléments de L qui sont dans [a, b].\n    Args:\n        L (Node): La liste que l'on veut filtrer.\n        a: La valeur minimale de l'intervalle exclue.\n        b: La valeur maximale de l'intervalle exclue.\n    Returns:\n        Node: Une nouvelle liste qui est L sans les élément\n              de L qui sont compris entre a et b inclus.\n    \"\"\"\n    if a > b or L is None:\n        return None\n    # Si la valeur dépasse en dessous de a ou au dessus de b\n    if L.valeur < a or L.valeur > b :\n        # on garde la valeur dan la nouvelle liste\n        return Node(L.valeur, horsIntervalle(L.suivant, a, b))\n    # sinon on no garde pas la valeur\n    return horsIntervalle(L.suivant, a, b)\n\nprint(horsIntervalle(L, 5, 10))\n```\n\n## 4. `horsIntervalleFonc` avec un itérateur fonctionnel\n\n```{python}\ndef horsIntervalleFonc(L: Node, a, b) -> Node:\n    \"\"\"Retirer les éléments de L qui sont dans [a, b].\n    Args:\n        L (Node): La liste que l'on veut filtrer.\n        a: La valeur minimale de l'intervalle exclue.\n        b: La valeur maximale de l'intervalle exclue.\n    Returns:\n        Node: Une nouvelle liste qui est L sans les élément\n              de L qui sont compris entre a et b inclus.\n    \"\"\"\n    if a > b:\n        raise ValueError(\"a doit être inférieur ou égal à b.\")\n    return Lfilter(L, lambda x: x < a or x > b)\n\nprint(horsIntervalleFonc(L, 5, 10))\n```\n\n\n","srcMarkdownNoYaml":"\n\n\n:::{.callout-tip collapse=true}\n## Implémentation d'une liste chaînée\n\n```{python}\nclass Node:\n    def __init__ (self, value, next=None):\n        self.valeur = value\n        self.suivant = next\n\n    def __str__ (self):\n        return f\"({', '.join(map(str, self.to_list()))})\"\n\n    def to_list(self) -> list:\n        if self.suivant is None:\n            return [self.valeur]\n        return [self.valeur] + self.suivant.to_list()\n```\n:::\n\n# Sujet de 14h45\n\n\n## 1. `genAlea`\n\n```{python}\nfrom random import randint\n\ndef genAlea(nb_val: int) -> Node:\n    \"\"\"Retourner une liste chaînée de nbVal entiers aléatoires entre 1 et 100.\n    Args:\n        nb_val (int): Le nombre d'entiers à générer\n    Returns:\n        Node: La liste de nb_val\n    \"\"\"\n    res = None\n    for _ in range(nb_val):\n        res = Node(randint(1, 100), res)\n    return res\n\nprint(\"12 nombres aléatoires :\", genAlea(12))\n```\n\n\n## 2. `compteSup`\n\n```{python}\ndef compteSup(L: Node, seuil) -> int:\n    \"\"\"Retourne le nombre de valeurs de L strictement supérieures à seuil.\n    Args:\n        L (Node): La liste chaînée.\n        seuil (comparable): La valeur de seuil (on compte les valeurs strictement supérieures au seuil).\n    Returns:\n        int: Le nombre de valeurs strictement supérieurs au seuil.\n    \"\"\"\n    nb_vals_sup = 0\n    while L is not None:\n        if L.valeur > seuil:\n            nb_vals_sup += 1\n        L = L.suivant\n    return nb_vals_sup\n\nL = Node(3, Node(1, Node(4, Node(1, Node(5, Node(9, Node(2)))))))\nseuil = 4\nprint(L, \"contient\", compteSup(L, seuil), \"valeurs strictement supérieures à\", seuil)\n```\n\n\n## 3. `dansIntervalle` récursivement\n\n```{python}\ndef dansIntervalle(L: Node, a, b) -> Node:\n    \"\"\"Créer une nouvelle liste à partir de L en ne gardant que les éléments dans l'intervalle [a, b].\n    Args:\n        L (Node): La liste chaînée de départ.\n        a (comparable): Le minimum de l'intervalle\n        b (comparable): Le maximum de l'intervalle\n    Returns:\n        Node: Une nouvelle liste pour laquelle on a gardé seulement les élément qui sont dans l'intervalle [a, b].\n    \"\"\"\n    if a > b:\n        raise ValueError(\"a doit être inférieur ou égal à b.\")\n    ##### ajouter/enlever un # devant la ligne suivante pour changer d'implémentation #####\n    if L is None: return None\n    if a <= L.valeur <= b:\n        # on garde le node actuel\n        return Node(L.valeur, dansIntervalle(L.suivant, a, b))\n    return dansIntervalle(L.suivant, a, b)\n\nL = Node(3, Node(1, Node(4, Node(1, Node(5, Node(9, Node(2, Node(6, Node(5, Node(3, Node(5, Node(8, Node(9, Node(7, Node(9, Node(3, Node(2, Node(3))))))))))))))))))\nprint(dansIntervalle(L, 2, 4))\n```\n\n## 4. `dansIntervalle` avec un itérateur fonctionnel\n\n\n:::{.callout-info collapse=true}\n## Implémentation de `Lfilter`\n\n```{python}\ndef Lfilter(L : Node, f):\n    \"\"\"Filtrer les valeurs de L selon le prédicat f.\n    On garde seulement les valeurs de les pour lesquelles\n    f(valeur) == True.\n    Args:\n        L (Node): La liste de départ.\n        f (fonction): Le prédicat (fonction qui renvoie True\n                      ou False).\n    Returns:\n        Node: La nouvelle liste contenant seulement les\n              valeurs de L pour lesquelles f(valeur) == True\n              (on conserve l'ordre).\n    \"\"\"\n    if L is None:\n        return None\n    p = L\n    while p is not None and not f(p.valeur):\n        p = p.suivant\n    if p is None:\n        return None\n\n    res = Node(p.valeur)\n    w = res\n    while p.suivant is not None:\n        p = p.suivant\n        if f(p.valeur):\n            w.suivant = Node(p.valeur)\n            w = w.suivant\n    return res\n```\n:::\n\n\n```{python}\ndef dansIntervalle(L: Node, a, b) -> Node:\n    \"\"\"Créer une nouvelle liste à partir de L en ne gardant que les éléments dans l'intervalle [a, b].\n    Args:\n        L (Node): La liste chaînée de départ.\n        a (comparable): Le minimum de l'intervalle\n        b (comparable): Le maximum de l'intervalle\n    Returns:\n        Node: Une nouvelle liste pour laquelle on a gardé seulement les élément qui sont dans l'intervalle [a, b].\n    \"\"\"\n    if a > b:\n        raise ValueError(\"a doit être inférieur ou égal à b.\")\n    # avec un itérateur fonctionnel\n    return Lfilter(L, lambda x: a <= x <= b)\n\n\nL = Node(3, Node(1, Node(4, Node(1, Node(5, Node(9, Node(2, Node(6, Node(5, Node(3, Node(5, Node(8, Node(9, Node(7, Node(9, Node(3, Node(2, Node(3))))))))))))))))))\nprint(dansIntervalle(L, 2, 4))\n```\n\n\n# Sujet de 15h30\n\n\n## 1. `genRandom`\n\n```{python}\ndef genRandom(nbVal: int) -> Node:\n    \"\"\"Créer une liste de nbVal nombres aléatoires entre 0 et 20\n    Args:\n        nbVal (int): Le nombre de nombres aléatoires à générer.\n    Returns:\n        Node: Une liste chaînée qui contient `nbVal` nombre\n              aléatoires entre 0 et 20.\n    \"\"\"\n    if nbVal <= 0:\n        return None\n    return Node(randint(0, 20), genRandom(nbVal - 1))\n\nL = genRandom(10)\nprint(L)\n```\n\n## 2. `compteInf`\n\n```{python}\ndef compteInf(L: Node, seuil) -> int:\n    \"\"\"Compter le nombre de valeurs strictement inférieures à `seuil` dans L.\n    Args:\n        L (Node): La liste dans laquelle on compte.\n        seuil: La valeur utilisée pour les comparaisons.\n    Returns:\n        int: Le nombre de valeurs dans `L` qui sont\n             strictement inférieures à `seuil`.\n    \"\"\"\n    res = 0\n    while L is not None:\n        if L.valeur < seuil:\n            res += 1\n        L = L.suivant\n    return res\n\nprint(compteInf(L, 10))\n```\n\n\n\n## 3. `horsIntervalle` récursivement\n\n```{python}\ndef horsIntervalle(L: Node, a, b) -> Node:\n    \"\"\"Retirer les éléments de L qui sont dans [a, b].\n    Args:\n        L (Node): La liste que l'on veut filtrer.\n        a: La valeur minimale de l'intervalle exclue.\n        b: La valeur maximale de l'intervalle exclue.\n    Returns:\n        Node: Une nouvelle liste qui est L sans les élément\n              de L qui sont compris entre a et b inclus.\n    \"\"\"\n    if a > b or L is None:\n        return None\n    # Si la valeur dépasse en dessous de a ou au dessus de b\n    if L.valeur < a or L.valeur > b :\n        # on garde la valeur dan la nouvelle liste\n        return Node(L.valeur, horsIntervalle(L.suivant, a, b))\n    # sinon on no garde pas la valeur\n    return horsIntervalle(L.suivant, a, b)\n\nprint(horsIntervalle(L, 5, 10))\n```\n\n## 4. `horsIntervalleFonc` avec un itérateur fonctionnel\n\n```{python}\ndef horsIntervalleFonc(L: Node, a, b) -> Node:\n    \"\"\"Retirer les éléments de L qui sont dans [a, b].\n    Args:\n        L (Node): La liste que l'on veut filtrer.\n        a: La valeur minimale de l'intervalle exclue.\n        b: La valeur maximale de l'intervalle exclue.\n    Returns:\n        Node: Une nouvelle liste qui est L sans les élément\n              de L qui sont compris entre a et b inclus.\n    \"\"\"\n    if a > b:\n        raise ValueError(\"a doit être inférieur ou égal à b.\")\n    return Lfilter(L, lambda x: x < a or x > b)\n\nprint(horsIntervalleFonc(L, 5, 10))\n```\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"include-in-header":{"text":"<script data-goatcounter=\"https://osk42.goatcounter.com/count\" async src=\"//gc.zgo.at/count.js\"></script>\n"},"toc":true,"output-file":"algo avancee correction controle 1.html"},"language":{"toc-title-document":"Table des matières","toc-title-website":"Sur cette page","related-formats-title":"Autres formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"La source","other-links-title":"Autres liens","code-links-title":"Liens de code","launch-dev-container-title":"Lancer le Dev Container","launch-binder-title":"Lancer le Binder","article-notebook-label":"Cahier d'articles","notebook-preview-download":"Télécharger le cahier","notebook-preview-download-src":"Télécharger le code source","notebook-preview-back":"Retour à l'article","manuscript-meca-bundle":"Archive MECA","section-title-abstract":"Résumé","section-title-appendices":"Annexes","section-title-footnotes":"Notes de bas de page","section-title-references":"Les références","section-title-reuse":"Réutilisation","section-title-copyright":"Droits d'auteur","section-title-citation":"Citation","appendix-attribution-cite-as":"Veuillez citer ce travail comme suit :","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Voir la Licence","title-block-author-single":"Auteur·rice","title-block-author-plural":"Auteur·rice·s","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Date de publication","title-block-modified":"Modifié","title-block-keywords":"Mots clés","callout-tip-title":"Astuce","callout-note-title":"Note","callout-warning-title":"Avertissement","callout-important-title":"Important","callout-caution-title":"Mise en garde","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Montrer tout le code","code-tools-hide-all-code":"Cacher tout le code","code-tools-view-source":"Voir les sources","code-tools-source-code":"Code source","tools-share":"Share","tools-download":"Download","code-line":"Ligne","code-lines":"Lignes","copy-button-tooltip":"Copier vers le presse-papier","copy-button-tooltip-success":"Copié","repo-action-links-edit":"Modifier cette page","repo-action-links-source":"Voir la source","repo-action-links-issue":"Faire part d'un problème","back-to-top":"Retour au sommet","search-no-results-text":"Pas de résultats","search-matching-documents-text":"documents trouvés","search-copy-link-title":"Copier le lien vers la recherche","search-hide-matches-text":"Cacher les correspondances additionnelles","search-more-match-text":"correspondance de plus dans ce document","search-more-matches-text":"correspondances de plus dans ce document","search-clear-button-title":"Effacer","search-text-placeholder":"","search-detached-cancel-button-title":"Annuler","search-submit-button-title":"Envoyer","search-label":"Recherche","toggle-section":"Basculer la section","toggle-sidebar":"Basculer la barre latérale","toggle-dark-mode":"Basculer le mode sombre","toggle-reader-mode":"Basculer en mode lecteur","toggle-navigation":"Basculer la navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Théorème","crossref-lem-title":"Lemme","crossref-cor-title":"Corollaire","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Définition","crossref-exm-title":"Exemple","crossref-exr-title":"Exercice","crossref-ch-prefix":"Chapitre","crossref-apx-prefix":"Annexe","crossref-sec-prefix":"Section","crossref-eq-prefix":"Équation","crossref-lof-title":"Liste des Figures","crossref-lot-title":"Liste des Tables","crossref-lol-title":"Liste des Listings","environment-proof-title":"Preuve","environment-remark-title":"Remarque","environment-solution-title":"Solution","listing-page-order-by":"Trier par","listing-page-order-by-default":"Ordre par défaut","listing-page-order-by-date-asc":"Le plus ancien","listing-page-order-by-date-desc":"Le plus récent","listing-page-order-by-number-desc":"Descendant","listing-page-order-by-number-asc":"Ascendant","listing-page-field-date":"Date","listing-page-field-title":"Titre","listing-page-field-description":"Description","listing-page-field-author":"Auteur·rice","listing-page-field-filename":"Nom de fichier","listing-page-field-filemodified":"Modifié","listing-page-field-subtitle":"Sous-titre","listing-page-field-readingtime":"Temps de lecture","listing-page-field-wordcount":"Compteur de Mots","listing-page-field-categories":"Catégories","listing-page-minutes-compact":"{0} min.","listing-page-category-all":"Tous","listing-page-no-matches":"Aucun article correspondant","listing-page-words":"{0} mots","listing-page-filter":"Filtre","draft":"Brouillon"},"metadata":{"lang":"fr","fig-responsive":true,"quarto-version":"1.6.42","editor":{"render-on-save":false},"comments":{"giscus":{"repo":"OsKaR31415/blog","repo-id":"R_kgDOItLnjQ","category":"Announcements","category-id":"DIC_kwDOItLnjc4CYln7","mapping":"url","reactions-enabled":true,"loading":"lazy","input-position":"bottom","theme":{"light":"noborder_light","dark":"noborder_dark"},"language":"fr"}},"theme":{"light":"flatly","dark":"darkly"},"title-block-banner":true,"page-layout":"full","title":"algo avancee correction controle","description":"correction détaillée","date":"2023-03-02","categories":["informatique"],"jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}