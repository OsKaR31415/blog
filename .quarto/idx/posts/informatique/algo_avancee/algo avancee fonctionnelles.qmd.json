{"title":"fonctionnelles","markdown":{"yaml":{"title":"fonctionnelles","description":"map, filter et reduce sur des listes chaînées","date":"2023-03-01","categories":["informatique"],"jupyter":"python3","toc":true,"draft":true,"editor":{"render-on-save":false}},"headingText":"Définition d'une Liste chaînée","containsRefs":false,"markdown":"\n\n\n\nLes fonctionnelles sont des fonctions particulières qui prennent en argument des fonctions.\n\nLes fonctionnelles qui nous intéressent sont `map`, `filter` et `reduce`. Elles sont particulièrement intéressantes car elles permettent d'implémenter un grand nombre de fonctions simplement en composant ces trois primitives.\n\n:::{.callout-tip collapse=true}\n\n```{python}\nclass Node:\n    def __init__(self, valeur, suivant=None):\n        self.valeur = valeur\n        self.suivant = suivant\n\n    def to_list(self):\n        if self.suivant is None:\n            return [self.valeur]\n        return [self.valeur] + self.suivant.to_list()\n\n    def __str__(self):\n        return f\"({','.join(map(str, self.to_list()))})\"\n```\n:::\n\n# Primitive `map`\n\nLa primitive `map` existe en python par défaut, pour les Listes classiques (et les itérateurs en général).\n\nElle admet deux paramètres : une fonction et une Liste, et elle va retourner une nouvelle liste qui est construite en appliquant la fonction sur chaque élément de la liste. Voici un exemple :\n\n```{python}\ndef double(n: int or float) -> int or float:\n    return 2 * n\n\nL = [1, 2, 3, 5, 8, 13]\ndouble_L = map(double, L)\n# on est obligé d'ajouter list car map ne renvoie pas une Liste, mais un objet map\ndouble_L = list(double_L)\nprint(double_L)\n```\n\n\nOn veut donc implémenter cette fonction pour des Listes chaînées.\nplusieurs options pour l'implémenter :\n\n - itérativement : avec une boucle\n - récursivement : sans boucle, utilisant la fonction elle-même dans sa définition\n - *out-of-place* : on créée une nouvelle Liste à chaque fois\n - en-place : on ne créée pas une nouvelle Liste, mais on modifie celle donnée en paramètre\n \n## Récursivement\n\n### En place\n\nIci, la fonction ne renvoie rien (précisé par le `-> None`), car elle modifie la Liste qu'on lui donne.\n\n```{python}\ndef map_rec_in_place(fonction, node: Node) -> None:\n    if node is None:\n        return None\n    # on modifie la valeur du node\n    node.valeur = fonction(node.valeur)\n    # on appelle map sur la suite de la Liste\n    return map_rec_in_place(fonction, node.suivant)\n```\n\nOn peut tester notre `map` avec différentes fonctions à appliquer\n\n```{python}\ndef double(x):\n    return x * 2\n\ndef inverse(x):\n    return 1 / x\n\n# on voit que la liste L est bien modifiée à chaque fois\nL = Node(1, Node(2, Node(3, Node(5, Node(8)))))\nprint(L)\nmap_rec_in_place(double, L)\nprint(L)\nmap_rec_in_place(inverse, L)\nprint(L)\n```\n\n\n\n### *Out-of-place*\n\nPour créer une nouvelle Liste, on va supprimer l'étape où l'on modifie la valeur du node, et on va à la place créer un nouveau Node que l'on retournera.\n\n```{python}\ndef map_rec(fonction, node: Node) -> Node:\n    if node is None:\n        return None\n    return Node(fonction(node.valeur),\n                map_rec(fonction, node.suivant))\n\n\nL = Node(1, Node(2, Node(3, Node(5, Node(8)))))\nD = map_rec(double, L)\nI = map_rec(inverse, L)\nprint(\"L =\", L)  # L n'est pas modifiée\nprint(\"D =\", D)  # D est une nouvelle Liste\nprint(\"I =\", I)  # I est une nouvelle Liste\n```\n\n::: {.callout-tip collapse=true}\n## Explication détaillée\n\nOn peut réécrire la fonction :\n\n```python\ndef map_rec(fonction, node: Node) -> Node:\n    # cas de base\n    if node is None:\n        return None\n    # on applique la fonction pour avoir la nouvelle valeur\n    nouvelle_valeur = fonction(node.valeur)\n    # on fait une récursion pour le reste de la Liste\n    node_suivant = map_rec(fontion, node.suivant)\n    # on créée un nouveau Node avec les résultats obtenus\n    return Node(nouvelle_valeur, node_suivant)\n```\n:::\n\n\n## Itérativement\n\n### En place\n\nOn veut modifier la Liste passée en paramètre.\n\n```{python}\ndef map_iter_in_place(fonction, node: Node) -> None:\n    pos = node\n    while pos is not None:\n        pos.valeur = fonction(pos.valeur)\n        pos = pos.suivant\n\n\n# on voit que la liste L est bien modifiée à chaque fois\nL = Node(1, Node(2, Node(3, Node(5, Node(8)))))\nprint(L)\nmap_iter_in_place(double, L)\nprint(L)\nmap_iter_in_place(inverse, L)\nprint(L)\n```\n\n\n### Out-of-place\n\n```python\ndef map_iter(fonction, node: Node) -> Node:\n    if node is None: return None\n    new_node = Node(fonction(node.valeur))\n    new_tail = new_node\n    pos = node.suivant\n    while pos is not None:\n        new_tail.suivant = Node(fonction(pos.valeur))\n        new_tail = new_tail.suivant\n        pos = pos.suivant\n    return new_node\n\nL = Node(1, Node(2, Node(3, Node(5, Node(8)))))\nD = map_rec(double, L)\nI = map_rec(inverse, L)\nprint(\"L =\", L)  # L n'est pas modifiée\nprint(\"D =\", D)  # D est une nouvelle Liste\nprint(\"I =\", I)  # I est une nouvelle Liste\n```\n\n\n\n\n\n# Filter\n\n## récursif\n\n### Out-of-place\n\n```{python}\ndef filter_rec(condition, L: Node) -> Node:\n    if L is None: return None\n    if condition(L.valeur):\n        # garder l'élément actuel et faire une récursion sur le reste de la liste\n        return Node(L.valeur, filter_rec(condition, L.suivant))\n    # ne pas garder l'élément actuel\n    return filter_rec(condition, L.suivant)\n\nL = Node(1, Node(2, Node(3, Node(4, Node(5, Node(6, Node(7)))))))\n# on filtre seulement les nombres pairs\nprint(filter_rec(lambda x: 0 == x%2, L))\n```\n\n### En place\n\n\n## itératif\n\n### out-of-place\n\n```{python}\ndef filter_iter(condition, L: Node) -> Node:\n    if L is None: return None\n    # trouver le premier élément qui respecte `condition`\n    while not condition(L.valeur):\n        L = L.suivant\n        # liste qui ne respecte jamais `condition`\n        if L is None: return None\n    # filtrer le reste des éléments et les mettre dans `res`\n    res = Node(L.valeur)\n    res_tail = res\n    while L.suivant is not None:\n        L = L.suivant\n        if condition(L.valeur):\n            res_tail.suivant = Node(L.valeur)\n            res_tail = res_tail.suivant\n    return res\n\nL = Node(1, Node(3, Node(5, Node(7, Node(8, Node(9, Node(10, Node(11, Node(12)))))))))\nE = Node(1, Node(3, Node(5)))\nprint(filter_iter(lambda x: 0 == x % 2, E))\nprint(filter_iter(lambda x: 0 == x % 2, L))\n```\n\n### en place\n\n```{python}\ndef filter_iter_inplace(condition, L: Node) -> None:\n    if L is None: return\n    while L.suivant is not None:\n        if not condition(L.valeur):\n            L.valeur = L.suivant.valeur\n            L.suivant = L.suivant.suivant\n        else:\n            L = L.suivant\n\n\nL = Node(1, Node(1, Node(2, Node(2, Node(3, Node(3, Node(6, Node(7, Node(8, Node(9))))))))))\nprint(L)\nfilter_iter_inplace(lambda x: 0 == x % 2, L)\nprint(L)\n\n# On ne peux pas gérer le cas d'un Node avec un seul élément.\n# Cela est dû au fait que python va vouloir garder en mémoire l'objet même si on fait `del L` à l'intérieur de la fonction.\nL = Node(1)\nfilter_iter_inplace(lambda x: 0 == x % 2, L)\nprint(L)\n```\n\n\n\n\n\n# Reduce\n\n## Récursif\n\n```{python}\ndef reduce_rec(operateur, L: Node, init):\n    if L is None:\n        return init\n    return operateur(L.valeur, reduce_rec(operateur, L.suivant, init))\n\nL = Node(1, Node(2, Node(3, Node(4, Node(5)))))\nprint(\"5! =\", reduce_rec(lambda x, y: x*y, L, 1))\n```\n\n\n## Itératif\n\n```{python}\ndef reduce_iter(operateur, L: Node, init):\n    # on cherche la fin de la liste\n    p = L\n    tail = L\n    while p is not None:\n        p = p.suivant\n    tail = p \n    # on fait une réduction en commencant bien par la fin\n    res = init\n    while L is not None:\n        print(\">\", res)\n        res = operateur(L.valeur, res)\n        L = L.suivant\n    return res\n    \nL = Node(1, Node(2, Node(3, Node(4, Node(5)))))\nprint(\"5! =\", reduce_iter(lambda x, y: x*y, L, 1))\nprint(L)\n```\n\n","srcMarkdownNoYaml":"\n\n\n\nLes fonctionnelles sont des fonctions particulières qui prennent en argument des fonctions.\n\nLes fonctionnelles qui nous intéressent sont `map`, `filter` et `reduce`. Elles sont particulièrement intéressantes car elles permettent d'implémenter un grand nombre de fonctions simplement en composant ces trois primitives.\n\n:::{.callout-tip collapse=true}\n## Définition d'une Liste chaînée\n\n```{python}\nclass Node:\n    def __init__(self, valeur, suivant=None):\n        self.valeur = valeur\n        self.suivant = suivant\n\n    def to_list(self):\n        if self.suivant is None:\n            return [self.valeur]\n        return [self.valeur] + self.suivant.to_list()\n\n    def __str__(self):\n        return f\"({','.join(map(str, self.to_list()))})\"\n```\n:::\n\n# Primitive `map`\n\nLa primitive `map` existe en python par défaut, pour les Listes classiques (et les itérateurs en général).\n\nElle admet deux paramètres : une fonction et une Liste, et elle va retourner une nouvelle liste qui est construite en appliquant la fonction sur chaque élément de la liste. Voici un exemple :\n\n```{python}\ndef double(n: int or float) -> int or float:\n    return 2 * n\n\nL = [1, 2, 3, 5, 8, 13]\ndouble_L = map(double, L)\n# on est obligé d'ajouter list car map ne renvoie pas une Liste, mais un objet map\ndouble_L = list(double_L)\nprint(double_L)\n```\n\n\nOn veut donc implémenter cette fonction pour des Listes chaînées.\nplusieurs options pour l'implémenter :\n\n - itérativement : avec une boucle\n - récursivement : sans boucle, utilisant la fonction elle-même dans sa définition\n - *out-of-place* : on créée une nouvelle Liste à chaque fois\n - en-place : on ne créée pas une nouvelle Liste, mais on modifie celle donnée en paramètre\n \n## Récursivement\n\n### En place\n\nIci, la fonction ne renvoie rien (précisé par le `-> None`), car elle modifie la Liste qu'on lui donne.\n\n```{python}\ndef map_rec_in_place(fonction, node: Node) -> None:\n    if node is None:\n        return None\n    # on modifie la valeur du node\n    node.valeur = fonction(node.valeur)\n    # on appelle map sur la suite de la Liste\n    return map_rec_in_place(fonction, node.suivant)\n```\n\nOn peut tester notre `map` avec différentes fonctions à appliquer\n\n```{python}\ndef double(x):\n    return x * 2\n\ndef inverse(x):\n    return 1 / x\n\n# on voit que la liste L est bien modifiée à chaque fois\nL = Node(1, Node(2, Node(3, Node(5, Node(8)))))\nprint(L)\nmap_rec_in_place(double, L)\nprint(L)\nmap_rec_in_place(inverse, L)\nprint(L)\n```\n\n\n\n### *Out-of-place*\n\nPour créer une nouvelle Liste, on va supprimer l'étape où l'on modifie la valeur du node, et on va à la place créer un nouveau Node que l'on retournera.\n\n```{python}\ndef map_rec(fonction, node: Node) -> Node:\n    if node is None:\n        return None\n    return Node(fonction(node.valeur),\n                map_rec(fonction, node.suivant))\n\n\nL = Node(1, Node(2, Node(3, Node(5, Node(8)))))\nD = map_rec(double, L)\nI = map_rec(inverse, L)\nprint(\"L =\", L)  # L n'est pas modifiée\nprint(\"D =\", D)  # D est une nouvelle Liste\nprint(\"I =\", I)  # I est une nouvelle Liste\n```\n\n::: {.callout-tip collapse=true}\n## Explication détaillée\n\nOn peut réécrire la fonction :\n\n```python\ndef map_rec(fonction, node: Node) -> Node:\n    # cas de base\n    if node is None:\n        return None\n    # on applique la fonction pour avoir la nouvelle valeur\n    nouvelle_valeur = fonction(node.valeur)\n    # on fait une récursion pour le reste de la Liste\n    node_suivant = map_rec(fontion, node.suivant)\n    # on créée un nouveau Node avec les résultats obtenus\n    return Node(nouvelle_valeur, node_suivant)\n```\n:::\n\n\n## Itérativement\n\n### En place\n\nOn veut modifier la Liste passée en paramètre.\n\n```{python}\ndef map_iter_in_place(fonction, node: Node) -> None:\n    pos = node\n    while pos is not None:\n        pos.valeur = fonction(pos.valeur)\n        pos = pos.suivant\n\n\n# on voit que la liste L est bien modifiée à chaque fois\nL = Node(1, Node(2, Node(3, Node(5, Node(8)))))\nprint(L)\nmap_iter_in_place(double, L)\nprint(L)\nmap_iter_in_place(inverse, L)\nprint(L)\n```\n\n\n### Out-of-place\n\n```python\ndef map_iter(fonction, node: Node) -> Node:\n    if node is None: return None\n    new_node = Node(fonction(node.valeur))\n    new_tail = new_node\n    pos = node.suivant\n    while pos is not None:\n        new_tail.suivant = Node(fonction(pos.valeur))\n        new_tail = new_tail.suivant\n        pos = pos.suivant\n    return new_node\n\nL = Node(1, Node(2, Node(3, Node(5, Node(8)))))\nD = map_rec(double, L)\nI = map_rec(inverse, L)\nprint(\"L =\", L)  # L n'est pas modifiée\nprint(\"D =\", D)  # D est une nouvelle Liste\nprint(\"I =\", I)  # I est une nouvelle Liste\n```\n\n\n\n\n\n# Filter\n\n## récursif\n\n### Out-of-place\n\n```{python}\ndef filter_rec(condition, L: Node) -> Node:\n    if L is None: return None\n    if condition(L.valeur):\n        # garder l'élément actuel et faire une récursion sur le reste de la liste\n        return Node(L.valeur, filter_rec(condition, L.suivant))\n    # ne pas garder l'élément actuel\n    return filter_rec(condition, L.suivant)\n\nL = Node(1, Node(2, Node(3, Node(4, Node(5, Node(6, Node(7)))))))\n# on filtre seulement les nombres pairs\nprint(filter_rec(lambda x: 0 == x%2, L))\n```\n\n### En place\n\n\n## itératif\n\n### out-of-place\n\n```{python}\ndef filter_iter(condition, L: Node) -> Node:\n    if L is None: return None\n    # trouver le premier élément qui respecte `condition`\n    while not condition(L.valeur):\n        L = L.suivant\n        # liste qui ne respecte jamais `condition`\n        if L is None: return None\n    # filtrer le reste des éléments et les mettre dans `res`\n    res = Node(L.valeur)\n    res_tail = res\n    while L.suivant is not None:\n        L = L.suivant\n        if condition(L.valeur):\n            res_tail.suivant = Node(L.valeur)\n            res_tail = res_tail.suivant\n    return res\n\nL = Node(1, Node(3, Node(5, Node(7, Node(8, Node(9, Node(10, Node(11, Node(12)))))))))\nE = Node(1, Node(3, Node(5)))\nprint(filter_iter(lambda x: 0 == x % 2, E))\nprint(filter_iter(lambda x: 0 == x % 2, L))\n```\n\n### en place\n\n```{python}\ndef filter_iter_inplace(condition, L: Node) -> None:\n    if L is None: return\n    while L.suivant is not None:\n        if not condition(L.valeur):\n            L.valeur = L.suivant.valeur\n            L.suivant = L.suivant.suivant\n        else:\n            L = L.suivant\n\n\nL = Node(1, Node(1, Node(2, Node(2, Node(3, Node(3, Node(6, Node(7, Node(8, Node(9))))))))))\nprint(L)\nfilter_iter_inplace(lambda x: 0 == x % 2, L)\nprint(L)\n\n# On ne peux pas gérer le cas d'un Node avec un seul élément.\n# Cela est dû au fait que python va vouloir garder en mémoire l'objet même si on fait `del L` à l'intérieur de la fonction.\nL = Node(1)\nfilter_iter_inplace(lambda x: 0 == x % 2, L)\nprint(L)\n```\n\n\n\n\n\n# Reduce\n\n## Récursif\n\n```{python}\ndef reduce_rec(operateur, L: Node, init):\n    if L is None:\n        return init\n    return operateur(L.valeur, reduce_rec(operateur, L.suivant, init))\n\nL = Node(1, Node(2, Node(3, Node(4, Node(5)))))\nprint(\"5! =\", reduce_rec(lambda x, y: x*y, L, 1))\n```\n\n\n## Itératif\n\n```{python}\ndef reduce_iter(operateur, L: Node, init):\n    # on cherche la fin de la liste\n    p = L\n    tail = L\n    while p is not None:\n        p = p.suivant\n    tail = p \n    # on fait une réduction en commencant bien par la fin\n    res = init\n    while L is not None:\n        print(\">\", res)\n        res = operateur(L.valeur, res)\n        L = L.suivant\n    return res\n    \nL = Node(1, Node(2, Node(3, Node(4, Node(5)))))\nprint(\"5! =\", reduce_iter(lambda x, y: x*y, L, 1))\nprint(L)\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"include-in-header":{"text":"<script data-goatcounter=\"https://osk42.goatcounter.com/count\" async src=\"//gc.zgo.at/count.js\"></script>\n"},"toc":true,"output-file":"algo avancee fonctionnelles.html"},"language":{"toc-title-document":"Table des matières","toc-title-website":"Sur cette page","related-formats-title":"Autres formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"La source","other-links-title":"Autres liens","code-links-title":"Liens de code","launch-dev-container-title":"Lancer le Dev Container","launch-binder-title":"Lancer le Binder","article-notebook-label":"Cahier d'articles","notebook-preview-download":"Télécharger le cahier","notebook-preview-download-src":"Télécharger le code source","notebook-preview-back":"Retour à l'article","manuscript-meca-bundle":"Archive MECA","section-title-abstract":"Résumé","section-title-appendices":"Annexes","section-title-footnotes":"Notes de bas de page","section-title-references":"Les références","section-title-reuse":"Réutilisation","section-title-copyright":"Droits d'auteur","section-title-citation":"Citation","appendix-attribution-cite-as":"Veuillez citer ce travail comme suit :","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Voir la Licence","title-block-author-single":"Auteur·rice","title-block-author-plural":"Auteur·rice·s","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Date de publication","title-block-modified":"Modifié","title-block-keywords":"Mots clés","callout-tip-title":"Astuce","callout-note-title":"Note","callout-warning-title":"Avertissement","callout-important-title":"Important","callout-caution-title":"Mise en garde","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Montrer tout le code","code-tools-hide-all-code":"Cacher tout le code","code-tools-view-source":"Voir les sources","code-tools-source-code":"Code source","tools-share":"Share","tools-download":"Download","code-line":"Ligne","code-lines":"Lignes","copy-button-tooltip":"Copier vers le presse-papier","copy-button-tooltip-success":"Copié","repo-action-links-edit":"Modifier cette page","repo-action-links-source":"Voir la source","repo-action-links-issue":"Faire part d'un problème","back-to-top":"Retour au sommet","search-no-results-text":"Pas de résultats","search-matching-documents-text":"documents trouvés","search-copy-link-title":"Copier le lien vers la recherche","search-hide-matches-text":"Cacher les correspondances additionnelles","search-more-match-text":"correspondance de plus dans ce document","search-more-matches-text":"correspondances de plus dans ce document","search-clear-button-title":"Effacer","search-text-placeholder":"","search-detached-cancel-button-title":"Annuler","search-submit-button-title":"Envoyer","search-label":"Recherche","toggle-section":"Basculer la section","toggle-sidebar":"Basculer la barre latérale","toggle-dark-mode":"Basculer le mode sombre","toggle-reader-mode":"Basculer en mode lecteur","toggle-navigation":"Basculer la navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Théorème","crossref-lem-title":"Lemme","crossref-cor-title":"Corollaire","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Définition","crossref-exm-title":"Exemple","crossref-exr-title":"Exercice","crossref-ch-prefix":"Chapitre","crossref-apx-prefix":"Annexe","crossref-sec-prefix":"Section","crossref-eq-prefix":"Équation","crossref-lof-title":"Liste des Figures","crossref-lot-title":"Liste des Tables","crossref-lol-title":"Liste des Listings","environment-proof-title":"Preuve","environment-remark-title":"Remarque","environment-solution-title":"Solution","listing-page-order-by":"Trier par","listing-page-order-by-default":"Ordre par défaut","listing-page-order-by-date-asc":"Le plus ancien","listing-page-order-by-date-desc":"Le plus récent","listing-page-order-by-number-desc":"Descendant","listing-page-order-by-number-asc":"Ascendant","listing-page-field-date":"Date","listing-page-field-title":"Titre","listing-page-field-description":"Description","listing-page-field-author":"Auteur·rice","listing-page-field-filename":"Nom de fichier","listing-page-field-filemodified":"Modifié","listing-page-field-subtitle":"Sous-titre","listing-page-field-readingtime":"Temps de lecture","listing-page-field-wordcount":"Compteur de Mots","listing-page-field-categories":"Catégories","listing-page-minutes-compact":"{0} min.","listing-page-category-all":"Tous","listing-page-no-matches":"Aucun article correspondant","listing-page-words":"{0} mots","listing-page-filter":"Filtre","draft":"Brouillon"},"metadata":{"lang":"fr","fig-responsive":true,"quarto-version":"1.7.33","editor":{"render-on-save":false},"comments":{"giscus":{"repo":"OsKaR31415/blog","repo-id":"R_kgDOItLnjQ","category":"Announcements","category-id":"DIC_kwDOItLnjc4CYln7","mapping":"url","reactions-enabled":true,"loading":"lazy","input-position":"bottom","theme":{"light":"noborder_light","dark":"noborder_dark"},"language":"fr"}},"theme":{"light":"flatly","dark":"darkly"},"title-block-banner":true,"page-layout":"full","title":"fonctionnelles","description":"map, filter et reduce sur des listes chaînées","date":"2023-03-01","categories":["informatique"],"jupyter":"python3","draft":true},"extensions":{"book":{"multiFile":true}}}},"draft":true,"projectFormats":["html"]}