{
  "hash": "ca3a9381fa38ba89050a8863423e7763",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: fonctionnelles\ndescription: 'map, filter et reduce sur des listes chaînées'\ndate: '2023-03-01'\ncategories:\n  - informatique\ntoc: true\ndraft: true\neditor:\n  render-on-save: false\n---\n\nLes fonctionnelles sont des fonctions particulières qui prennent en argument des fonctions.\n\nLes fonctionnelles qui nous intéressent sont `map`, `filter` et `reduce`. Elles sont particulièrement intéressantes car elles permettent d'implémenter un grand nombre de fonctions simplement en composant ces trois primitives.\n\n:::{.callout-tip collapse=true}\n## Définition d'une Liste chaînée\n\n::: {#9bcee03a .cell execution_count=1}\n``` {.python .cell-code}\nclass Node:\n    def __init__(self, valeur, suivant=None):\n        self.valeur = valeur\n        self.suivant = suivant\n\n    def to_list(self):\n        if self.suivant is None:\n            return [self.valeur]\n        return [self.valeur] + self.suivant.to_list()\n\n    def __str__(self):\n        return f\"({','.join(map(str, self.to_list()))})\"\n```\n:::\n\n\n:::\n\n# Primitive `map`\n\nLa primitive `map` existe en python par défaut, pour les Listes classiques (et les itérateurs en général).\n\nElle admet deux paramètres : une fonction et une Liste, et elle va retourner une nouvelle liste qui est construite en appliquant la fonction sur chaque élément de la liste. Voici un exemple :\n\n::: {#7a214251 .cell execution_count=2}\n``` {.python .cell-code}\ndef double(n: int or float) -> int or float:\n    return 2 * n\n\nL = [1, 2, 3, 5, 8, 13]\ndouble_L = map(double, L)\n# on est obligé d'ajouter list car map ne renvoie pas une Liste, mais un objet map\ndouble_L = list(double_L)\nprint(double_L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2, 4, 6, 10, 16, 26]\n```\n:::\n:::\n\n\nOn veut donc implémenter cette fonction pour des Listes chaînées.\nplusieurs options pour l'implémenter :\n\n - itérativement : avec une boucle\n - récursivement : sans boucle, utilisant la fonction elle-même dans sa définition\n - *out-of-place* : on créée une nouvelle Liste à chaque fois\n - en-place : on ne créée pas une nouvelle Liste, mais on modifie celle donnée en paramètre\n \n## Récursivement\n\n### En place\n\nIci, la fonction ne renvoie rien (précisé par le `-> None`), car elle modifie la Liste qu'on lui donne.\n\n::: {#ec793163 .cell execution_count=3}\n``` {.python .cell-code}\ndef map_rec_in_place(fonction, node: Node) -> None:\n    if node is None:\n        return None\n    # on modifie la valeur du node\n    node.valeur = fonction(node.valeur)\n    # on appelle map sur la suite de la Liste\n    return map_rec_in_place(fonction, node.suivant)\n```\n:::\n\n\nOn peut tester notre `map` avec différentes fonctions à appliquer\n\n::: {#d1f075c9 .cell execution_count=4}\n``` {.python .cell-code}\ndef double(x):\n    return x * 2\n\ndef inverse(x):\n    return 1 / x\n\n# on voit que la liste L est bien modifiée à chaque fois\nL = Node(1, Node(2, Node(3, Node(5, Node(8)))))\nprint(L)\nmap_rec_in_place(double, L)\nprint(L)\nmap_rec_in_place(inverse, L)\nprint(L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1,2,3,5,8)\n(2,4,6,10,16)\n(0.5,0.25,0.16666666666666666,0.1,0.0625)\n```\n:::\n:::\n\n\n### *Out-of-place*\n\nPour créer une nouvelle Liste, on va supprimer l'étape où l'on modifie la valeur du node, et on va à la place créer un nouveau Node que l'on retournera.\n\n::: {#cef56b22 .cell execution_count=5}\n``` {.python .cell-code}\ndef map_rec(fonction, node: Node) -> Node:\n    if node is None:\n        return None\n    return Node(fonction(node.valeur),\n                map_rec(fonction, node.suivant))\n\n\nL = Node(1, Node(2, Node(3, Node(5, Node(8)))))\nD = map_rec(double, L)\nI = map_rec(inverse, L)\nprint(\"L =\", L)  # L n'est pas modifiée\nprint(\"D =\", D)  # D est une nouvelle Liste\nprint(\"I =\", I)  # I est une nouvelle Liste\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nL = (1,2,3,5,8)\nD = (2,4,6,10,16)\nI = (1.0,0.5,0.3333333333333333,0.2,0.125)\n```\n:::\n:::\n\n\n::: {.callout-tip collapse=true}\n## Explication détaillée\n\nOn peut réécrire la fonction :\n\n```python\ndef map_rec(fonction, node: Node) -> Node:\n    # cas de base\n    if node is None:\n        return None\n    # on applique la fonction pour avoir la nouvelle valeur\n    nouvelle_valeur = fonction(node.valeur)\n    # on fait une récursion pour le reste de la Liste\n    node_suivant = map_rec(fontion, node.suivant)\n    # on créée un nouveau Node avec les résultats obtenus\n    return Node(nouvelle_valeur, node_suivant)\n```\n:::\n\n\n## Itérativement\n\n### En place\n\nOn veut modifier la Liste passée en paramètre.\n\n::: {#89873221 .cell execution_count=6}\n``` {.python .cell-code}\ndef map_iter_in_place(fonction, node: Node) -> None:\n    pos = node\n    while pos is not None:\n        pos.valeur = fonction(pos.valeur)\n        pos = pos.suivant\n\n\n# on voit que la liste L est bien modifiée à chaque fois\nL = Node(1, Node(2, Node(3, Node(5, Node(8)))))\nprint(L)\nmap_iter_in_place(double, L)\nprint(L)\nmap_iter_in_place(inverse, L)\nprint(L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1,2,3,5,8)\n(2,4,6,10,16)\n(0.5,0.25,0.16666666666666666,0.1,0.0625)\n```\n:::\n:::\n\n\n### Out-of-place\n\n```python\ndef map_iter(fonction, node: Node) -> Node:\n    if node is None: return None\n    new_node = Node(fonction(node.valeur))\n    new_tail = new_node\n    pos = node.suivant\n    while pos is not None:\n        new_tail.suivant = Node(fonction(pos.valeur))\n        new_tail = new_tail.suivant\n        pos = pos.suivant\n    return new_node\n\nL = Node(1, Node(2, Node(3, Node(5, Node(8)))))\nD = map_rec(double, L)\nI = map_rec(inverse, L)\nprint(\"L =\", L)  # L n'est pas modifiée\nprint(\"D =\", D)  # D est une nouvelle Liste\nprint(\"I =\", I)  # I est une nouvelle Liste\n```\n\n\n\n\n\n# Filter\n\n## récursif\n\n### Out-of-place\n\n::: {#7d77c74b .cell execution_count=7}\n``` {.python .cell-code}\ndef filter_rec(condition, L: Node) -> Node:\n    if L is None: return None\n    if condition(L.valeur):\n        # garder l'élément actuel et faire une récursion sur le reste de la liste\n        return Node(L.valeur, filter_rec(condition, L.suivant))\n    # ne pas garder l'élément actuel\n    return filter_rec(condition, L.suivant)\n\nL = Node(1, Node(2, Node(3, Node(4, Node(5, Node(6, Node(7)))))))\n# on filtre seulement les nombres pairs\nprint(filter_rec(lambda x: 0 == x%2, L))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(2,4,6)\n```\n:::\n:::\n\n\n### En place\n\n\n## itératif\n\n### out-of-place\n\n::: {#9f491247 .cell execution_count=8}\n``` {.python .cell-code}\ndef filter_iter(condition, L: Node) -> Node:\n    if L is None: return None\n    # trouver le premier élément qui respecte `condition`\n    while not condition(L.valeur):\n        L = L.suivant\n        # liste qui ne respecte jamais `condition`\n        if L is None: return None\n    # filtrer le reste des éléments et les mettre dans `res`\n    res = Node(L.valeur)\n    res_tail = res\n    while L.suivant is not None:\n        L = L.suivant\n        if condition(L.valeur):\n            res_tail.suivant = Node(L.valeur)\n            res_tail = res_tail.suivant\n    return res\n\nL = Node(1, Node(3, Node(5, Node(7, Node(8, Node(9, Node(10, Node(11, Node(12)))))))))\nE = Node(1, Node(3, Node(5)))\nprint(filter_iter(lambda x: 0 == x % 2, E))\nprint(filter_iter(lambda x: 0 == x % 2, L))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNone\n(8,10,12)\n```\n:::\n:::\n\n\n### en place\n\n::: {#552852ba .cell execution_count=9}\n``` {.python .cell-code}\ndef filter_iter_inplace(condition, L: Node) -> None:\n    if L is None: return\n    while L.suivant is not None:\n        if not condition(L.valeur):\n            L.valeur = L.suivant.valeur\n            L.suivant = L.suivant.suivant\n        else:\n            L = L.suivant\n\n\nL = Node(1, Node(1, Node(2, Node(2, Node(3, Node(3, Node(6, Node(7, Node(8, Node(9))))))))))\nprint(L)\nfilter_iter_inplace(lambda x: 0 == x % 2, L)\nprint(L)\n\n# On ne peux pas gérer le cas d'un Node avec un seul élément.\n# Cela est dû au fait que python va vouloir garder en mémoire l'objet même si on fait `del L` à l'intérieur de la fonction.\nL = Node(1)\nfilter_iter_inplace(lambda x: 0 == x % 2, L)\nprint(L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1,1,2,2,3,3,6,7,8,9)\n(2,2,6,8,9)\n(1)\n```\n:::\n:::\n\n\n# Reduce\n\n## Récursif\n\n::: {#62ac8a47 .cell execution_count=10}\n``` {.python .cell-code}\ndef reduce_rec(operateur, L: Node, init):\n    if L is None:\n        return init\n    return operateur(L.valeur, reduce_rec(operateur, L.suivant, init))\n\nL = Node(1, Node(2, Node(3, Node(4, Node(5)))))\nprint(\"5! =\", reduce_rec(lambda x, y: x*y, L, 1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5! = 120\n```\n:::\n:::\n\n\n## Itératif\n\n::: {#1f4f2b67 .cell execution_count=11}\n``` {.python .cell-code}\ndef reduce_iter(operateur, L: Node, init):\n    # on cherche la fin de la liste\n    p = L\n    tail = L\n    while p is not None:\n        p = p.suivant\n    tail = p \n    # on fait une réduction en commencant bien par la fin\n    res = init\n    while L is not None:\n        print(\">\", res)\n        res = operateur(L.valeur, res)\n        L = L.suivant\n    return res\n    \nL = Node(1, Node(2, Node(3, Node(4, Node(5)))))\nprint(\"5! =\", reduce_iter(lambda x, y: x*y, L, 1))\nprint(L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n> 1\n> 1\n> 2\n> 6\n> 24\n5! = 120\n(1,2,3,4,5)\n```\n:::\n:::\n\n\n",
    "supporting": [
      "algo avancee fonctionnelles_files"
    ],
    "filters": [],
    "includes": {}
  }
}