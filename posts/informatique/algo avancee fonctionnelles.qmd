---
title: "fonctionnelles"
date: 2023-03-01
categories: [ informatique ]
jupyter: python3
toc: true
draft: true
editor:
  render-on-save: false
---



Les fonctionnelles sont des fonctions particulières qui prennent en argument des fonctions.

Les fonctionnelles qui nous intéressent sont `map`, `filter` et `reduce`. Elles sont particulièrement intéressantes car elles permettent d'implémenter un grand nombre de fonctions simplement en composant ces trois primitives.

:::{.callout-tip collapse=true}
## Définition d'une Liste chaînée

```{python}
class Node:
    def __init__(self, valeur, suivant=None):
        self.valeur = valeur
        self.suivant = suivant

    def to_list(self):
        if self.suivant is None:
            return [self.valeur]
        return [self.valeur] + self.suivant.to_list()

    def __str__(self):
        return f"({','.join(map(str, self.to_list()))})"
```
:::

# Primitive `map`

La primitive `map` existe en python par défaut, pour les Listes classiques (et les itérateurs en général).

Elle admet deux paramètres : une fonction et une Liste, et elle va retourner une nouvelle liste qui est construite en appliquant la fonction sur chaque élément de la liste. Voici un exemple :

```{python}
def double(n: int or float) -> int or float:
    return 2 * n

L = [1, 2, 3, 5, 8, 13]
double_L = map(double, L)
# on est obligé d'ajouter list car map ne renvoie pas une Liste, mais un objet map
double_L = list(double_L)
print(double_L)
```


On veut donc implémenter cette fonction pour des Listes chaînées.
plusieurs options pour l'implémenter :

 - itérativement : avec une boucle
 - récursivement : sans boucle, utilisant la fonction elle-même dans sa définition
 - *out-of-place* : on créée une nouvelle Liste à chaque fois
 - en-place : on ne créée pas une nouvelle Liste, mais on modifie celle donnée en paramètre
 
## Récursivement

### En place

Ici, la fonction ne renvoie rien (précisé par le `-> None`), car elle modifie la Liste qu'on lui donne.

```{python}
def map_rec_in_place(fonction, node: Node) -> None:
    if node is None:
        return None
    # on modifie la valeur du node
    node.valeur = fonction(node.valeur)
    # on appelle map sur la suite de la Liste
    return map_rec_in_place(fonction, node.suivant)
```

On peut tester notre `map` avec différentes fonctions à appliquer

```{python}
def double(x):
    return x * 2

def inverse(x):
    return 1 / x

# on voit que la liste L est bien modifiée à chaque fois
L = Node(1, Node(2, Node(3, Node(5, Node(8)))))
print(L)
map_rec_in_place(double, L)
print(L)
map_rec_in_place(inverse, L)
print(L)
```



### *Out-of-place*

Pour créer une nouvelle Liste, on va supprimer l'étape où l'on modifie la valeur du node, et on va à la place créer un nouveau Node que l'on retournera.

```{python}
def map_rec(fonction, node: Node) -> Node:
    if node is None:
        return None
    return Node(fonction(node.valeur),
                map_rec(fonction, node.suivant))


L = Node(1, Node(2, Node(3, Node(5, Node(8)))))
D = map_rec(double, L)
I = map_rec(inverse, L)
print("L =", L)  # L n'est pas modifiée
print("D =", D)  # D est une nouvelle Liste
print("I =", I)  # I est une nouvelle Liste
```

::: {.callout-tip collapse=true}
## Explication détaillée

On peut réécrire la fonction :

```python
def map_rec(fonction, node: Node) -> Node:
    # cas de base
    if node is None:
        return None
    # on applique la fonction pour avoir la nouvelle valeur
    nouvelle_valeur = fonction(node.valeur)
    # on fait une récursion pour le reste de la Liste
    node_suivant = map_rec(fontion, node.suivant)
    # on créée un nouveau Node avec les résultats obtenus
    return Node(nouvelle_valeur, node_suivant)
```
:::


## Itérativement

### En place

On veut modifier la Liste passée en paramètre.

```{python}
def map_iter_in_place(fonction, node: Node) -> None:
    pos = node
    while pos is not None:
        pos.valeur = fonction(pos.valeur)
        pos = pos.suivant


# on voit que la liste L est bien modifiée à chaque fois
L = Node(1, Node(2, Node(3, Node(5, Node(8)))))
print(L)
map_iter_in_place(double, L)
print(L)
map_iter_in_place(inverse, L)
print(L)
```


### Out-of-place

```python
def map_iter(fonction, node: Node) -> Node:
    if node is None: return None
    new_node = Node(fonction(node.valeur))
    new_tail = new_node
    pos = node.suivant
    while pos is not None:
        new_tail.suivant = Node(fonction(pos.valeur))
        new_tail = new_tail.suivant
        pos = pos.suivant
    return new_node

L = Node(1, Node(2, Node(3, Node(5, Node(8)))))
D = map_rec(double, L)
I = map_rec(inverse, L)
print("L =", L)  # L n'est pas modifiée
print("D =", D)  # D est une nouvelle Liste
print("I =", I)  # I est une nouvelle Liste
```





# Filter

## récursif

### Out-of-place

```{python}
def filter_rec(condition, L: Node) -> Node:
    if L is None: return None
    if condition(L.valeur):
        # garder l'élément actuel et faire une récursion sur le reste de la liste
        return Node(L.valeur, filter_rec(condition, L.suivant))
    # ne pas garder l'élément actuel
    return filter_rec(condition, L.suivant)

L = Node(1, Node(2, Node(3, Node(4, Node(5, Node(6, Node(7)))))))
# on filtre seulement les nombres pairs
print(filter_rec(lambda x: 0 == x%2, L))
```

### En place


## itératif

### out-of-place

```{python}
def filter_iter(condition, L: Node) -> Node:
    if L is None: return None
    # trouver le premier élément qui respecte `condition`
    while not condition(L.valeur):
        L = L.suivant
        # liste qui ne respecte jamais `condition`
        if L is None: return None
    # filtrer le reste des éléments et les mettre dans `res`
    res = Node(L.valeur)
    res_tail = res
    while L.suivant is not None:
        L = L.suivant
        if condition(L.valeur):
            res_tail.suivant = Node(L.valeur)
            res_tail = res_tail.suivant
    return res

L = Node(1, Node(3, Node(5, Node(7, Node(8, Node(9, Node(10, Node(11, Node(12)))))))))
E = Node(1, Node(3, Node(5)))
print(filter_iter(lambda x: 0 == x % 2, E))
print(filter_iter(lambda x: 0 == x % 2, L))
```

### en place

```{python}
def filter_iter_inplace(condition, L: Node) -> None:
    if L is None: return
    while L.suivant is not None:
        if not condition(L.valeur):
            L.valeur = L.suivant.valeur
            L.suivant = L.suivant.suivant
        else:
            L = L.suivant


L = Node(1, Node(1, Node(2, Node(2, Node(3, Node(3, Node(6, Node(7, Node(8, Node(9))))))))))
print(L)
filter_iter_inplace(lambda x: 0 == x % 2, L)
print(L)

# On ne peux pas gérer le cas d'un Node avec un seul élément.
# Cela est dû au fait que python va vouloir garder en mémoire l'objet même si on fait `del L` à l'intérieur de la fonction.
L = Node(1)
filter_iter_inplace(lambda x: 0 == x % 2, L)
print(L)
```





# Reduce

## Récursif

```{python}
def reduce_rec(operateur, L: Node, init):
    if L is None:
        return init
    return operateur(L.valeur, reduce_rec(operateur, L.suivant, init))

L = Node(1, Node(2, Node(3, Node(4, Node(5)))))
print("5! =", reduce_rec(lambda x, y: x*y, L, 1))
```


## Itératif

```{python}
def reduce_iter(operateur, L: Node, init):
    # on cherche la fin de la liste
    p = L
    tail = L
    while p is not None:
        p = p.suivant
    tail = p 
    # on fait une réduction en commencant bien par la fin
    res = init
    while L is not None:
        print(">", res)
        res = operateur(L.valeur, res)
        L = L.suivant
    return res
    
L = Node(1, Node(2, Node(3, Node(4, Node(5)))))
print("5! =", reduce_iter(lambda x, y: x*y, L, 1))
print(L)
```

