[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "A propos",
    "section": "",
    "text": "Je suis passionné par l’informatique, les mathématiques, la connaissance en général, les raccourcis clavier, les bandes dessinnées, la musique et les autres arts, l’origami, et le chocolat.\nJ’étudie actuellement en licence de mathématiques et en licence d’informatique."
  },
  {
    "objectID": "about.html#crédits-des-icônes",
    "href": "about.html#crédits-des-icônes",
    "title": "A propos",
    "section": "Crédits des icônes",
    "text": "Crédits des icônes\n\nAlgebra icons created by Freepik - Flaticon\nBackpack icons created by max.icons - Flaticon\nCoding icons created by juicy_fish - Flaticon\nHierarchy icons created by Becris - Flaticon\nLoop icons created by Pixelmeetup - Flaticon\nMath icons created by Freepik - Flaticon\nSpace suit icons created by surang - Flaticon\nUi icons created by Arafat Uddin - Flaticon\nCreativity icons created by Eucalyp - Flaticon"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "0SK42 - Tous les posts",
    "section": "",
    "text": "Réflexions personnelles\n\n\n\n\n\n\nréflexions\n\n\nindex\n\n\n\nListe des notions de Mathématiques\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInformatique\n\n\n\n\n\n\ninformatique\n\n\nindex\n\n\n\nListe des notions d’Informatique\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInformatique\n\n\n\n\n\n\ninformatique\n\n\nindex\n\n\n\nListe des notions d’Informatique\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMathématiques\n\n\n\n\n\n\nmaths\n\n\nindex\n\n\n\nListe des notions de Mathématiques\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEt si tout le monde saute d’un pont, tu le fais aussi ?\n\n\n\n\n\n\naphorisme\n\n\nréflexion\n\n\n\nComment répondre aux gens énervants qui utilisent cette phrase.\n\n\n\n\n\nAug 10, 2023\n\n\n\n\n\n\n\n\n\n\n\n\ncomment mieux apprendre\n\n\n\n\n\n\napprendre\n\n\n\nun guide plein de conseils pour vous aider à être efficace quand vous voulez apprendre une nouvelle qualification.\n\n\n\n\n\nAug 4, 2023\n\n\nOscar Plaisant, bucdany\n\n\n\n\n\n\n\n\n\n\n\n\nContre, l’usage, abusif, de la virgule, dans la notation, mathématique\n\n\n\n\n\n\nmaths\n\n\n\nPourquoi la virgule devrait être moins utilisée dans la notation mathématique.\n\n\n\n\n\nJul 23, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nLe langage APL\n\n\n\n\n\n\ninformatique\n\n\n\nA propos de mon langage de programmation préféré\n\n\n\n\n\nMar 23, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nconvertir des listes python en tables markdown\n\n\n\n\n\n\ninformatique\n\n\n\nUn script python qui convertit une liste de liste en un tableau en syntaxe markdown.\n\n\n\n\n\nMar 10, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nalgo avancee activite 4\n\n\n\n\n\n\ninformatique\n\n\n\ncorrection détaillée\n\n\n\n\n\nMar 9, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nalgo avancee correction controle\n\n\n\n\n\n\ninformatique\n\n\n\ncorrection détaillée\n\n\n\n\n\nMar 2, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nterminal - btop : statistiques des processus\n\n\n\n\n\n\ninformatique\n\n\n\nUtilitaire ligne de commande pour visualiser les processus actifs et les statistiques.\n\n\n\n\n\nFeb 20, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nCorrection du TD 1 de probabilités (combinatoire)\n\n\n\n\n\n\nmaths\n\n\n\n\n\n\n\n\n\nJan 20, 2023\n\n\n\n\n\n\n\n\n\n\n\n\ntransposition\n\n\n\n\n\n\nmaths\n\n\n\nPermutation qui n’échange que deux éléments.\n\n\n\n\n\nJan 19, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nAlgorithmique avancée - activité 1\n\n\n\n\n\n\ninformatique\n\n\n\n\n\n\n\n\n\nJan 15, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nLe dimanche, il pleut généralement à l’extérieur\n\n\n\n\n\n\naphorisme\n\n\nzététique\n\n\nréflexion\n\n\n\n\n\n\n\n\n\nJan 8, 2023\n\n\n\n\n\n\n\n\n\n\n\n\narrangements avec répétitions\n\n\n\n\n\n\nmaths\n\n\n\nnombre de sacs à k éléments inclus dans un ensemble à n éléments\n\n\n\n\n\nJan 6, 2023\n\n\n\n\n\n\n\n\n\n\n\n\ncombinaisons avec répétitions\n\n\n\n\n\n\nmaths\n\n\n\nC’est le nombre de sacs à \\(k\\) éléments inclus dans un ensemble à \\(n\\) éléments.\n\n\n\n\n\nJan 6, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nvim tips autocorriger les erreurs\n\n\n\n\n\n\nvim\n\n\ntips\n\n\n\nComment corriger rapidement des erreurs d’orthographe\n\n\n\n\n\nJan 5, 2023\n\n\n\n\n\n\n\n\n\n\n\n\narrangements\n\n\n\n\n\n\nmaths\n\n\n\n\n\n\n\n\n\nJan 5, 2023\n\n\n\n\n\n\n\n\n\n\n\n\ncombinaisons\n\n\n\n\n\n\nmaths\n\n\n\nNombre d’ensembles à \\(k\\) éléments contenus dans un ensemble à \\(n\\) éléments.\n\n\n\n\n\nJan 5, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nsacs (multi-ensembles)\n\n\n\n\n\n\nmaths\n\n\n\nensemble avec répétition\n\n\n\n\n\nJan 4, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nvim tips - leader\n\n\n\n\n\n\nvim\n\n\ntips\n\n\n\nprésentation du raccourci &lt;leader&gt; dans vim\n\n\n\n\n\nJan 3, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nformulaire d’analyse\n\n\n\n\n\n\nmaths\n\n\nindex\n\n\n\nListe de formules utiles à connaître.\n\n\n\n\n\nJan 3, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nPourquoi ce blog ?\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJan 2, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nBienvenue sur mon blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJan 1, 2023\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/autres/Le dimanche, il pleut généralement à l'extérieur.html",
    "href": "posts/autres/Le dimanche, il pleut généralement à l'extérieur.html",
    "title": "Le dimanche, il pleut généralement à l’extérieur",
    "section": "",
    "text": "Le dimanche, il pleut généralement à l’extérieur\n\n\n\n\n\n\n\n\nExplication\n\n\n\nLa phrase semble bizarre, parce qu’on a l’impression qu’elle sous-entend que, les autres jours, il pleut à l’intérieur (ou en tout cas, qu’il ne pleut pas à l’extérieur).\nCette phrase montre que, en français, quand on donne une condition, quand on limite un énoncé (ici “le dimanche”), on suppose souvent que ce qui est énoncé (ici “il pleut à l’extérieur”) est vrai seulement pour cette condition.\nOr, il est évident que, quel que soit le jour, il pleut généralement à l’extérieur.\nEt pourtant, on se rend compte que la phrase n’est pas pour autant fausse : effectivement, le dimanche (comme les autres jours), il pleut plutôt à l’extérieur.\nMais pourquoi interprétons-nous cette phrase différemment ? C’est parce que, dans la plupart des cas du quotidien, il est plus simple de ne dire qu’une phrase pour en dire deux. Par exemple : “je vais faire du sport tous les lundis” suppose aussi que “je ne vais pas faire de sport les autres jours”. C’est bien pratique pour communiquer !\nIl faut cependant faire attention, car cette supposition peut causer des erreurs de compréhension, lors d’un débat par exemple, où les arguments doivent être précis !"
  },
  {
    "objectID": "posts/autres/si tout le monde saute dun pont.html",
    "href": "posts/autres/si tout le monde saute dun pont.html",
    "title": "Et si tout le monde saute d’un pont, tu le fais aussi ?",
    "section": "",
    "text": "Et si tout le monde saute d’un pont, tu le fais aussi ?\n\nIl existe deux types de personnes : ceux qui utilisent cette phrase, et ceux qui ne l’utilisent pas. Et les premiers ont tendance à être pénibles. Voici donc ma réponse à tous ceux qui au cours d’un débat ont brandi fièrement ce fleuron de bon sens.\nSi on suppose que la question est de savoir si l’on est prêts à sauter d’un pont simplement parce que d’autres gens le font, la réponse est sûrement, en l’absence de variables cachée, non. Cependant, il semble important de noter que si “tout le monde saute d’un pont”, il y a peut-être une raison, et en tout cas certainement une conséquence moindre, car loin d’être des êtres uniquement capables de dupliquer par grégarisme les comportements de leurs camarades, les êtres humains ont une pensée qui tente à chaque instant de prévoir au mieux le futur. Ainsi, si tant de gens souhaitent volontairement sauter de ce pont, c’est qu’ils doivent en être arrivés à la conclusion que cela était bénéfique.\nCependant, le lecteur éclairé aura remarqué l’analogie qui se cache derrière ce proverbe. La question est donc plutôt “le nombre de prédécesseurs légitime-t-il ?”. Il paraît alors important de remarquer que — et ce peut être justifié par l’explication précédemment donnée de la tendance de tous à faire des choix qui leur sont bénéfiques — les situations dans lesquelles la question rhétorique qui nous intéresse est utilisée sont bien souvent sans conséquences immédiatement grave, puisque personne ne voudrait prendre intentionnellement de mauvaises décisions. La plupart du temps, l’action dont le fait de sauter du pont est une analogie n’est pas réellement si grave. Le parallèle entre une action aux conséquences temporellement décalées et une action probablement mortelle, ou en tout cas dangereuse pour l’intégrité physique, parais peu soutenable, étant donné le contexte d’une discussion sur la suffisance de la reproduction sociale pour justifier ce premier type d’action. On peut également ajouter que, par sa nature condescendante et son fort appui sur le bon sens comme argument logique, “Et si tout le monde saute d’un pont, tu le fais aussi” est une phrase dont les locuteurs sont sûrement les mêmes qui sautent effectivement dans la rivière du sens commun lors d’une promenade sur le pont de l’argumentation."
  },
  {
    "objectID": "posts/maths/sacs.html",
    "href": "posts/maths/sacs.html",
    "title": "sacs (multi-ensembles)",
    "section": "",
    "text": "Définition\n\n\n\nUn sac, ou multi-ensemble, est un ensemble dans lequel on autorise la répétition d’éléments.\nCela signifie que, contrairement aux ensembles, un élément peut être contenu plusieurs fois dans un sac.\nNotation : \\(\\{\\!\\!\\{ a, a, a, b, c, c, d, d, d, d \\}\\!\\!\\}\\)\n\n\n\n\n\n\n\n\nDéfinition formelle\n\n\n\n\n\nOn définit un sac \\(B\\) comme un couple \\((E, f)\\), où : - \\(E\\) est l’ensemble des éléments du sac (sans répétitions) - \\(E\\) est appelé le support de \\(B\\) - \\(f : E \\to \\mathbb{N}\\) est la fonction qui, à un élément de \\(E\\), associe son nombre de répétitions - \\(f\\) est appelée la multiplicité de \\(B\\)\nPar exemple, le sac \\(\\{\\!\\!\\{ a, a, a, b, c, c \\}\\!\\!\\}\\) Se définit avec : - \\(E = \\{ a, b, c \\}\\) - \\(f\\) telle que : - \\(f(a) = 3\\) - \\(f(b)=1\\) - \\(f(c)=2\\)\n\n\n\n\nPropriétés\nSoit \\(B\\) un sac\n\non appelle support de \\(B\\) l’ensemble des éléments de \\(B\\) (donc, sans répétition)\n\nPar exemple, le support de \\(\\{\\!\\!\\{ a, a, a, b, c, c, d, d, d, d \\}\\!\\!\\}\\) est \\(\\{ a, b, c, d \\}\\)\n\non appelle multiplicité de \\(B\\) la fonction qui, à un élément de \\(B\\), associe le nombre de répétitions de cet élément\n\nPar exemple, si \\(f\\) est la multiplicité de \\(\\{\\!\\!\\{ a, a, a, b, c, c, d, d, d, d \\}\\!\\!\\}\\), alors \\(f(a) = 3\\), \\(f(b) = 1\\), \\(f(c) = 2\\) et \\(f(d)=4\\)\n\n\n Si \\(E\\) et \\(f\\) sont le support et la multiplicité de \\(B\\)\n\n\\(\\text{card}(B) = \\sum\\limits_{x \\in E} f(x)\\)\n\nle cardinal est la somme des multiplicités de chaque valeur de \\(E\\)\nc’est évident, puisque la multiplicité est le nombre de répétitions de chaque élément\n\n\n\n\nUtilité\nEn combinatoire, les sacs permettent d’exprimer la possibilité de répéter un élément un certain nombre de fois."
  },
  {
    "objectID": "posts/maths/Contre, l'usage, abusif, de la virgule, dans la notation, mathématique.html",
    "href": "posts/maths/Contre, l'usage, abusif, de la virgule, dans la notation, mathématique.html",
    "title": "Contre, l’usage, abusif, de la virgule, dans la notation, mathématique",
    "section": "",
    "text": "La notation mathématique traditionnelle cherche à traduire des phrases et des calculs en symboles.\nPar exemple, on peut dire “tous les nombres entiers sont pairs ou impairs”, mais on peut également écrire \\(\\forall n \\in \\mathbb{N}, \\quad (2\\mid n) \\vee (2 \\nmid n)\\), ce qui veut dire la même chose.\nLa notation mathématique intéressante principalement pour deux choses :\nC’est pour cette deuxième raison que la virgule pose un problème : elle rend la notation mathématique moins rigoureuse, et parfois même ambigüe."
  },
  {
    "objectID": "posts/maths/Contre, l'usage, abusif, de la virgule, dans la notation, mathématique.html#les-différentes-significations-de-la-virgule",
    "href": "posts/maths/Contre, l'usage, abusif, de la virgule, dans la notation, mathématique.html#les-différentes-significations-de-la-virgule",
    "title": "Contre, l’usage, abusif, de la virgule, dans la notation, mathématique",
    "section": "Les différentes significations de la virgule",
    "text": "Les différentes significations de la virgule\nPour comprendre les problèmes de la virgule, listons les significations possibles de ce symbole :\n\npour des vecteurs, elle sépare les valeurs : \\((x, y, z)\\)\nElle sépare les quantificateurs : \\(\\forall x \\in \\mathbb{R}, \\exists y \\in \\mathbb{R} \\dots\\)\nElle signifie “tel que” : \\(\\exists x \\in \\mathbb{R}, x^{2} &lt; 42\\)\nElle “distribue” un \\(\\in\\) sur plusieurs valeurs : \\(\\forall x, y \\in \\mathbb{R}\\dots\\)"
  },
  {
    "objectID": "posts/maths/Contre, l'usage, abusif, de la virgule, dans la notation, mathématique.html#ambiguïtés-créées-par-la-virgule",
    "href": "posts/maths/Contre, l'usage, abusif, de la virgule, dans la notation, mathématique.html#ambiguïtés-créées-par-la-virgule",
    "title": "Contre, l’usage, abusif, de la virgule, dans la notation, mathématique",
    "section": "Ambiguïtés créées par la virgule",
    "text": "Ambiguïtés créées par la virgule\nNous avons vu que la virgule possède plusieurs utilisations différentes. En fait, on peut aisément construire un exemple qui utilise toutes ces significations :\n\\(\\forall x, y \\in \\mathbb{R}, \\exists y \\in \\mathbb{R}, y \\in (x, y)\\)\nIci, on a le même problème qu’avec l’écriture en français : le même mot (symbole) peut avoir beaucoup de significations selon le contexte. On peut tout de même donner des règles qui permettent de reconnaître quelle interprétation est la bonne : - dans un vecteur (une valeur entre parenthèses), c’est un séparateur des coefficients du vecteur - avant un \\(\\in\\), c’est un raccourci pour dire que toutes les variables listées appartiennent à l’ensemble désigné - Après / entre des quantificateurs - c’est un “tel que” s’il est suivi par une expression ou bien par un “il existe” - c’est un séparateur s’il est suivi par un quantificateur “pour tout” ( \\(\\forall\\) )\n\nCas où la notation est vraiment ambiguë\nOn a vu que, si les interprétations possibles de la virgule, on peut dire @de façon certaine laquelle est la bonne en fonction du contexte.\nMais il arrive que, quand on sait que l’on travaille sur un ensemble particulier (par exemple en arithmétique, on travaille très souvent sur \\(\\mathbb{Z}\\), ou bien en analyse sur \\(\\mathbb{R}\\)) on note \\(\\forall x, \\dots\\) pour dire \\(\\forall x \\in \\text{ensemble concerné}, \\dots\\). C’est un raccourci de notation qui est pratique, mais on peut alors écrire :\n\\(\\forall x,y \\in \\mathbb{R}\\)\nLe problème est le suivant : si \\(y\\) est une variable qui dépend de \\(x\\) (par exemple, si on a posé avant \\(y = x+1\\)), on peut interpréter l’expression comme \\(\\forall x \\in \\mathbb{R}, x+1 \\in \\mathbb{R}\\). L’interprétation est logique, mais on a bien sûr d’abord pensé à ceci : \\(\\forall x \\in \\mathbb{R}, \\forall y \\in \\mathbb{R}\\) (ou \\(\\forall (x, y)\\in \\mathbb{R}^{2}\\), ce qui est équivalent).\nOn voit donc que quelques cas (rares, il faut l’admettre) sont réellement sujets à interprétation\n\n\nDescription des ensembles\nUne autre notation intéressante est celle que l’on utilise pour décrire les ensembles.\nLa notation générale est : \\(\\lbrace x \\in E \\mid \\mathscr{P}(x) \\rbrace\\) où \\(\\mathscr{P}\\) est une propriété qui dépend de \\(x\\). On voit parfois aussi \\(\\lbrace x \\in E : \\mathscr{P}(x) \\rbrace\\).\nBien sûr, la propriété \\(\\mathscr{P}\\) peut contenir des quantificateurs. Par exemple, on peut noter \\(\\lbrace x \\in \\mathbb{R} \\mid \\not \\exists y \\in \\mathbb{Q}, x \\cdot y \\in \\mathbb{Z} \\rbrace\\)\nIci, on note que le “tel que” est noté avec un \\(\\mid\\). L’utilisation de la virgule dans ce contexte est assez rare. En effet, les expressions sont alors beaucoup moins lisibles : \\(\\lbrace x \\in \\mathbb{R}, \\forall y \\in \\mathbb{N}, x\\cdot y \\notin \\mathbb{N} \\rbrace\\) J’ai pourtant déjà vu cette expression : \\(\\{ \\overrightarrow{MN}, M, N \\in F\\}\\).\nIl arrive également que l’on utilise la virgule comme “et” logique : \\(\\left\\lbrace  \\frac{a}{b} \\mid a \\in \\mathbb{Z}, b \\in \\mathbb{Z}^{\\ast}  \\right\\rbrace\\) ou même \\(\\left\\lbrace q \\mid a \\in \\mathbb{Z}, b \\in \\mathbb{Z}^{\\ast}, q = \\frac{a}{b} \\right\\rbrace\\).\nOn pourrait donc avoir cette formule : \\(\\left\\lbrace q, a, b \\in \\mathbb{Z}, b \\neq 0, q = \\frac{a}{b} \\right\\rbrace\\), que l’on n’écrira bien sûr jamais, mais qui montre bien les nombreuses significations possibles de la virgule et le travail d’interprétation que l’on doit faire à chaque fois pour deviner laquelle est la bonne."
  },
  {
    "objectID": "posts/maths/Contre, l'usage, abusif, de la virgule, dans la notation, mathématique.html#solutions-possibles",
    "href": "posts/maths/Contre, l'usage, abusif, de la virgule, dans la notation, mathématique.html#solutions-possibles",
    "title": "Contre, l’usage, abusif, de la virgule, dans la notation, mathématique",
    "section": "Solutions possibles",
    "text": "Solutions possibles\n\nSolution de la logique formelle\nEn logique formelle, quand on utilise les quantificateurs, on ne met jamais de virgules, ni pour les séparer, ni pour mettre plusieurs variables à la fois. Par exemple, on ne noterait pas \\(\\forall x, y \\in \\mathbb{R}, \\exists z \\in \\mathbb{R}, z = x+y\\), mais plutôt \\(\\forall x \\in \\mathbb{R} \\left( \\forall y \\in \\mathbb{R} \\left( \\exists z \\in \\mathbb{R} \\left( z = x+y \\right) \\right) \\right)\\)\nLa solution consiste donc à : - ne jamais mettre deux variables ensemble (utiliser plusieurs quantificateurs, un par variable) - on peut aussi écrire \\((x, y) \\in \\mathbb{R}^{2}\\) (on a en fait qu’une seule variable : le vecteur \\((x, y)\\) ) - mettre des parenthèses plutôt que des virgules (élimine toutes les ambiguïtés)\n\n\nUtiliser de meilleurs symboles\nLa solution proposée par la logique formelle est plutôt lourde (longue à écrire et moins lisible).\nOn peut, plus simplement, utiliser des symboles spécialisés pour chacune des significations\n\nLe \\(;\\) est un meilleur symbole pour séparer les éléments d’un vecteur\n\nDans les langues où c’est la virgule qui est l’indicateur pour les nombres décimaux, on préfère le ” \\(;\\) ” dans les vecteurs\n\nPour “tel que”, on préfère ” \\(\\mid\\) “,” \\(/\\) ” ou bien quelquefois ” \\(:\\) ”\n\nExemple : \\(\\forall x \\in \\mathbb{R}, \\exists y \\in \\mathbb{R} \\mid y = x+1\\) ou bien \\(\\lbrace x \\in \\mathbb{R} : \\cos(x) = 0 \\rbrace\\)\n\nPour décrire que plusieurs variables sont dans un ensemble, on utilise \\((x, y) \\in \\mathbb{R}^{2}\\) ou bien \\((x, y, z) \\in \\mathbb{R}^{3}\\) etc.\n\nOn peut d’ailleurs utiliser le \\(;\\) pour séparer les éléments : \\((x;y;z)\\in \\mathbb{R}^{3}\\)\n\n\nCes remplacements ont plusieurs avantages : - ils retirent toute ambiguïté, même celles qui n’en sont pas, mais qui sont des erreurs de lecture - ils sont plus lisibles : avoir un symbole pour chaque signification permet au cerveau de comprendre et d’utiliser plus facilement ces symboles et de mieux les associer à leur signification\nIls ont cependant un problème : ils obligent parfois à être plus formel, et donc à écrire plus de choses. Par exemple, \\(\\left\\lbrace \\frac{a}{b} \\mid a, b \\in \\mathbb{Z}, b \\neq 0  \\right\\rbrace\\) est plus lisible que \\(\\left\\lbrace \\frac{a}{b} \\mid (a;b)\\in \\mathbb{Z}\\times \\mathbb{Z}^{\\ast}  \\right\\rbrace\\), ou bien \\(\\left\\lbrace \\frac{a}{b}\\mid (a;b)\\in\\mathbb{Z}^{2} \\wedge b\\neq 0  \\right\\rbrace\\) ou encore \\(\\left\\lbrace \\frac{a}{b} \\mid a \\in \\mathbb{Z} \\wedge b \\in \\mathbb{Z}^{\\ast}  \\right\\rbrace\\) (bien sûr, les 4 ont la même signification, et sont donc tous aussi simples, mais il faut moins d’efforts au cerveau pour comprendre les valeurs possibles de \\(a\\) et \\(b\\) dans le premier cas, car la notation donne sans détour les informations que l’on recherche).\nIl semble donc que, dans certains cas, c’est au contraire l’utilisation de notation plus abrégée, par exemple avec des virgules, qui est plus lisible.\n\n\nExemples\nVoici quelques exemples d’expressions écrites en utilisant plus ou moins de virgules\n\n\n\n\n\n\n\n\nmaximum de virgules\nintermédiaire\nminimum de virgules\n\n\n\n\n\\(\\forall x, y \\in \\mathbb{R}, \\exists a, b \\in \\mathbb{R}, x+y = a+b, x\\neq a, y \\neq b\\)\n\\(\\forall (x, y) \\in \\mathbb{R}^{2}, \\exists (a, b) \\in \\mathbb{R}^{2}, x+y = a+b \\wedge x\\neq a \\wedge y \\neq b\\)\n\\(\\forall (x;y)\\in\\mathbb{R}^{2}, \\exists (a;b)\\in\\mathbb{R}^{2}, x+y=a+b \\wedge x\\neq a \\wedge y \\neq b\\)\n\n\n\\(\\left\\lbrace q,a,b\\in\\mathbb{Z}, b \\neq 0, q=\\frac{a}{b} \\right\\rbrace\\)\n\\(\\left\\lbrace q \\mid a \\in \\mathbb{Z}, b \\in \\mathbb{Z}^{\\ast}, q = \\frac{a}{b} \\right\\rbrace\\)\n\\(\\left\\lbrace q \\mid (a; b) \\in \\mathbb{Z}^{2} \\wedge b \\neq 0 \\wedge q = \\frac{a}{b} \\right\\rbrace\\) ou bien \\(\\left\\lbrace q \\mid (a; b) \\in \\mathbb{Z} \\times \\mathbb{Z}^{\\ast} \\wedge q = \\frac{a}{b} \\right\\rbrace\\)\n\n\n\\(\\{ \\overrightarrow{MN},M,N \\in F \\}\\)\n\\(\\{ \\overrightarrow{MN} \\mid M, N \\in F \\}\\)\n\\(\\{ \\overrightarrow{MN} \\mid (M, N) \\in F^{2} \\}\\)\n\n\n\n\n\nQuand utiliser quoi ?\nNous avons vu que, dans certains cas, la virgule est plus lisible car elle abrège les notations, et nous évite des réflexions inutiles sur le sens qu’apporte un symbole donné.\nMon avis personnel est donc :\n\nDans un contexte où il est nécessaire d’être précis (articles, cours, énoncés, définitions…), utiliser des symboles adaptés pour chaque signification\n\nnotamment, le fait de ne pas utiliser de raccourcis de notation apporte un formalisme supplémentaire\n\nDans un contexte où le but est simplement de faire comprendre (solution ou correction d’un exercice, cours et énoncés simples de choses connues ou évidentes), utiliser des virgules (et autres abréviations) peut être avantageux\n\ncela allège la rédaction et rend donc la lecture et la compréhension plus rapides\ncela permet d’écrire plus vite (notamment utile lorsqu’on résout un exercice) J’ajouterai que, avant d’utiliser des notations raccourcies, il est nécessaire de bien comprendre comment les notations formelles fonctionnent. Pour cela, écrire sans aucune abréviation (de manière rigoureuse) est utile. Il vaut mieux s’habituer d’abord à une utilisation stricte, puis utiliser des raccourcis quand c’est justifié (ceci ne se limite pas aux raccourcis de notation traités ici, mais est valable pour toutes les abréviations, comme \\(2\\mathbb{N}\\) pour \\(\\{ 2n \\mid n \\in \\mathbb{N} \\}\\), ou bien \\(\\sum\\limits_{i}v_{i}\\) pour \\(\\sum\\limits_{i=0}^n v_{i} \\text{ où } n \\text{ est la dimension du vecteur } v\\))"
  },
  {
    "objectID": "posts/maths/Contre, l'usage, abusif, de la virgule, dans la notation, mathématique.html#conclusion",
    "href": "posts/maths/Contre, l'usage, abusif, de la virgule, dans la notation, mathématique.html#conclusion",
    "title": "Contre, l’usage, abusif, de la virgule, dans la notation, mathématique",
    "section": "Conclusion",
    "text": "Conclusion\nL’utilisation de la virgule dans la notation mathématique peut parfois conduire, sinon à des ambiguïtés, à des erreurs de lectures ou d’interprétation. Elles vont aussi rendre la compréhension de certaines expressions plus difficile.\nLes alternatives disponibles sont meilleures, car elles facilitent la compréhension et l’écriture des mathématiques.\nEt en plus c’est beaucoup plus joli !"
  },
  {
    "objectID": "posts/maths/combinaisons_avec_repetitions.html",
    "href": "posts/maths/combinaisons_avec_repetitions.html",
    "title": "combinaisons avec répétitions",
    "section": "",
    "text": "Définition\n\n\n\n\\(K _{n}^{k} = \\dbinom{n+k-1}{k}\\)\nOn note \\(K{n}^{k}\\) les combinaisons avec répétitions dans \\(n\\) de \\(k\\).\nC’est le nombre de sacs à \\(k\\) éléments inclus dans un ensemble à \\(n\\) éléments - on utilise des sacs car on autorise la répétition mais que l’ordre n’est pas important\n\n\n\n\n\n\n\n\nAutres notations\n\n\n\n\n\nLes combinaisons avec répétitions sont aussi notées \\(\\Gamma _{n}^{k}\\).\nUne notation que j’apprécie particulièrement est \\(\\begin{pmatrix}\\begin{pmatrix}k\\\\n\\end{pmatrix}\\end{pmatrix}\\), car c’est une notion similaire aux combinaisons, mais avec des sacs plutôt que des ensembles (et que les sacs sont notés avec des doubles accolades : \\(\\{\\!\\!\\{ a, a, a, b, \\dots \\}\\!\\!\\}\\))\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nDéfinition\n\\(K_{n}^{k}\\) est le nombre de sacs de cardinal \\(k\\) distincts dont le support est inclus dans un ensemble de cardinal \\(n\\)\n\n\n\n\nFormule\nOn peut représenter un sac (ou multi-ensemble) par une liste de points cercles par des barres.\nPar exemple, le sac \\(\\{\\!\\!\\{ a; a; c; c; c; d \\}\\!\\!\\}\\) avec des éléments pris dans \\(\\{ a; b; c; d \\}\\) est représenté comme \\(\\bigcirc \\bigcirc \\mid \\; \\mid \\bigcirc \\bigcirc \\bigcirc \\mid \\bigcirc\\) (avec un espace vide, car il n’y à aucun \\(b\\)).\nSi on part d’un ensemble avec \\(n\\) éléments, et qu’on forme des sacs de taille \\(k\\). Dans la liste équivalente, on sait alors qu’il y aura \\(k + n - 1\\) emplacements : \\(k\\) cercles \\(+\\) \\(n - 1\\) barres. Alors, le nombre de sacs que l’on peut former ainsi correspond au nombres de façon de placer les \\(k\\) cercles parmi les \\(k + n - 1\\) emplacements, soit \\(\\dbinom{k+n-1}{k}\\).\nOr, on sait que le nombre de sacs à \\(k\\) éléments pris dans un ensemble à \\(n\\) éléments est justement \\(K _{n}^{k}\\) (Voir définition). Donc, on a démontré la formule :\n\\(\\boxed{K _{n}^{k} = \\dbinom{n + k - 1}{k}}\\)"
  },
  {
    "objectID": "posts/maths/probabilites TD1.html",
    "href": "posts/maths/probabilites TD1.html",
    "title": "Correction du TD 1 de probabilités (combinatoire)",
    "section": "",
    "text": "Un ascenseur dessert les 12 étages d’un immeuble. Au rez-de-chaussée, l’ascenseur est vide et 10 personnes y entrent. On suppose que personne ne monte dans l’ascenseur aux différents étages atteints. Déterminer de combien de façons les 10 personnes qui ont pris cet ascenseur peuvent s’être réparties entre les étages."
  },
  {
    "objectID": "posts/maths/probabilites TD1.html#un-chiffre-apparaissant-4-fois-les-autres-1-fois",
    "href": "posts/maths/probabilites TD1.html#un-chiffre-apparaissant-4-fois-les-autres-1-fois",
    "title": "Correction du TD 1 de probabilités (combinatoire)",
    "section": "5) un chiffre apparaissant 4 fois, les autres 1 fois",
    "text": "5) un chiffre apparaissant 4 fois, les autres 1 fois"
  },
  {
    "objectID": "posts/maths/probabilites TD1.html#chiffres-formant-une-suite-strictement-croissante",
    "href": "posts/maths/probabilites TD1.html#chiffres-formant-une-suite-strictement-croissante",
    "title": "Correction du TD 1 de probabilités (combinatoire)",
    "section": "6) 8 chiffres formant une suite strictement croissante",
    "text": "6) 8 chiffres formant une suite strictement croissante\nPour former une suite strictement croissante de 8 chiffres, il faut prendre la suite \\((0, 1, 2, 3, 4, 5, 6, 7, 9)\\), et sélectionner 8 chiffres dans cette liste (l’ordre étant forcément croissant, on a pas besoin de considérer l’ordre).\nDonc, il y à \\(\\dbinom{10}{8}=45\\) possibilités"
  },
  {
    "objectID": "posts/maths/probabilites TD1.html#chiffres-formant-une-suite-croissante",
    "href": "posts/maths/probabilites TD1.html#chiffres-formant-une-suite-croissante",
    "title": "Correction du TD 1 de probabilités (combinatoire)",
    "section": "7) 8 chiffres formant une suite croissante",
    "text": "7) 8 chiffres formant une suite croissante\nPour former une suite croissante (non strictement) de 8 chiffres, il faut considérer que l’on peut répéter le même élément. A nouveau, l’ordre est fixé, donc on ne le compte pas.\nDonc, il y à \\(K_{10}^{8} = \\begin{pmatrix}\\!\\!\\dbinom{10}{8}\\!\\!\\end{pmatrix} = \\dbinom{10}{3} = 120\\)"
  },
  {
    "objectID": "posts/maths/>>mathematiques.html",
    "href": "posts/maths/>>mathematiques.html",
    "title": "Mathématiques",
    "section": "",
    "text": "Posts par catégories\n\n\n\n\n\n\n\n\nformulaire (liste de formules de base)\n\n\n\n\n\nsacs (ensembles avec répétition)\n\n\n\n\n\\(A_{n}^{k}\\) arrangements\n\\(A_{n}^{k}\\) arrangements avec répétitions\n\\(\\displaystyle \\binom{k}{n}\\) combinaisons\n\\(\\Gamma _{n}^{k}\\) combinaisons avec répétitions"
  },
  {
    "objectID": "posts/maths/>>mathematiques.html#combinatoire",
    "href": "posts/maths/>>mathematiques.html#combinatoire",
    "title": "Mathématiques",
    "section": "",
    "text": "\\(A_{n}^{k}\\) arrangements\n\\(A_{n}^{k}\\) arrangements avec répétitions\n\\(\\displaystyle \\binom{k}{n}\\) combinaisons\n\\(\\Gamma _{n}^{k}\\) combinaisons avec répétitions"
  },
  {
    "objectID": "posts/welcome/Pourquoi ce blog.html",
    "href": "posts/welcome/Pourquoi ce blog.html",
    "title": "Pourquoi ce blog ?",
    "section": "",
    "text": "Ce blog me permettra de partager des explications sur certains sujets, et des idées personnelles.\n\nDes explications sur divers concepts de mathématiques ou d’informatique (pour aider les gens que je connais)\nDes réflexions que je souhaite partager\nN’importe quoi que j’ai découvert et que je trouve intéressant\n\n\nLe nom du blog\nLe Blog s’appelle OSK42, à la fois en référence au nombre 42, la réponse à la “grande question sur la vie, l’univers et le reste”, et car OSK42 est une écriture de OSKAR (mon pseudo) en leet speak"
  },
  {
    "objectID": "posts/informatique/python convertir une liste en table markdown.html",
    "href": "posts/informatique/python convertir une liste en table markdown.html",
    "title": "convertir des listes python en tables markdown",
    "section": "",
    "text": "La syntaxe markdown est très pratique, car elle est légère, lisible, et qu’elle peut être facilement exportée dans de nombreux autre formats (notamment via pandoc).\nCertains dialectes du markdown (des flavours) intègrent la possibilité de faire des tableaux. Cela permet donc d’intégrer des données dans un document.\nCe script vous permet de transformer des listes python en tables markdown, pour intégrer les résultats d’un calcul dans un document markdown :\ndef make_markdown_table(table, alignement: str =None):\n    \"\"\"\n    Args:\n        table: La table python à convertir en table markdown.\n               Elle doit être une liste de listes (rectangulaire).\n        alignement: L'alignement des cesllules ('gauche', 'centre' ou 'droite').\n    \"\"\"\n    # transformer tous les éléments en str\n    table = [[str(elt) for elt in line] for line in table]\n    # récupérer la largeur de chaque colonne\n    widths = [max(len(line[i]) for line in table) for i in range(len(table[0]))]\n    # faire que la largeur de chaque colonne soit au moins 3\n    widths = [max(w, 3) for w in widths]\n    # centrer le texte dans les colonnes\n    table = [[elt.center(w) for elt, w in zip(line, widths)] for line in table]\n\n    # séparer les titres et le contenu\n    liste_titres, *liste_contenu = table\n\n    # formatter les titres\n    titres = '| ' + ' | '.join(liste_titres) + ' |'\n\n    # mettre l'alignement des cellules\n    alignement = str(alignement).lower()\n    if alignement == 'none':\n        # on modifie uniquement la position des \":\"\n        # par défaut il n'y en a aucun\n        bord_gauche =  '| '\n        bord_centre = ' | '\n        bord_droite = ' |'\n    elif alignement == 'centre':\n        bord_gauche =  '|:'\n        bord_centre = ':|:'\n        bord_droite = ':|'\n    elif alignement == 'gauche':\n        bord_gauche =  '|:'\n        bord_centre = ' |:'\n        bord_droite = ' |'\n    elif alignement == 'droite':\n        bord_gauche =  '| '\n        bord_centre = ':| '\n        bord_droite = ':|'\n    else:\n        raise ValueError(\"l'alignement doit être 'gauche', 'centre' ou 'droite'.\")\n    # la ligne de séparation entre les titres et le contenu\n    separateur = bord_gauche + bord_centre.join(['-'*w for w in widths]) + bord_droite\n\n    # le contenu de la table\n    contenu = [None] * len(liste_contenu)  # liste vide qui sera remplie ensuite\n    for idx, ligne in enumerate(liste_contenu):\n        # pour chaque ligne, on modifie le contenu au bon indice\n        contenu[idx] = '| ' + ' | '.join(ligne) + ' |'\n    contenu = '\\n'.join(contenu)  # on regroupe les lignes\n\n    return titres + '\\n' + separateur + '\\n' + contenu"
  },
  {
    "objectID": "posts/informatique/python convertir une liste en table markdown.html#exemples",
    "href": "posts/informatique/python convertir une liste en table markdown.html#exemples",
    "title": "convertir des listes python en tables markdown",
    "section": "Exemples",
    "text": "Exemples\n\nfrom math import pi\n\nT = [[\"colonne\", \"colonne 2\", \"colonne avec un nom super long\"],\n     [1, 42, \"contenu\"],\n     [\"super\", \"cool\", 73],\n     [\"contenu assez long\", pi, \"valeur\"]]\n\nprint(make_markdown_table(T))\n\nprint(\"\\nAlignée à gauche\")\nprint(make_markdown_table(T, alignement='gauche'))\n\nprint(\"\\nAlignée au centre\")\nprint(make_markdown_table(T, alignement='centre'))\n\nprint(\"\\nAlignée à droite\")\nprint(make_markdown_table(T, alignement='droite'))\n\n|      colonne       |     colonne 2     | colonne avec un nom super long |\n| ------------------ | ----------------- | ------------------------------ |\n|         1          |         42        |            contenu             |\n|       super        |        cool       |               73               |\n| contenu assez long | 3.141592653589793 |             valeur             |\n\nAlignée à gauche\n|      colonne       |     colonne 2     | colonne avec un nom super long |\n|:------------------ |:----------------- |:------------------------------ |\n|         1          |         42        |            contenu             |\n|       super        |        cool       |               73               |\n| contenu assez long | 3.141592653589793 |             valeur             |\n\nAlignée au centre\n|      colonne       |     colonne 2     | colonne avec un nom super long |\n|:------------------:|:-----------------:|:------------------------------:|\n|         1          |         42        |            contenu             |\n|       super        |        cool       |               73               |\n| contenu assez long | 3.141592653589793 |             valeur             |\n\nAlignée à droite\n|      colonne       |     colonne 2     | colonne avec un nom super long |\n| ------------------:| -----------------:| ------------------------------:|\n|         1          |         42        |            contenu             |\n|       super        |        cool       |               73               |\n| contenu assez long | 3.141592653589793 |             valeur             |"
  },
  {
    "objectID": "posts/informatique/Le langage APL.html",
    "href": "posts/informatique/Le langage APL.html",
    "title": "Le langage APL",
    "section": "",
    "text": "APL est mon langage de programmation préféré, parce qu’il est assez mathématique, très agréable à utiliser, et qu’il change vraiment votre façon d’approcher les problèmes (comme Alan Perlis l’a dit : “A language that doesn’t affect the way you think about programming, is not worth knowing.”). Ce langage à apporté beaucoup de concepts en programmation qui sont très intéressants. Notamment, son créateur, Kenneth Iverson, à obtenu le prix Turing en 1979, pour ses travaux sur la notation mathématique, qui ont mené a la création du langage APL, pour l’utilisation éducative d’APL, et pour sa recherche sur la théorie et la pratique des langages.\nAPL signifie “A Programming Language”, et il à été créé en 1962 (ou un peu plus tard selon comment on compte), c’est-à-dire avant le C, et 4 ans après le LISP. Pourtant, même les premières versions intègrent des concepts qui sont toujours novateurs et très intéressants (et, bien sûr, de nombreux dialectes et dérivés ont émergés depuis).\nLa plupart des langages ou librairies qui manipulent des tableaux généralisés sont très inspirés par APL (on les appelle parfois des “Iverson ghosts”), notamment numpy (on retrouve par exemple iota dans beaucoup de langages, pour générer les nombres de 1 à n).\nLes principaux avantages d’APL sont :\n\nle paradigme “programmation array”\n\nles opérations sont généralisées le plus possible sur les tableaux (donc faire une addition de tableaux est comme faire une addition de nombres)\n\nla programmation avec des primitives\n\ncela permet de combiner des fonctions de façon très riche, et assez facilement\nc’est une façon de penser que j’adore : on a beaucoup moins de travail de traduction pour l’ordinateur à faire : pas de boucles, rarement des conditions explicites, et plutôt des opération que l’on applique de différentes manières sur des listes ou tableaux\n\nEncore une fois, commme Alan Perlis l’a dit : “A programming language is low level when its programs require attention to the irrelevant.”\n\n\nL’utilisation de symboles\n\nchaque primitive est représentée par un symbole, ce qui évite d’avoir du code illisible comme quand on utilise numpy\n\nLes Dfns\n\nAPL permet de définir des fonction anonymes assez puissantes\nelles incluent la possibilité de faire de la récursion anonyme, ce qui est incroyable\n\nLa concision\n\nAPL est très concis (par exemple, voici le code pour le jeu de la vie : life ← {⊃1 ⍵ ∨.∧ 3 4 = +/ +/ ¯1 0 1 ∘.⊖ ¯1 0 1 ⌽¨ ⊂⍵})\n\nla facilité d’apprentissage\n\ncomme les primitives sont assez simples à apprendre, et pourtant très riches, on arrive rapidement à faire beaucoup de choses\nil n’y a qu’un nombre assez petit de primitives, plus quelques variables et fonctions système\n\nla notation comme outils pour la pensée\n\nIverson à notamment créé un concept (et écrit un papier pour l’expliciter en APL) : “Notation as a tool of thought” (https://www.eecg.utoronto.ca/~jzhu/csc326/readings/iverson.pdf)\nCela inclut notamment des “design patterns for a programming language” :\n\nEase of expressing constructs arising in problems.\n\nprimitives plutôt que boucles ou concepts bas niveau\nsymboles pour les écrire facilement\n\nSuggestivity\n\ncomme “serendipity”, le fait de permettre la découverte de nouvelles choses en les suggérant\nles symboles et les façons riches de les combiner permettent des manipulations symboliques qui font que l’on découvre de nouvelles façons d’exprimer la même chose assez facilement\ncela fait que golfer un code APL (le rendre le plus court possible) revient souvent à le simplifier (contrairement à beaucoup d’autres langages où il est très facile de trop golfer, et que tout devienne illisible).\n\nAbility to subordinate detail\n\nne surtout pas confondre avec “ability to hide detail” : les fonctions font cela dans tous les langages\nplutôt que de cacher les détails dans une fonction à un autre endroit, il est plus pratique de mettre les détails à un endroit du programme où on les voit mais où on comprends qu’ils sont subordonnés\nLa syntaxe APL (qui fonctionne de droite à gauche) permet de faire cela très facilement\npar exemple, le calcul de la moyenne d’une liste est +/÷≢. Il est plus pratique d’intégrer ce morceau de code directement dans notre code plus grand, plutôt que de définir une fonction mean ou average, qu’il faudra de toute façon consulter pour connaître les détails de son fonctionnement\n\nEconomy\n\nles primitives sont représentées par un seul symbole, et les symboles sont même souvent polysémiques selon leur nombre d’arguments\npar exemple, ⌈ est le plafond quand ses arguments sont seulement à droite, et le maximum de ses deux arguments quand l’un est à droite, l’autre à gauche (ce qui fait que la réduction par ⌈, notée ⌈/ donne le maximum d’une liste)\n\nAmenability to formal proofs\n\naujourd’hui, on je cherche plus nécessairement à avoir des programmes dont on démontre formellement qu’ils fonctionnent (on utilise plutôt une approche empirique, avec des tests), mais le fait qu’APL soit proche de la notation mathématique fait que les démonstrations se font assez bien.\n\n\n\n\nDe nombreux dialectes d’APL sont apparus depuis sa création, notamment le J, qui n’utilise que des symboles ASCII (mais parfois deux symboles pour une seule primitive), et qui à apporté les combinateurs (des fonctions qui combine des fonctions de façon assez riches) et les trains (ce qui permet d’écrire la moyenne littéralement comme “somme divisée par longueur” : +/ ÷ ≢). Plus récemment, le BQN est apparu, qui est plus fonctionnel, et qui apporte des primitives différentes, ainsi que des symboles parfois un peu mieux choisis.\nAPL est vraiment un langage très particulier, la quasi totalité des gens qui l’apprennent adorent programmer avec, car il est très agréable à utiliser, mais il faut vraiment sortir de la façon “habituelle” de coder : il faut accepter que les symboles sont plus lisibles que des noms, que faire une longue ligne est plus lisible que de séparer le code en fonctions etc…\n\n\n\n\n\n\nIntroduction au langage APL\n\n\n\nJ’ai filmé 4 vidéos qui présentent quelques bases du langage APL sur un exemple simple : comment calculer des triplets pythagoriciens.\nVoir a playlist complète\n\nVidéo 1\nVidéo 2\nVidéo 3\nVidéo 4"
  },
  {
    "objectID": "posts/informatique/>>informatique.html",
    "href": "posts/informatique/>>informatique.html",
    "title": "Informatique",
    "section": "",
    "text": "Posts par catégories\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\ntransformer des listes python en tables markdown\n\nAPL (A Programming Language)\n\n\n\n\n\nbtop : voir les processus en cours\nVim\n\nla touche leader\nautocorriger les erreurs d’orthographe\n\n\n\n\n\n\n\n\nAlgorithmique avancée\n\nActivités (TD/TP)\n\nactivité 1\nactivité 3\n\nContrôles\n\ncontrôle 1"
  },
  {
    "objectID": "posts/informatique/>>informatique.html#outils",
    "href": "posts/informatique/>>informatique.html#outils",
    "title": "Informatique",
    "section": "",
    "text": "python\n\ntransformer des listes python en tables markdown\n\nAPL (A Programming Language)\n\n\n\n\n\nbtop : voir les processus en cours\nVim\n\nla touche leader\nautocorriger les erreurs d’orthographe"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee correction controle 1.html",
    "href": "posts/informatique/algo_avancee/algo avancee correction controle 1.html",
    "title": "algo avancee correction controle",
    "section": "",
    "text": "Implémentation d’une liste chaînée\n\n\n\n\n\n\nclass Node:\n    def __init__ (self, value, next=None):\n        self.valeur = value\n        self.suivant = next\n\n    def __str__ (self):\n        return f\"({', '.join(map(str, self.to_list()))})\"\n\n    def to_list(self) -&gt; list:\n        if self.suivant is None:\n            return [self.valeur]\n        return [self.valeur] + self.suivant.to_list()"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee correction controle 1.html#genalea",
    "href": "posts/informatique/algo_avancee/algo avancee correction controle 1.html#genalea",
    "title": "algo avancee correction controle",
    "section": "1. genAlea",
    "text": "1. genAlea\n\nfrom random import randint\n\ndef genAlea(nb_val: int) -&gt; Node:\n    \"\"\"Retourner une liste chaînée de nbVal entiers aléatoires entre 1 et 100.\n    Args:\n        nb_val (int): Le nombre d'entiers à générer\n    Returns:\n        Node: La liste de nb_val\n    \"\"\"\n    res = None\n    for _ in range(nb_val):\n        res = Node(randint(1, 100), res)\n    return res\n\nprint(\"12 nombres aléatoires :\", genAlea(12))\n\n12 nombres aléatoires : (8, 83, 83, 59, 93, 1, 3, 69, 51, 57, 74, 97)"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee correction controle 1.html#comptesup",
    "href": "posts/informatique/algo_avancee/algo avancee correction controle 1.html#comptesup",
    "title": "algo avancee correction controle",
    "section": "2. compteSup",
    "text": "2. compteSup\n\ndef compteSup(L: Node, seuil) -&gt; int:\n    \"\"\"Retourne le nombre de valeurs de L strictement supérieures à seuil.\n    Args:\n        L (Node): La liste chaînée.\n        seuil (comparable): La valeur de seuil (on compte les valeurs strictement supérieures au seuil).\n    Returns:\n        int: Le nombre de valeurs strictement supérieurs au seuil.\n    \"\"\"\n    nb_vals_sup = 0\n    while L is not None:\n        if L.valeur &gt; seuil:\n            nb_vals_sup += 1\n        L = L.suivant\n    return nb_vals_sup\n\nL = Node(3, Node(1, Node(4, Node(1, Node(5, Node(9, Node(2)))))))\nseuil = 4\nprint(L, \"contient\", compteSup(L, seuil), \"valeurs strictement supérieures à\", seuil)\n\n(3, 1, 4, 1, 5, 9, 2) contient 2 valeurs strictement supérieures à 4"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee correction controle 1.html#dansintervalle-récursivement",
    "href": "posts/informatique/algo_avancee/algo avancee correction controle 1.html#dansintervalle-récursivement",
    "title": "algo avancee correction controle",
    "section": "3. dansIntervalle récursivement",
    "text": "3. dansIntervalle récursivement\n\ndef dansIntervalle(L: Node, a, b) -&gt; Node:\n    \"\"\"Créer une nouvelle liste à partir de L en ne gardant que les éléments dans l'intervalle [a, b].\n    Args:\n        L (Node): La liste chaînée de départ.\n        a (comparable): Le minimum de l'intervalle\n        b (comparable): Le maximum de l'intervalle\n    Returns:\n        Node: Une nouvelle liste pour laquelle on a gardé seulement les élément qui sont dans l'intervalle [a, b].\n    \"\"\"\n    if a &gt; b:\n        raise ValueError(\"a doit être inférieur ou égal à b.\")\n    ##### ajouter/enlever un # devant la ligne suivante pour changer d'implémentation #####\n    if L is None: return None\n    if a &lt;= L.valeur &lt;= b:\n        # on garde le node actuel\n        return Node(L.valeur, dansIntervalle(L.suivant, a, b))\n    return dansIntervalle(L.suivant, a, b)\n\nL = Node(3, Node(1, Node(4, Node(1, Node(5, Node(9, Node(2, Node(6, Node(5, Node(3, Node(5, Node(8, Node(9, Node(7, Node(9, Node(3, Node(2, Node(3))))))))))))))))))\nprint(dansIntervalle(L, 2, 4))\n\n(3, 4, 2, 3, 3, 2, 3)"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee correction controle 1.html#dansintervalle-avec-un-itérateur-fonctionnel",
    "href": "posts/informatique/algo_avancee/algo avancee correction controle 1.html#dansintervalle-avec-un-itérateur-fonctionnel",
    "title": "algo avancee correction controle",
    "section": "4. dansIntervalle avec un itérateur fonctionnel",
    "text": "4. dansIntervalle avec un itérateur fonctionnel"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee correction controle 1.html#implémentation-de-lfilter",
    "href": "posts/informatique/algo_avancee/algo avancee correction controle 1.html#implémentation-de-lfilter",
    "title": "algo avancee correction controle",
    "section": "Implémentation de Lfilter",
    "text": "Implémentation de Lfilter\n\ndef Lfilter(L : Node, f):\n    \"\"\"Filtrer les valeurs de L selon le prédicat f.\n    On garde seulement les valeurs de les pour lesquelles\n    f(valeur) == True.\n    Args:\n        L (Node): La liste de départ.\n        f (fonction): Le prédicat (fonction qui renvoie True\n                      ou False).\n    Returns:\n        Node: La nouvelle liste contenant seulement les\n              valeurs de L pour lesquelles f(valeur) == True\n              (on conserve l'ordre).\n    \"\"\"\n    if L is None:\n        return None\n    p = L\n    while p is not None and not f(p.valeur):\n        p = p.suivant\n    if p is None:\n        return None\n\n    res = Node(p.valeur)\n    w = res\n    while p.suivant is not None:\n        p = p.suivant\n        if f(p.valeur):\n            w.suivant = Node(p.valeur)\n            w = w.suivant\n    return res"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee correction controle 1.html#genrandom",
    "href": "posts/informatique/algo_avancee/algo avancee correction controle 1.html#genrandom",
    "title": "algo avancee correction controle",
    "section": "1. genRandom",
    "text": "1. genRandom\n\ndef genRandom(nbVal: int) -&gt; Node:\n    \"\"\"Créer une liste de nbVal nombres aléatoires entre 0 et 20\n    Args:\n        nbVal (int): Le nombre de nombres aléatoires à générer.\n    Returns:\n        Node: Une liste chaînée qui contient `nbVal` nombre\n              aléatoires entre 0 et 20.\n    \"\"\"\n    if nbVal &lt;= 0:\n        return None\n    return Node(randint(0, 20), genRandom(nbVal - 1))\n\nL = genRandom(10)\nprint(L)\n\n(15, 6, 1, 1, 5, 16, 8, 7, 11, 20)"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee correction controle 1.html#compteinf",
    "href": "posts/informatique/algo_avancee/algo avancee correction controle 1.html#compteinf",
    "title": "algo avancee correction controle",
    "section": "2. compteInf",
    "text": "2. compteInf\n\ndef compteInf(L: Node, seuil) -&gt; int:\n    \"\"\"Compter le nombre de valeurs strictement inférieures à `seuil` dans L.\n    Args:\n        L (Node): La liste dans laquelle on compte.\n        seuil: La valeur utilisée pour les comparaisons.\n    Returns:\n        int: Le nombre de valeurs dans `L` qui sont\n             strictement inférieures à `seuil`.\n    \"\"\"\n    res = 0\n    while L is not None:\n        if L.valeur &lt; seuil:\n            res += 1\n        L = L.suivant\n    return res\n\nprint(compteInf(L, 10))\n\n6"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee correction controle 1.html#horsintervalle-récursivement",
    "href": "posts/informatique/algo_avancee/algo avancee correction controle 1.html#horsintervalle-récursivement",
    "title": "algo avancee correction controle",
    "section": "3. horsIntervalle récursivement",
    "text": "3. horsIntervalle récursivement\n\ndef horsIntervalle(L: Node, a, b) -&gt; Node:\n    \"\"\"Retirer les éléments de L qui sont dans [a, b].\n    Args:\n        L (Node): La liste que l'on veut filtrer.\n        a: La valeur minimale de l'intervalle exclue.\n        b: La valeur maximale de l'intervalle exclue.\n    Returns:\n        Node: Une nouvelle liste qui est L sans les élément\n              de L qui sont compris entre a et b inclus.\n    \"\"\"\n    if a &gt; b or L is None:\n        return None\n    # Si la valeur dépasse en dessous de a ou au dessus de b\n    if L.valeur &lt; a or L.valeur &gt; b :\n        # on garde la valeur dan la nouvelle liste\n        return Node(L.valeur, horsIntervalle(L.suivant, a, b))\n    # sinon on no garde pas la valeur\n    return horsIntervalle(L.suivant, a, b)\n\nprint(horsIntervalle(L, 5, 10))\n\n(15, 1, 1, 16, 11, 20)"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee correction controle 1.html#horsintervallefonc-avec-un-itérateur-fonctionnel",
    "href": "posts/informatique/algo_avancee/algo avancee correction controle 1.html#horsintervallefonc-avec-un-itérateur-fonctionnel",
    "title": "algo avancee correction controle",
    "section": "4. horsIntervalleFonc avec un itérateur fonctionnel",
    "text": "4. horsIntervalleFonc avec un itérateur fonctionnel\n\ndef horsIntervalleFonc(L: Node, a, b) -&gt; Node:\n    \"\"\"Retirer les éléments de L qui sont dans [a, b].\n    Args:\n        L (Node): La liste que l'on veut filtrer.\n        a: La valeur minimale de l'intervalle exclue.\n        b: La valeur maximale de l'intervalle exclue.\n    Returns:\n        Node: Une nouvelle liste qui est L sans les élément\n              de L qui sont compris entre a et b inclus.\n    \"\"\"\n    if a &gt; b:\n        raise ValueError(\"a doit être inférieur ou égal à b.\")\n    return Lfilter(L, lambda x: x &lt; a or x &gt; b)\n\nprint(horsIntervalleFonc(L, 5, 10))\n\n(15, 1, 1, 16, 11, 20)"
  },
  {
    "objectID": "posts/informatique/algo_avancee/>>informatique.html",
    "href": "posts/informatique/algo_avancee/>>informatique.html",
    "title": "Informatique",
    "section": "",
    "text": "Posts par catégories\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\ntransformer des listes python en tables markdown\n\nAPL (A Programming Language)\n\n\n\n\n\nbtop : voir les processus en cours\nVim\n\nla touche leader\nautocorriger les erreurs d’orthographe\n\n\n\n\n\n\n\n\nAlgorithmique avancée\n\nActivités (TD/TP)\n\nactivité 1\nactivité 3\n\nContrôles\n\ncontrôle 1"
  },
  {
    "objectID": "posts/informatique/algo_avancee/>>informatique.html#outils",
    "href": "posts/informatique/algo_avancee/>>informatique.html#outils",
    "title": "Informatique",
    "section": "",
    "text": "python\n\ntransformer des listes python en tables markdown\n\nAPL (A Programming Language)\n\n\n\n\n\nbtop : voir les processus en cours\nVim\n\nla touche leader\nautocorriger les erreurs d’orthographe"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 4.html",
    "href": "posts/informatique/algo_avancee/algo avancee activite 4.html",
    "title": "algo avancee activite 4",
    "section": "",
    "text": "Implémentation d’une liste chaînée\n\n\n\n\n\n\nclass Node:\n    def __init__ (self, valeur, suivant=None):\n        self.valeur = valeur\n        self.suivant = suivant\n\n    def __str__ (self):\n        return f\"({', '.join(map(str, self.to_list()))})\"\n\n    def to_list(self) -&gt; list:\n        if self.suivant is None:\n            return [self.valeur]\n        return [self.valeur] + self.suivant.to_list()"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 4.html#section",
    "href": "posts/informatique/algo_avancee/algo avancee activite 4.html#section",
    "title": "algo avancee activite 4",
    "section": "1.",
    "text": "1.\n\nEcrire une fonction itérative plusGrands(L, seuil) qui retourne tous les nombres de L dont la valeur est au moins égale au seuil.\n\n\ndef plusGrands(L: Node, seuil: int or float) -&gt; Node:\n    liste_plus_grands = Node(None)\n    tail = liste_plus_grands\n    while L is not None:\n        if L.valeur &gt; seuil:\n            tail.suivant = Node(L.valeur)\n            tail = tail.suivant\n        L = L.suivant\n    # ne pas oublier de retirer le premier élément\n    return liste_plus_grands.suivant\n\nL = Node(6, Node(42, Node(73, Node(28, Node(3)))))\n# print(plusGrands(L, 40))"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 4.html#section-1",
    "href": "posts/informatique/algo_avancee/algo avancee activite 4.html#section-1",
    "title": "algo avancee activite 4",
    "section": "2.",
    "text": "2.\n\nDonner mantenant une solution utilisant une fonctionelle filter. Cette fonctionnelle permet de conerver les éléments d’une liste vérifiant un prdivat passé en argument."
  },
  {
    "objectID": "posts/>>reflexions.html",
    "href": "posts/>>reflexions.html",
    "title": "Réflexions personnelles",
    "section": "",
    "text": "Les posts de la catégorie réflexion sont des posts contenant des réflexions, des opinions ou des idées sur divers sujets. Ils consistent souvent en une opinion personnelle.\n\nListe des posts\n\n\n\n\n\n\n\n   \n     \n     \n       Trier par\n       Ordre par défaut\n         \n          Titre\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitre\n\n\ndescription\n\n\n\n\n\n\nEt si tout le monde saute d’un pont, tu le fais aussi ?\n\n\nComment répondre aux gens énervants qui utilisent cette phrase.\n\n\n\n\nLe dimanche, il pleut généralement à l’extérieur\n\n\n\n\n\n\n\n\nAucun article correspondant"
  },
  {
    "objectID": "posts/informatique/vim tips autocorriger les erreurs.html",
    "href": "posts/informatique/vim tips autocorriger les erreurs.html",
    "title": "vim tips autocorriger les erreurs",
    "section": "",
    "text": "Cet article est une traduction\n\n\n\nCet article est une traduction des deux articles suivants\nhttps://nanotipsforvim.prose.sh/autofix-misspellings\nhttps://castel.dev/post/lecture-notes-1/\n\n\nVim possède un correcteur d’orthographe intégré, que l’on peut activer avec set spell. On peut ensuite changer la langue avec set spelllang=fr (ici pour passer en français).\nPour corriger une erreur, on peut utiliser z= sur un mot : cela affiche une liste des remplacements possibles. Pour se déplacer d’erreur en erreur, on utilise ]s (erreur suivante), et [s (erreur suivante).\nCela donne quelque chose comme ça :\n\n\n\nexemple de corrections d’orthographe avec vim\n\n\nC’est assez long, parce que pour chaque mot, il faut faire : z=1 puis appuyer sur entrée.\n\nMeilleur raccourci pour remplacer\nOn peut aussi faire 1z= : cela sélectionne directement la première correction dans la liste. Mais 1z= est plutôt long à taper.\nUne première solution est de créer un raccourci pour 1z=, comme za, par exemple.\nnnoremap za 1z=\nCela permet d’accélérer un peu :\n\n\n\nexemple de corrections d’orthographe avec vim\n\n\n\n\nRemplacer depuis le mode insertion\nLorsque l’on rédige des textes avec vim, on est plus souvent en mode insertion (à l’opposé, on est surtout en mode normal quand on édite du code).\nCela rend encore plus long le fait de corriger une faute de frappe, puisqu’il faut aller en mode normal, et revenir en mode insertion ensuite\nPour fluidifier ce mode d’édition (surtout si, comme moi, vous tapez vite mais avec peu de précision), on peut créer un raccourci qui, depuis le mode insertion, va corriger la dernière erreur, et revenir en mode insertion.\nCela donne quelque chose comme ça (le curseur est à droite, en mode insertion) :\n\nPersonnellement, j’utilise &lt;c-q&gt;, mais &lt;c-l&gt; peut être utilisé également, ou n’importe quel raccourci qui vous convient.\nLe raccourci à ajouter est :\ninoremap &lt;c-q&gt; &lt;c-g&gt;u&lt;esc&gt;[s1z=`]a&lt;c-g&gt;u\n\nles &lt;c-g&gt;u permettent d’annuler rapidement les remplacements\nle `] permet de remettre le curseur à la position de départ\n\n\n\n\n\n\n\nExplication détaillée du raccourci\n\n\n\n\n\n\n&lt;c-g&gt;u permet d’annuler le remplacement appart\n\nsinon, il sera considéré comme une partie de l’édition en cours\n\n&lt;esc&gt; va en mode normal\n[s va à la dernière erreur avant le curseur\n1z= remplace l’erreur par la première correction disponible\n`] revient à la dernière position du curseur (au dernier caractère modifié)\na revient en mode insertion\n&lt;c-g&gt;u fait à nouveau en sorte que l’annulation du remplacement soit faîte appart\n\nsinon, il sera considéré comme une partie de l’édition future"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html",
    "title": "Algorithmique avancée - activité 1",
    "section": "",
    "text": "Correction détaillée de l’activité 1 d’algorithmique avancée."
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html#temps-dexécution-de-la-première-méthode-de-génération",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html#temps-dexécution-de-la-première-méthode-de-génération",
    "title": "Algorithmique avancée - activité 1",
    "section": "Temps d’exécution de la première méthode de génération",
    "text": "Temps d’exécution de la première méthode de génération\nVoici donc le code :\n\nfrom time import time\n\n# liste des nombres d'éléments dans la liste que l'on veut tester\n# on peut aussi utiliser range(10, 10000, 10) par exemple\nLIST_NUMBER_OF_ELEMENTS = [10, 100, 1000, 10000]\n\nfor number_of_elements in LIST_NUMBER_OF_ELEMENTS:\n    # on stocke le moment de début de la génération\n    start = time()\n\n    # on génère des nombres aléatoires\n    foo = generation(number_of_elements, 42, 73)\n\n    # on stocke le moment de fin de la génération\n    end = time()\n\n    # la durée d'exécution est la différence entre le moment de début et de fin\n    # Attention : si on inverse end et start, on obtient un nombre négatif\n    duration = end - start\n\n    # on arrondi la durée, pour que le tout soit plus lisible\n    duration = round(duration, 5)\n\n    # affichage du résultat\n    print(f\"générer {number_of_elements} à mis {duration} secondes\")\n\ngénérer 10 à mis 1e-05 secondes\ngénérer 100 à mis 5e-05 secondes\ngénérer 1000 à mis 0.00044 secondes\ngénérer 10000 à mis 0.00466 secondes"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html#temps-dexécution-avec-des-list-comprehension",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html#temps-dexécution-avec-des-list-comprehension",
    "title": "Algorithmique avancée - activité 1",
    "section": "Temps d’exécution avec des list comprehension",
    "text": "Temps d’exécution avec des list comprehension\nOn utilise exactement le même code, mais avec la fonction generation_comprehension au lieu de generation :\n\nLIST_NUMBER_OF_ELEMENTS = [10, 100, 1000, 10000]\n\nfor number_of_elements in LIST_NUMBER_OF_ELEMENTS:\n    start = time()\n    foo = generation_comprehension(number_of_elements, 42, 73)\n    end = time()\n\n    duration = end - start\n    duration = round(duration, 5)\n    print(f\"générer {number_of_elements} à mis {duration} secondes\")\n\ngénérer 10 à mis 2e-05 secondes\ngénérer 100 à mis 5e-05 secondes\ngénérer 1000 à mis 0.00044 secondes\ngénérer 10000 à mis 0.00434 secondes\n\n\nOn remarque que le code avec des list comprehension est effectivement plus rapide."
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html#pour-aller-plus-loin",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html#pour-aller-plus-loin",
    "title": "Algorithmique avancée - activité 1",
    "section": "Pour aller plus loin",
    "text": "Pour aller plus loin\n\n\n\n\n\n\nPour aller plus loin\n\n\n\n\n\nOn peut, par exemple, définir une fonction qui mesure le temps d’exécution d’une autre fonction.\nPour cela, il faut que cette nouvelle fonction (appelons-la temps_execution), prenne en argument la fonction dont on mesure le temps d’exécution.\nOn obtient donc quelque chose comme ça :\n\ndef temps_execution(fonction_a_tester, number_of_elements: int) -&gt; float:\n    # ici, on mesure le temps d'exécution\n    start = time()\n    foo = fonction_a_tester(number_of_elements, 42, 73)\n    end = time()\n    # l'idéal est de retourner le temps d'exécution plutôt\n    # que de mettre un print à l'intérieur d'une fonction\n    # (ce qui est à # éviter en général)\n    return end - start\n\nprint(temps_execution(generation,               1000))\nprint(temps_execution(generation_comprehension, 1000))\n\n0.00047397613525390625\n0.0004737377166748047"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html#avec-une-boucle-et-une-nouvelle-liste",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html#avec-une-boucle-et-une-nouvelle-liste",
    "title": "Algorithmique avancée - activité 1",
    "section": "Avec une boucle et une nouvelle liste",
    "text": "Avec une boucle et une nouvelle liste\nOn peut utiliser une approche classique : créer la nouvelle liste au fur-et-à-mesure, en parcourant la liste de départ.\n\nAvec une condition sur les indices\n\ndef un_sur_n_indices(n: int, liste: list) -&gt; list:\n    \"\"\"Sélectionne un élément sur `n` dans `liste`\"\"\"\n    new_list = []\n    for i in range(len(liste)):\n        # si i est divisible par n (une fois sur n)\n        if 0 == i % n:\n            # on ajoute l'élément à l'indice actuel dans la\n            # nouvelle liste\n            new_list.append(liste[i])\n    return new_list\n\nprint(un_sur_n_indices(3, [2, 7, 1, 8, 2, 8, 1, 8]))\n\n[2, 8, 1]\n\n\n\n\nEn utilisant un pas sur range\nUne technique plus simple (et plus efficace) est, plutôt que de tester pour tous les indices, d’utiliser un range dans lequel on met un pas de n.\nCela permet de n’avoir dans la boucle que les indices qui nous intéressent.\n\ndef un_sur_n_range(n: int, liste: list) -&gt; list:\n    new_list = []\n    # on met un 0 pour que n soit bien le 3ème argument\n    for i in range(0, len(liste), n):\n        new_list.append(liste[i])\n    return new_list\n\nprint(un_sur_n_range(3, [2, 7, 1, 8, 2, 8, 1, 8]))\n\n[2, 8, 1]"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html#avec-une-list-comprehension",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html#avec-une-list-comprehension",
    "title": "Algorithmique avancée - activité 1",
    "section": "Avec une list comprehension",
    "text": "Avec une list comprehension\nPour être encore plus efficace, on peut simplement utiliser un list comprehension, en conjonction avec les techniques citées plus haut.\nLe code est en fait équivalent, mais permet de créer la liste de façon plus efficace.\n\nAvec une condition sur les indices\n\ndef un_sur_n_comprehension_indices(n: int, liste: list) -&gt; list:\n    return [liste[i] for i in range(len(liste)) if 0 == i%n]\n\nprint(un_sur_n_comprehension_indices(3, [2, 7, 1, 8, 2, 8, 1, 8]))\n\n[2, 8, 1]\n\n\n\n\n\n\n\n\nRetours à la ligne pour plus de clarté\n\n\n\n\n\nPour rendre le code plus clair, on peut mettre un retour à la ligne avant le for et le if :\n\ndef un_sur_n_comprehension_indices(n: int, liste: list) -&gt; list:\n    return [liste[i]\n            for i in range(len(liste))\n            if 0 == i%n]\n\nCela est très utile quand on construit des expressions complexes, par exemple avec des list comprehension à l’intérieur de list comprehension.\n\n\n\n\n\nEn utilisant un pas sur range\nOn peut à nouveau utiliser un pas sur le range pour ne pas avoir à tester toutes les itérations.\n\ndef un_sur_n_comprehension_range(n: int, liste: list) -&gt; list:\n    return [liste[i] for i in range(0, len(liste), n)]\n\nprint(un_sur_n_comprehension_range(3, [2, 7, 1, 8, 2, 8, 1, 8]))\n\n[2, 8, 1]"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html#en-parcourant-les-indices-des-deux-tableaux",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html#en-parcourant-les-indices-des-deux-tableaux",
    "title": "Algorithmique avancée - activité 1",
    "section": "En parcourant les indices des deux tableaux",
    "text": "En parcourant les indices des deux tableaux\nL’approche classique est de parcourir les indices i des deux tableaux (que l’on suppose de même taille), et de calculer le maximum pour chaque indice, que l’on mettra dans une nouvelle liste.\n\ndef max_des_2_indices(tab1: list[int], tab2: list[int]) -&gt; list[int]:\n    new_list: list[int] = []\n    # on parcoure les indices des deux tableaux en même\n    # temps avec i\n    for i in range(len(tab1)):\n        # la fonction max calcul le maximum de ses arguments\n        # ici, les arguments sont les valeurs des deux\n        # tableaux pour un même indice i\n        new_list.append(max(tab1[i], tab2[i]))\n    return new_list\n\nprint(max_des_2_indices([1, 4, 5], [2, 2, 3]))\n\n[2, 4, 5]"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html#en-utilisant-la-fonction-zip",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html#en-utilisant-la-fonction-zip",
    "title": "Algorithmique avancée - activité 1",
    "section": "En utilisant la fonction zip",
    "text": "En utilisant la fonction zip\nLa fonction zip va permettre de regrouper les éléments exactement comme on le souhaite. En effet, si on essaie de l’appliquer :\n\nz = zip([3, 1, 4, 1, 5, 9, 2, 6], [2, 7, 1, 8, 2, 8, 1, 8])\nprint(list(z))  # on utilise list pour que le contenu soit bien affiché\n\n[(3, 2), (1, 7), (4, 1), (1, 8), (5, 2), (9, 8), (2, 1), (6, 8)]\n\n\nOn observe que le résultat contient les paires d’éléments dont on veut faire le maximum : les deux premiers de chaque tableau, plus les deux deuxièmes, les deux troisièmes etc…\nOn peut alors proposer la solution suivante :\n\ndef max_des_2_zip(tab1: list[int], tab2: list[int]) -&gt; list[int]:\n    new_list: list[int] = []\n    for couple in zip(tab1, tab2):\n        # on note que la fonction `max` peut s'appliquer sur\n        # une liste d'élément (ici `couple`)\n        new_list.append(max(couple))\n    return new_list\n\nprint(max_des_2_zip([1, 4, 5], [2, 2, 3]))\n\n[2, 4, 5]"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html#avec-zip-et-map",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html#avec-zip-et-map",
    "title": "Algorithmique avancée - activité 1",
    "section": "Avec zip et map",
    "text": "Avec zip et map\nOn remarque dans cet exercice une structure que l’on a déjà vue dans les exercices suivants : on veut appliquer une fonction particulière sur chaque élément d’une liste, puis récupérer le résultat.\nL’approche classique consiste à parcourir la liste, et à créer au fur-et-à-mesure une nouvelle liste.\nCependant, une des fonctions de base de python, la fonction map, permet directement d’appliquer une fonction sur tous les éléments d’une liste, et de récupérer le résultat.\nOn peut donc tout simplement écrire :\n\ndef max_des_2_map(tab1: list[int], tab2: list[int]) -&gt; list[int]:\n    # on utilise list pour bien récupérer une liste\n    # on applique la fonction max sur le résultat du zip\n    return list(\n        map(max, zip(tab1, tab2))\n    )\n\nprint(max_des_2_map([1, 4, 5], [2, 2, 3]))\n\n[2, 4, 5]\n\n\nCette approche est une approche fonctionnelle du problème, puisque la solution est créée en composant des fonctions existantes (map, max, zip…) et sans structures de contrôles comme des boucles ou des conditions."
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html#en-parcourant-les-indices-des-deux-listes",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html#en-parcourant-les-indices-des-deux-listes",
    "title": "Algorithmique avancée - activité 1",
    "section": "En parcourant les indices des deux listes",
    "text": "En parcourant les indices des deux listes\n\ndef myzip_indices(tab1: list[int], tab2: list[int]) -&gt; list[int]:\n    zipped_list: list[int] = []\n    for idx in range(len(tab1)):\n        # on ajoute le couple (tab1[idx], tab2[idx]) à la\n        # liste de résultat. On a bien un couple d'éléments\n        # aux mêmes indices\n        zipped_list.append((tab1[idx], tab2[idx]))\n    return zipped_list\n\nprint(myzip_indices([1, 4, 5], [2, 2, 3]))\n\n[(1, 2), (4, 2), (5, 3)]"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html#si-les-deux-listes-ne-font-pas-la-même-taille",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html#si-les-deux-listes-ne-font-pas-la-même-taille",
    "title": "Algorithmique avancée - activité 1",
    "section": "Si les deux listes ne font pas la même taille",
    "text": "Si les deux listes ne font pas la même taille\nSi les deux listes ne font pas la même taille, il faut s’arrêter quand la première liste est arrivée au bout. On peut donc simplement parcourir les indices de 1 à min(len(tab1), len(tab2)).\n\ndef myzip_indices(tab1: list[int], tab2: list[int]) -&gt; list[int]:\n    zipped_list: list[int] = []\n    for idx in range(min(len(tab1), len(tab2))):\n        # on ajoute le couple (tab1[idx], tab2[idx]) à la\n        # liste de résultat. On a bien un couple d'éléments\n        # aux mêmes indices\n        zipped_list.append((tab1[idx], tab2[idx]))\n    return zipped_list\n\nprint(myzip_indices([1, 4, 5], [2, 2, 3, 99, 0]))\nprint(myzip_indices([1, 4, 5, 7, 13, 4], [2, 2, 3, 99]))\n\n[(1, 2), (4, 2), (5, 3)]\n[(1, 2), (4, 2), (5, 3), (7, 99)]"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html#avec-des-list-comprehension",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html#avec-des-list-comprehension",
    "title": "Algorithmique avancée - activité 1",
    "section": "Avec des list comprehension",
    "text": "Avec des list comprehension\n\ndef genMat(row: int, col: int, mini: int, maxi: int) -&gt; list[list[int]]:\n    \"\"\"Initialiser une matrice aléatoire de taille (row, col), avec des valeurs dans [mini, maxi].\n    \"\"\"\n    return [[randint(mini, maxi) for i in range(col)] for j in range(row)]\n\nprint(genMat(3, 3, 0, 10))\n\n[[5, 5, 7], [10, 6, 2], [4, 7, 1]]"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html#en-créant-la-liste-au-fur-et-à-mesure",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html#en-créant-la-liste-au-fur-et-à-mesure",
    "title": "Algorithmique avancée - activité 1",
    "section": "En créant la liste au fur-et-à-mesure",
    "text": "En créant la liste au fur-et-à-mesure\nLes list comprehension sont plus rapides, plus courtes et beaucoup plus simples à utiliser. Cet exemple est simplement là pour montrer d’autres techniques de programmation.\n\ndef genMat(row: int, col: int, mini: int, maxi: int) -&gt; list[list[int]]:\n    \"\"\"Initialiser une matrice aléatoire de taille (row, col), avec des valeurs dans [mini, maxi].\n    \"\"\"\n    mat = []\n    for i in range(row):\n        line = []\n        for j in range(col):\n            line.append(randint(mini, maxi))\n        mat.append(line)\n    return mat\n\n\nprint(genMat(3, 3, 0, 10))\n\n[[1, 1, 3], [10, 9, 2], [5, 9, 5]]"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html#avec-des-list-comprehension-1",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html#avec-des-list-comprehension-1",
    "title": "Algorithmique avancée - activité 1",
    "section": "Avec des list comprehension",
    "text": "Avec des list comprehension\n\ndef diagonale(mat: list[list[float]]) -&gt; list[float]:\n    \"\"\"Diagonale d'une matrice.\n    Args:\n        mat (list[list[float]]): Une matrice qui doit être carrée\n                                 (sinon la diagonale n'existe pas).\n    Returns:\n        list[float]: La liste des coefficients diagonaux de mat.\n    \"\"\"\n    return [mat[i][i] for i in range(len(mat))]\n\nprint(diagonale(M))\n\n[1, 0, 8]"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html#pour-aller-plus-loin-2",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html#pour-aller-plus-loin-2",
    "title": "Algorithmique avancée - activité 1",
    "section": "Pour aller plus loin",
    "text": "Pour aller plus loin\n\n\n\n\n\n\nLever une erreur si la matrice n’est pas carrée\n\n\n\n\n\nPour bien faire, il faudrait lever une erreur si la matrice n’est pas carrée. Pour cela, on utilise le mot clef raise, ainsi qu’une erreur classique de python. Ici, on utilisera ValueError (on pourrait également créer une classe d’erreurs nous-même, puisque les erreurs sont simplement des objets particuliers).\n\ndef diagonale(mat: list[list[float]]) -&gt; list[float]:\n    \"\"\"Diagonale d'une matrice.\n    Args:\n        mat (list[list[float]]): Une matrice qui doit être carrée\n                                 (sinon la diagonale n'existe pas).\n    Returns:\n        list[float]: La liste des coefficients diagonaux de mat.\n    Raises:\n        ValueError: Si la matrice donnêé en entrée n'est pas carrée.\n    \"\"\"\n    # si la matrice n'est pas carrée\n    if not all(len(mat) == len(ligne) for ligne in mat):\n        # on lève une exception.\n        raise ValueError(\"La matrice n'est pas carrée.\")\n    return [mat[i][i] for i in range(len(mat))]\n\nprint(diagonale(M))\n\n[1, 0, 8]"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html#avec-une-list-comprehension-et-la-fonction-sum",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html#avec-une-list-comprehension-et-la-fonction-sum",
    "title": "Algorithmique avancée - activité 1",
    "section": "Avec une list comprehension et la fonction sum",
    "text": "Avec une list comprehension et la fonction sum\n\ndef trace(mat: list[list[float]]) -&gt; float:\n    return sum([mat[i][i] for i in range(len(mat))])\n\nprint(trace(M))\n\n6"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html#en-réutilisant-la-fonction-diagonale",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html#en-réutilisant-la-fonction-diagonale",
    "title": "Algorithmique avancée - activité 1",
    "section": "En réutilisant la fonction diagonale",
    "text": "En réutilisant la fonction diagonale\nComme on a déjà programmé la fonction diagonale, on peut l’utiliser, car la trace d’une matrice est la somme de ses coefficients diagonaux.\n\ndef trace(mat: list[list[float]]) -&gt; float:\n    return sum(diagonale(mat))\n\nprint(trace(M))\n\n6\n\n\nCela rend le code moins redondant et plus clair. C’est l’intérêt d’utiliser des fonctions."
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html#avec-une-list-comprehension-1",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html#avec-une-list-comprehension-1",
    "title": "Algorithmique avancée - activité 1",
    "section": "Avec une list comprehension",
    "text": "Avec une list comprehension\n\ndef somme(mat1: list[list[float]], mat2: list[list[float]]) -&gt; list[list[float]]:\n    \"\"\"Somme de deux matrices que l'on suppose de même taille.\n    \"\"\"\n    # nombre de lignes et de colonnes de mat1 (on la prends comme référence)\n    rows = len(mat1)\n    cols = len(mat1[0])\n    return [[mat1[i][j] + mat2[i][j] for j in range(cols)] for i in range(rows)]\n\nprint(somme(A, B))\n\n[[0, 2, 2, 4], [1, 1, 3, 3], [2, 5, 6, 9]]"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html#avec-des-zip-et-des-map",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html#avec-des-zip-et-des-map",
    "title": "Algorithmique avancée - activité 1",
    "section": "Avec des zip et des map",
    "text": "Avec des zip et des map\nCette solution est plus complexe, mais elle peut avoir des avantages.\nPar exemple, si on retire les fonctions list du code, la fonction va retourner un objet map, qui est une structure paresseuse (“lazy”). Cela veut dire qu’un élément donné ne sera calculé que lorsque l’on en aura besoin (lorsque l’on parcourra la matrice, par exemple).\nCe mécanisme est utile si, quand une fonction est longue à calculer, vous ne voulez pas être obligé d’attendre que toutes les valeurs soient passées par cette fonction avant de pouvoir passer à l’étape suivante : la fonction ne sera exécutée que sur les valeurs nécessaires, au fur-et-à-mesure.\n\ndef somme(mat1: list[list[float]], mat2: list[list[float]]) -&gt; list[list[float]]:\n    \"\"\"Somme de deux matrices que l'on suppose de même taille.\n    \"\"\"\n    return list(map(lambda x: list(map(sum, zip(*x))), zip(mat1, mat2)))\n\nprint(somme(A, B))\n\n[[0, 2, 2, 4], [1, 1, 3, 3], [2, 5, 6, 9]]"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html#avec-des-list-comprehension-2",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html#avec-des-list-comprehension-2",
    "title": "Algorithmique avancée - activité 1",
    "section": "Avec des list comprehension",
    "text": "Avec des list comprehension\nEn utilisant presque directement la formule de définition du produit de matrices, on obtient cette fonction :\n\ndef produit(mat1: list[list[float]], mat2: list[list[float]]) -&gt; list[list[float]]:\n    \"\"\"Produit matriciel mat1 * mat2.\n    On suppose que les matrices sont de la bonne taille, c'est-à-dire que la largeur de mat1 est égale à la longueur de mat2.\n    \"\"\"\n    # largeur et hauteur de la matrice résultat\n    width = len(mat1)\n    height = len(mat2[0])\n    common_length = len(mat2)\n    # on applique la formule :\n    return [[sum(mat1[j][l] * mat2[l][i] for l in range(common_length)) for i in range(height)] for j in range(width)]\n\nprint(produit(A, B))\n\n[[2, 6, 5, 6], [9, 8, 8, 8], [22, 19, 9, 19], [0, 0, 0, 0]]"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html#avec-le-module-numpy",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html#avec-le-module-numpy",
    "title": "Algorithmique avancée - activité 1",
    "section": "Avec le module numpy",
    "text": "Avec le module numpy\nLe module numpy (qui n’est pas un module standard, il faudra donc l’installer avec pip3 --install numpy) possède des fonctions pour l’algèbre linéaire et pour les tableaux en général.\nUn objet matrix est implémenté, et il permet de faire des multiplications de matrices… Avec l’opérateur * ! (Attention : si on utilise l’objet array de numpy plutôt que l’objet matrix, la multiplication sera une multiplication élément-par-élément plutôt qu’une vraie multiplication matricielle).\n\nimport numpy as np\n\nmA = np.matrix(A)\nmB = np.matrix(B)\n\nprint(mA * mB)\n\n[[ 2  6  5  6]\n [ 9  8  8  8]\n [22 19  9 19]\n [ 0  0  0  0]]\n\n\nNote : Avec cette méthode, le résultat n’est pas une liste de listes, mais une matrice."
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html#récursion-simple",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html#récursion-simple",
    "title": "Algorithmique avancée - activité 1",
    "section": "Récursion simple",
    "text": "Récursion simple\nOn va simplement utiliser cette propriété : n divise m si et seulement si n divise m - n : \\(\\forall (m, n) \\in \\mathbb{Z}^{2}, \\quad n \\mid n \\iff n \\mid m-n\\)\nOn utilise aussi le fait que n divise m si et seulement si la valeur absolue de n divise la valeur absolue de m.\n\ndef estDivisible(n: int, m: int) -&gt; bool:\n    if m == 0:\n        return True\n    if m &lt; 0:\n        return False\n    return estDivisible(abs(n), abs(m) - abs(n))\n\nprint(estDivisible(3, 6))    # True\nprint(estDivisible(-3, 12))  # True\nprint(estDivisible(-3, 11))  # False\n\nTrue\nTrue\nFalse"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html#récursion-classique",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html#récursion-classique",
    "title": "Algorithmique avancée - activité 1",
    "section": "Récursion classique",
    "text": "Récursion classique\n\ndef longueur(n: int) -&gt; int:\n    n = abs(n)\n    if n &lt; 10:\n        return 1\n    return 1 + longueur(n / 10)\n\nprint(longueur(314159265358))\nprint(longueur(73))\nprint(longueur(1732))\n\n12\n2\n4"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html#récursion-terminale",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html#récursion-terminale",
    "title": "Algorithmique avancée - activité 1",
    "section": "Récursion terminale",
    "text": "Récursion terminale\n\n\n\n\n\n\nDétails sur la récursion terminale\n\n\n\n\n\nLa récursion terminale est un récursion dans laquelle la dernière opération est l’appel récursif. Cela veut dire que le return qui contient l’appel récursif ne contient pas d’autre opération.\nPar exemple, la définition précédente de longueur n’est pas terminale, car on doit ajouter 1 après l’appel récursif (la ligne de l’appel récursif est return 1 + longueur(n / 10)).\nLa récursion terminale à plusieurs avantages :\n\ndans certains langages, elle est optimisée (l’optimisation de pile d’appel) et rend l’exécution plus rapide et moins coûteuse en mémoire\nElle peut être très facilement convertie en une boucle (la variable de boucle est l’accumulateur de la récursion terminale)\n\nDans certains livres, comme SICP, on voit que la récursion terminale est appelée “itérative”\n\n\n\n\n\nIci, on a aussi optimisé le programme en travaillant uniquement sur des entiers, ce qui permet d’éviter des calculs de division de flottants, qui sont inutiles.\n\ndef longueur(n: int, acc: int =0) -&gt; int:\n    n = int(abs(n))\n    if n &lt; 10:\n        return acc + 1\n    return longueur(n // 10, acc + 1)\n\nprint(longueur(314159265358))\nprint(longueur(73))\nprint(longueur(1732))\n\n12\n2\n4"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html#récursion-classique-1",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html#récursion-classique-1",
    "title": "Algorithmique avancée - activité 1",
    "section": "Récursion classique",
    "text": "Récursion classique\n\ndef combienInf4(n: int) -&gt; int:\n    # si le dernier chiffre de n est un 4\n    if n % 10 &lt; 4:\n        # si n est un chiffre\n        if n &lt; 10:\n            # le résultat est 1\n            return 1\n        # on ajoute 1 à la récursion car n finit par 4\n        return 1 + combienInf4(n // 10)\n    # si n ne finit pas par 4 :\n    # si n est un chiffre\n    if n &lt; 10:\n        # aucun 4 dans n\n        return 0\n    # on ajoute rien à la récursion car n ne finit pas par 4\n    return combienInf4(n // 10)\n\nprint(combienInf4(123456))\nprint(combienInf4(314159265358))\nprint(combienInf4(789456))\n\n3\n5\n0"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html#avec-des-conversions-de-types",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html#avec-des-conversions-de-types",
    "title": "Algorithmique avancée - activité 1",
    "section": "Avec des conversions de types",
    "text": "Avec des conversions de types\nPour rendre le code plus simple (et plus lisible pour un programmeur averti), on utilise le fait que la fonction int puisse convertir des booléens en entiers.\n\ndef combienInf4(n: int) -&gt; int:\n    if n &lt; 10:\n        # (n &lt; 4) est un booléen\n        # int(True) vaut 1, et int(False) vaut 0\n        return int(n &lt; 4)\n    # on ajoute 1 à la récursion si le dernier chiffre de n est 4\n    return int(n % 10 &lt; 4) + combienInf4(n // 10)\n\nprint(combienInf4(123456))\nprint(combienInf4(314159265358))\nprint(combienInf4(789456))\n\n3\n5\n0"
  },
  {
    "objectID": "posts/informatique/algo_avancee/algo avancee activite 1.html#récursion-terminale-1",
    "href": "posts/informatique/algo_avancee/algo avancee activite 1.html#récursion-terminale-1",
    "title": "Algorithmique avancée - activité 1",
    "section": "Récursion terminale",
    "text": "Récursion terminale\n\ndef combienInf4(n: int, acc: int =0) -&gt; int:\n    if n &lt; 10:\n        return int(n &lt; 4) + acc\n    return combienInf4(n // 10, acc + int(n % 10 &lt; 4))\n\n\nprint(combienInf4(123456))\nprint(combienInf4(314159265358))\nprint(combienInf4(789456))\n\n3\n5\n0"
  },
  {
    "objectID": "posts/informatique/terminal btop.html",
    "href": "posts/informatique/terminal btop.html",
    "title": "terminal - btop : statistiques des processus",
    "section": "",
    "text": "btop est un utilitaire pour visualiser les processus actifs sur votre ordinateur, et les statistiques comme la quantité d’entrée/sortie en mémoire ou réseau.\nDépôt github de btop : aristocratos/btop"
  },
  {
    "objectID": "posts/informatique/terminal btop.html#htop",
    "href": "posts/informatique/terminal btop.html#htop",
    "title": "terminal - btop : statistiques des processus",
    "section": "htop",
    "text": "htop\nUn autre utilitaire très connu est htop, qui est une version plus jolie et utilisable de top, qui permet de chercher et filtrer les processus selon leur nom.\nhtop est beaucoup plus agréable à utiliser que top, avec des raccourcis plus intuitifs, des boutons cliquables (oui, c’est possible sur un terminal), et une interface plus agréable.\nVoici à quoi ressemble htop :"
  },
  {
    "objectID": "posts/informatique/terminal btop.html#btop",
    "href": "posts/informatique/terminal btop.html#btop",
    "title": "terminal - btop : statistiques des processus",
    "section": "btop",
    "text": "btop\nbtop est un autre utilitaire du même type, mais il a quelques avantages :\n\nil est plus intuitif\n\nles raccourcis clavier sont affichés\nle menu d’options est bien fait (plus simple à utiliser que celui de htop)\n\nil est plus joli\nil permet de voir plus de statistiques\n\n\nLes raccourcis claviers sont montrés par la lettre en rouge dans leur nom (comme m pour aller dans le menu), et chaque fenêtre peut être affichée/masquée en appuyant sur le chiffre qui lui correspond (de 1 à 4)."
  },
  {
    "objectID": "posts/informatique/vim tips leader.html",
    "href": "posts/informatique/vim tips leader.html",
    "title": "vim tips - leader",
    "section": "",
    "text": "Dans Vim, on peut changer les raccourcis pour absolument toutes les touches.\nJustement, un des raccourcis que l’on peut changer, c’est &lt;leader&gt;.\nQuand il s’agit de &lt;space&gt; (touche espace), &lt;tab&gt;, &lt;cr&gt; (carriage return, pour la touche entrée), on arrive à deviner. Mais pour &lt;leader&gt;, c’est plus difficile.\nEn fait, &lt;leader&gt; peut être n’importe quel raccourci que vous choisissez ! Quand vous créez un raccourci, &lt;leader&gt; sera remplacé par la valeur dans la variable g:mapleader.\nCela peut être intéressant :"
  },
  {
    "objectID": "posts/informatique/vim tips leader.html#changer-la-touche-assignée",
    "href": "posts/informatique/vim tips leader.html#changer-la-touche-assignée",
    "title": "vim tips - leader",
    "section": "Changer la touche assignée",
    "text": "Changer la touche assignée\nComme je l’ai dit plus haut, &lt;leader&gt; est défini par la variable g:mapleader\nPar exemple, si on souhaite utiliser la touche , pour leader :\nlet g:mapleader = \",\"\nSi on souhaite utiliser une touche qui est représentée entre &lt;...&gt;, comme la touche espace (&lt;space&gt;), il ne faut pas oublier le \\ avant le nom de la touche :\nlet g:mapleader = \"\\&lt;space&gt;\"\nSi vous oubliez le \\, il faudra taper toutes les touches : &lt;, s, p, a, c, e, &gt; pour déclancher &lt;leader&gt;"
  },
  {
    "objectID": "posts/informatique/vim tips leader.html#cas-dutilisation",
    "href": "posts/informatique/vim tips leader.html#cas-dutilisation",
    "title": "vim tips - leader",
    "section": "Cas d’utilisation",
    "text": "Cas d’utilisation\nUn des usages principaux de &lt;leader&gt; est comme préfixe (d’où le nom, leader, en anglais).\nPar préfixe, je veux dire une touche qui est au début de plein de raccourcis. C’est utile car Vim assigne déjà beaucoup de raccourcis, et donc ne laisse pas beaucoup de place pour que l’utilisateur définisse les siens. C’est pour cette raison que &lt;leader&gt; est utile : vous pouvez faire commencer plein de vos raccourcis par leader. Par exemple, j’ai défini les raccourcis &lt;leader&gt;j, &lt;leader&gt;k, &lt;leader&gt;m, &lt;leader&gt;ul…\n\nExemples d’utilisation\nVoici quelques exemples d’utilisation :\n\n&lt;leader&gt;m pour :make&lt;cr&gt;, si vous utilisez des makefiles\n&lt;leader&gt;k pour sauvegarder (c’est bizarre mais c’est ce que j’utilise)\n&lt;leader&gt;w ou bien &lt;leader&gt;q pour &lt;c-w&gt;, afin d’éviter la touche contrôle quand on manipule les fenêtres\n&lt;leader&gt;t pour :tabnew&lt;cr&gt; (créer un nouvel onglet)\n&lt;leader&gt;! pour :term ++curwin (ouvrir un terminal dans la fenêtre actuelle)\n\n     \n\nMon .vimrc est disponible ici : github.com/OsKaR31415/config avec le reste de ma configuration."
  },
  {
    "objectID": "posts/welcome/bienvenue sur mon blog.html",
    "href": "posts/welcome/bienvenue sur mon blog.html",
    "title": "Bienvenue sur mon blog",
    "section": "",
    "text": "J’ai enfin pris le temps de créer mon blog !\nIl est fait avec quarto, qui permet de générer des pages à partir de markdown, et avec des inclusions de code (style jupyter notebook) exécutées quand on recharge le blog.\nBien sûr, il y à aussi toutes les fonctionnalités de base du markdown (sections, références, \\(\\LaTeX\\)…) et quelques fonctionnalités supplémentaires intéressantes."
  },
  {
    "objectID": "posts/maths/arrangements avec répétitions.html",
    "href": "posts/maths/arrangements avec répétitions.html",
    "title": "arrangements avec répétitions",
    "section": "",
    "text": "Définition\n\n\n\n\\(\\mathcal{A}_{n}^{k} = n^{k}\\)\nLes arrangements avec répétitions dans \\(n\\) de \\(k\\) sont le nombre de \\(k\\)-uplets d’éléments d’un ensemble à \\(n\\) éléments.\nC’est donc le nombre de possibilités de mettre \\(n\\) types d’objets dans \\(k\\) emplacements.\n\n\n\nInterprétation\n\n\n\n\n\n\nExemples\n\n\n\n\n\nVoici quelques questions dont la réponse passe par un arrangement avec répétitions :\n\nle langage toki pona possède 120 mots. Combien peut-on faire de phrases de 5 mots en toki pona ?\n\n\\(\\mathcal{A}_{120}^{5} = 120^{5} = 24\\,883\\,200\\,000\\), soit ving-quatre milliards huit-cent quatre-vingt-trois millions deux-cent mille phrases différents\n\nCombien de codes PIN à 4 chiffres peut-on faire ?\n\nArrangements avec répétitions de 4 chiffres parmi les 10 existants, soit \\(\\mathcal{A}_{10}^{4} = 10^{4} = 10\\,000\\) codes possibles\n\nNote : cela veut dire que, avec un ordinateur actuel, craquer un code à 4 chiffres est instantané (donc si vous vous faîtes voler un ordinateur avec un tel code, il ne sera pas protégé)\n\n\n\n\n\n\n\n\nFormule\nOn peut mettre l’un des \\(n\\) objets dans les \\(k\\) positions :\n\n\\(n\\) possibilités dans la \\(1^{ère}\\) position\n\\(n\\) possibilités dans la \\(2^{ème}\\)\n\\(\\vdots\\)\n\\(n\\) possibilités dans la \\(k^{ème}\\) position\n\nDonc, en tout, \\(\\underbrace{n\\times n\\times \\cdots \\times n}_{k \\text{ répétitions}} = n^{k}\\)\nOn a donc bien : \\(\\mathcal{A}_{n}^{k} = n^{k}\\)"
  },
  {
    "objectID": "posts/maths/formulaire d'analyse.html",
    "href": "posts/maths/formulaire d'analyse.html",
    "title": "formulaire d’analyse",
    "section": "",
    "text": "Voici une liste des formules importantes en analyse"
  },
  {
    "objectID": "posts/maths/formulaire d'analyse.html#identités-remarquables",
    "href": "posts/maths/formulaire d'analyse.html#identités-remarquables",
    "title": "formulaire d’analyse",
    "section": "0.1 Identités remarquables",
    "text": "0.1 Identités remarquables\n\\((a + b)^{2} = a^{2} + 2ab + b^{2}\\)\n\\((a - b)^{2} = a^{2} - 2ab + b^{2}\\)\n\\((a + b)(a - b) = a^{2} - b^{2}\\)\n\\((a + b)^{3} = a^{3} + 3a^{2}b + 3ab^{2} + b^{3}\\)\n\\((a - b)^{3} = a^{3} - 3a^{2}b + 3ab^{2} - b^{3}\\)\n\\(a^{3} - b^{3} = (a - b)\\left( a^{2} + ab + b^{2} \\right)\\)\n\\(a^{3} + b^{3} = (a + b)\\left( a^{2} - ab + b^{2} \\right)\\)"
  },
  {
    "objectID": "posts/maths/formulaire d'analyse.html#suites-arithmétiques",
    "href": "posts/maths/formulaire d'analyse.html#suites-arithmétiques",
    "title": "formulaire d’analyse",
    "section": "1.1 Suites arithmétiques",
    "text": "1.1 Suites arithmétiques\nTermes de la suite (\\(r\\) désigne la raison):\n\\(u_{n+1} - u_{n} = r\\)\n\\(u_{n} = u_{0} + nr\\)\n\\(u_{n} = u_{p} + (n-p)r\\)\nSomme des termes :\n\\(\\displaystyle S_{n} = \\sum_{k=0}^{n}u_{k} = \\dfrac{(n+1)(u_{0}+u_{n})}{2}\\)\nCas général avec \\(n_{1} \\leq n_{2}\\) :\n\\(\\displaystyle S' = \\sum_{k = n_{1}}^{n_{2}}u_{k} = \\frac{(nombre\\ de\\ termes)(premier\\ terme + dernier\\ terme)}{2}\\)\nCas particulier :\n\\(\\displaystyle 1 + 2 + 3\\ \\cdots + (n - 1) + n = \\frac{n(n + 1)}{2}\\)"
  },
  {
    "objectID": "posts/maths/formulaire d'analyse.html#suites-géométriques",
    "href": "posts/maths/formulaire d'analyse.html#suites-géométriques",
    "title": "formulaire d’analyse",
    "section": "1.2 Suites géométriques",
    "text": "1.2 Suites géométriques\nOn suppose que la suite est non nulle. Termes de la suite ((q) désigne la raison) :\n\\(\\dfrac{u_{n+1}}{u_{n}} = q\\)\n\\(u_{n} = u_{0} \\times q^{n}\\)\n\\(u_{n} = u_{p}\\times q^{n-p}\\)\nSomme des termes :\n\\(S_{n} = \\sum\\limits_{k=0}^{n}u_{k}\\)\n\nSi \\(q \\neq 1\\) : \\(S_{n} = u_{0}\\times \\frac{1-q^{n+1}}{1-q}\\)\nSi \\(q=1\\) : \\(S_{n}=u_{0}(n+1)\\)\n\nCas général avec \\(n_{1} \\leq n_{2}\\) : \\(S'_{n} = \\sum\\limits_{k=0}^{n}u_{k}\\)\n\nSi \\(q \\neq 1\\) : \\(\\displaystyle S'_{n} = (\\text{premier terme}) \\times \\frac{1- \\left( q^{\\text{nombre de termes}} \\right)}{1-q}\\)\nSi \\(q \\neq 1\\) : \\(\\displaystyle S'_{n} = (\\text{premier terme}) \\times \\frac{1- q ^{(\\text{nombre de termes})}}{1-q} = u_0 \\times \\frac{1-q^{n+1}}{1-q}\\)\nSi \\(q = 1\\) : \\(S'_{n} = (\\text{nombre de termes}) \\times (\\text{premier terme})\\)"
  },
  {
    "objectID": "posts/maths/formulaire d'analyse.html#formules-générales",
    "href": "posts/maths/formulaire d'analyse.html#formules-générales",
    "title": "formulaire d’analyse",
    "section": "2.1 Formules générales",
    "text": "2.1 Formules générales\nDans ce qui suit, \\(u\\) et \\(v\\) désignent deus fonctions d’une variable réelle \\(x\\), et \\(k\\) une constante réelle.\n\\((u+v)' = u' + v'\\)\n\\((ku)' = ku'\\)\n\\((uv)' = u'v + uv'\\)\n\\(\\left( \\dfrac{u}{v} \\right)' = \\dfrac{u'v - uv'}{v^{2}}\\)\n\\((v\\circ u)' = u' \\times (v'\\circ u)\\)\n\\(\\displaystyle(u^{-1})' = \\dfrac{1}{u' \\circ u^{-1}}\\)"
  },
  {
    "objectID": "posts/maths/formulaire d'analyse.html#fonctions-usuelles",
    "href": "posts/maths/formulaire d'analyse.html#fonctions-usuelles",
    "title": "formulaire d’analyse",
    "section": "2.2 Fonctions usuelles",
    "text": "2.2 Fonctions usuelles\n\n2.2.1 fonctions non composées\n\n\n\n\n\n\n\n\n\nFonction \\(f\\)\n\\(\\mathscr{D}_{f}\\)\nFonction dérivée \\(f'\\)\n\\(\\mathscr{D}_{f'}\\)\n\n\n\n\n\\(k\\)\n\\(\\mathbb{R}\\)\n0\n\\(\\mathbb{R}\\)\n\n\n\\(x\\)\n\\(\\mathbb{R}\\)\n\\(1\\)\n\\(\\mathbb{R}\\)\n\n\n\\(\\dfrac{1}{x}\\)\n\\(\\mathbb{R}^{*}\\)\n\\(-\\dfrac{1}{x^{2}}\\)\n\\(\\mathbb{R}^{*}\\)\n\n\n\\(\\sqrt{ x }\\)\n\\(\\mathbb{R}^{+}\\)\n\\(\\frac{1}{2\\sqrt{ x }}\\)\n\\(\\mathbb{R}^{+*}\\)\n\n\n\\(x^{n}\\) avec \\(n \\in\\mathbb{Z}\\)\n\\(\\mathbb{R}\\)\n\\(nx^{n-1}\\)\n\\(\\mathbb{R} \\text{ si } n \\geq 0, \\quad \\mathbb{R}^{*} \\text{ si } n &lt; 0\\)\n\n\n\\(x^{\\alpha}\\) avec \\(\\alpha \\in\\mathbb{R}\\)\n\\(\\mathbb{R}^{+} \\text{ si } \\alpha \\geq 0, \\quad \\mathbb{R}^{+*} \\text{ si } \\alpha&lt;0\\)\n\\(\\alpha x^{\\alpha-1}\\)\n\\(\\mathbb{R} \\text{ si } n \\geq 0, \\quad \\mathbb{R}^{*} \\text{ si } \\alpha &lt; 1\\)\n\n\n\\(\\ln \\mid x \\mid\\)\n\\(\\mathbb{R}^{+*}\\)\n\\(\\dfrac{1}{x}\\)\n\\(\\mathbb{R}^{+*}\\)\n\n\n\\(\\exp x\\)\n\\(\\mathbb{R}\\)\n\\(\\exp x\\)\n\\(\\mathbb{R}\\)\n\n\n\\(\\sin x\\)\n\\(\\mathbb{R}\\)\n\\(\\cos x\\)\n\\(\\mathbb{R}\\)\n\n\n\\(\\cos x\\)\n\\(\\mathbb{R}\\)\n\\(-\\sin x\\)\n\\(\\mathbb{R}\\)\n\n\n\\(\\tan x\\)\n\\(\\mathbb{R} \\setminus \\left\\lbrace \\dfrac{\\pi}{2} + k\\pi \\right\\rbrace\\)\n\\(1+\\tan^2 x = \\dfrac{1}{\\cos^2 x}\\)\n\\(\\mathbb{R} \\setminus \\left\\lbrace \\dfrac{\\pi}{2} + k\\pi \\right\\rbrace\\)\n\n\n\\(\\mathrm{sh} x\\)\n\\(\\mathbb{R}\\)\n\\(\\mathrm{ch} x\\)\n\\(\\mathbb{R}\\)\n\n\n\\(\\mathrm{ch} x\\)\n\\(\\mathbb{R}\\)\n\\(\\mathrm{sh} x\\)\n\\(\\mathbb{R}\\)\n\n\n\\(\\mathrm{th} x\\)\n\\(\\mathbb{R}\\)\n\\(1-\\mathrm{th}^2 x = \\dfrac{1}{\\mathrm{ch}^2 x}\\)\n\\(\\mathbb{R}\\)\n\n\n\nLes dérivées des fonctions réciproques des fonctions trigonométriques et hyperboliques figurent dans la section “trigonométrie réciproque\n\n\n2.2.2 Fonctions composées\n\n\n\n\n\n\n\nforme de la fonction\nforme de la dérivée\n\n\n\n\n\\(\\dfrac{1}{u}\\)\n\\(-\\dfrac{u'}{u^2}\\)\n\n\n\\(\\sqrt{u}\\)\n\\(\\dfrac{u'}{2 \\sqrt{u}}\\)\n\n\n\\(u^{\\alpha}\\)\n\\(\\alpha u' u^{\\alpha - 1}\\)\n\n\n$u $\n\\(\\dfrac{u'}{u}\\)\n\n\n\\(\\exp u\\)\n\\(u' \\times \\exp u\\)\n\n\n\\(\\sin u\\)\n\\(u'\\times \\cos u\\)\n\n\n\\(\\cos u\\)\n\\(-u' \\times \\sin u\\)\n\n\n\\(\\tan u\\)\n\\(u' \\times (1+\\tan^2 u) = \\dfrac{u'}{\\cos^2 u}\\)\n\n\n\\(\\mathrm{sh} u\\)\n\\(u' \\times \\mathrm{ch} u\\)\n\n\n\\(\\mathrm{ch} u\\)\n\\(u' \\times \\mathrm{sh} u\\)\n\n\n\\(\\mathrm{th} u\\)\n\\(u' \\times (1-\\mathrm{th}^2 u) = \\dfrac{u'}{\\mathrm{ch}^2 u}\\)"
  },
  {
    "objectID": "posts/maths/formulaire d'analyse.html#fonctions-trigonométriques",
    "href": "posts/maths/formulaire d'analyse.html#fonctions-trigonométriques",
    "title": "formulaire d’analyse",
    "section": "3.1 Fonctions trigonométriques",
    "text": "3.1 Fonctions trigonométriques\n\\(\\cos^2 x + \\sin^2 x = 1\\)\n\\(\\cos(a+b) = \\cos a \\cos b - \\sin a \\sin b\\)\n\\(\\cos(a-b) = \\cos a \\cos b + \\sin a \\sin b\\)\n\\(\\sin(a+b) = \\sin a\\cos b + \\sin b \\cos a\\)\n\\(\\sin(a-b) = \\sin a \\cos b - \\sin b \\cos a\\)\n\\(\\tan(a+b) = \\dfrac{\\tan a + \\tan b}{1-\\tan a \\tan b}\\)\n\\(\\tan(a-b) = \\dfrac{\\tan a - \\tan b}{1+\\tan a \\tan b}\\)\n\\(\\cos a \\cos b = \\dfrac{1}{2} \\big( \\cos(a+b)+\\cos(a-b) \\big)\\)\n\\(\\sin a\\sin b = \\dfrac{1}{2} \\big( \\cos(a-b) - \\cos(a+b) \\big)\\)\n\\(\\sin a \\cos b = \\dfrac12 \\big( \\sin(a+b) + \\sin(a-b) \\big)\\)\n\\(\\cos a + \\cos b = 2\\cos \\dfrac{(a+b)}{2}\\cos\\dfrac{(a-b)}{2}\\)\n\\(\\cos a - \\cos b = -2\\sin\\dfrac{a+b}{2}\\sin\\dfrac{a-b}{2}\\)\n\\(\\sin a + \\sin b = 2\\sin\\dfrac{a+b}{2}\\cos\\dfrac{a-b}{2}\\)\n\\(\\sin a - \\sin b = 2\\sin\\dfrac{a-b}{2} \\cos\\dfrac{a+b}{2}\\)\n\\(\\cos(2x) =\\cos ^{2}x-\\sin ^{2}x \\quad= 2\\cos ^{2}x-1 \\quad= 1-2\\sin ^{2}x \\quad= \\frac{1-\\tan ^{2}x}{1+\\tan ^{2}x}\\)\n\\(\\cos^2 x = \\dfrac{1+\\cos(2x)}{2}\\)\n\\(\\sin^2 x = \\dfrac{1-\\cos(2x)}{2}\\)\n\\(\\tan^2 x = \\dfrac{1-\\cos(2x)}{1+\\cos(2x)}\\)\n\\(\\sin(2x) = 2\\sin x\\cos x \\quad= 1+\\tan ^{2}x\\)\n\\(\\tan(2x) = \\dfrac{2\\tan x}{1 - \\tan^2 x}\\)"
  },
  {
    "objectID": "posts/maths/formulaire d'analyse.html#fonctions-hyperboliques",
    "href": "posts/maths/formulaire d'analyse.html#fonctions-hyperboliques",
    "title": "formulaire d’analyse",
    "section": "3.2 Fonctions hyperboliques",
    "text": "3.2 Fonctions hyperboliques\n\\(\\mathrm{ch}^2 x - \\mathrm{sh}^2 x = 1\\)\n\\(\\mathrm{ch}(a+b) = \\mathrm{ch} (a) \\;\\mathrm{ch} (a) + \\mathrm{sh} a \\mathrm{sh} b\\)\n\\(\\mathrm{ch}(a-b) = \\mathrm{ch} (a)\\; \\mathrm{ch} (b) - \\mathrm{sh} a \\mathrm{sh} b\\)\n\\(\\mathrm{sh}(a+b) = \\mathrm{sh} (a)\\; \\mathrm{ch} (b) + \\mathrm{sh} (b)\\; \\mathrm{ch} (a)\\)\n\\(\\mathrm{sh}(a-b) = \\mathrm{sh} (a); \\mathrm{ch} (b) - \\mathrm{sh} (b) \\mathrm{ch} (a)\\)\n\\(\\mathrm{th}(a+b) = \\dfrac{\\mathrm{th} a + \\mathrm{th} b}{1 +  \\mathrm{th} (a) \\mathrm{th} (b)}\\)\n\\(\\mathrm{th}(a-b) = \\dfrac{\\mathrm{th} a - \\mathrm{th} b}{1 - \\mathrm{th} (a) \\mathrm{th} (b)}\\)\n\\(\\mathrm{ch} (a) \\;\\mathrm{ch} (b) = \\dfrac12 \\big( \\mathrm{ch}(a+b) + \\mathrm{ch}(a-b) \\big)\\)\n\\(\\mathrm{sh} (a)\\; \\mathrm{sh} (b) = \\dfrac12 \\big( \\mathrm{ch}(a+b) - \\mathrm{ch}(a-b) \\big)\\)\n\\(\\mathrm{sh} (a)\\; \\mathrm{ch} (b) = \\dfrac12 \\big( \\mathrm{sh}(a+b) + \\mathrm{sh}(a-b) \\big)\\)\n\\(\\mathrm{ch} (a) + \\mathrm{ch} (b) = 2\\mathrm{ch} \\dfrac{a+b}{2} \\mathrm{ch} \\dfrac{a-b}{2}\\)\n\\(\\mathrm{ch} (a) - \\mathrm{ch} (a) = 2\\mathrm{sh} \\dfrac{a+b}{2}\\mathrm{sh}\\dfrac{a-b}{2}\\)\n\\(\\mathrm{sh} (a) + \\mathrm{sh} (b) = 2\\mathrm{sh} \\dfrac{a+b}{2}\\mathrm{ch}\\dfrac{a-b}{2}\\)\n\\(\\mathrm{sh} (a) - \\mathrm{sh} (b) = 2\\mathrm{sh}\\dfrac{a-b}{2} \\mathrm{ch}\\dfrac{a+b}{2}\\)\n\\(\\mathrm{ch}(2x) = \\mathrm{ch} ^{2}x + \\mathrm{sh} ^{2}x \\quad= 2\\mathrm{ch} ^{2}x - 1 \\quad= 1+2\\mathrm{sh} ^{2}x \\quad=\\frac{1+\\mathrm{th} ^{2}x}{1-\\mathrm{th} ^{2}x}\\)\n\\(\\mathrm{ch}^2 x = \\dfrac{1+\\mathrm{ch}(2x)}{2}\\)\n\\(\\mathrm{sh}^2 x = \\dfrac{\\mathrm{ch}(2x) - 1}{2}\\)\n\\(\\mathrm{th}^2 x = \\dfrac{\\mathrm{ch}(2x) - 1}{\\mathrm{ch}(2x) + 1}\\)\n\\(\\mathrm{sh}(2x) = 2\\mathrm{sh}(x) \\mathrm{ch}(x) \\quad= \\frac{2\\mathrm{th}(x)}{1-\\mathrm{th}^{2}(x)}\\)\n\\(\\mathrm{th}(2x) = \\dfrac{2\\mathrm{th} x}{1+\\mathrm{th}^2 x}\\)"
  },
  {
    "objectID": "posts/maths/formulaire d'analyse.html#points-sur-le-cercle-trigonométrique",
    "href": "posts/maths/formulaire d'analyse.html#points-sur-le-cercle-trigonométrique",
    "title": "formulaire d’analyse",
    "section": "3.3 Points sur le cercle trigonométrique",
    "text": "3.3 Points sur le cercle trigonométrique\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\(-x\\)\n\\(\\frac{\\pi}{2}+x\\)\n\\(\\frac{\\pi}{2}-x\\)\n\\(\\pi+x\\)\n\\(\\pi-x\\)\n\\(0\\)\n\\(\\frac{\\pi}{6}\\)\n\\(\\frac{\\pi}{4}\\)\n\\(\\frac{\\pi}{3}\\)\n\\(\\frac{\\pi}{2}\\)\n\n\n\n\n\\(\\sin\\)\n\\(-\\sin x\\)\n\\(\\cos x\\)\n\\(\\cos x\\)\n\\(-\\sin x\\)\n\\(\\sin x\\)\n\\(0\\)\n\\(\\frac{1}{2}\\)\n\\(\\frac{\\sqrt{ 2 }}{2}\\)\n\\(\\frac{\\sqrt{ 3 }}{2}\\)\n1\n\n\n\\(\\cos\\)\n\\(\\cos x\\)\n\\(-\\sin x\\)\n\\(\\sin x\\)\n\\(-\\cos x\\)\n\\(-\\cos x\\)\n\\(1\\)\n\\(\\frac{\\sqrt{ 3 }}{2}\\)\n\\(\\frac{\\sqrt{ 2 }}{2}\\)\n\\(\\frac{1}{2}\\)\n0\n\n\n\\(\\tan\\)\n\\(-\\tan x\\)\n\\(-\\frac{1}{\\tan x}\\)\n\\(\\frac{1}{\\tan x}\\)\n\\(\\tan x\\)\n\\(-\\tan x\\)\n\\(0\\)\n\\(\\frac{\\sqrt{ 3 }}{2}\\)\n\\(1\\)\n\\(\\sqrt{ 3 }\\)"
  },
  {
    "objectID": "posts/maths/formulaire d'analyse.html#trigonométrie-réciproque",
    "href": "posts/maths/formulaire d'analyse.html#trigonométrie-réciproque",
    "title": "formulaire d’analyse",
    "section": "3.4 Trigonométrie réciproque",
    "text": "3.4 Trigonométrie réciproque\n\\(\\arcsin x + \\arccos x = \\dfrac{\\pi}{2}\\)\n\\(\\arctan x + \\arctan \\dfrac{1}{x} = \\text{sg}(x) \\times \\dfrac{\\pi}{2}\\) avec \\(\\mathrm{sg}(x) = 1 \\text{ si } x&gt;0\\) et \\(\\mathrm{sg}(x) = -1 \\text{ si } x &lt; 0\\)\n\\((\\arcsin x)' = \\dfrac{1}{\\sqrt{1-x^2}}\\)\n\\((\\arccos x)' = -\\dfrac{1}{\\sqrt{1-x^2}}\\)\n\\((\\arctan x)' = \\dfrac{1}{1+x^2}\\)\n\\((\\arcsin u)' = \\dfrac{u'}{\\sqrt{1-u^2}}\\)\n\\((\\arccos u)' = -\\dfrac{u'}{\\sqrt{1-u^2}}\\)\n\\((\\arctan u)' = \\dfrac{u'}{1+u^2}\\)"
  },
  {
    "objectID": "posts/maths/formulaire d'analyse.html#trigonométrie-hyperbolique-réciproque",
    "href": "posts/maths/formulaire d'analyse.html#trigonométrie-hyperbolique-réciproque",
    "title": "formulaire d’analyse",
    "section": "3.5 Trigonométrie hyperbolique réciproque",
    "text": "3.5 Trigonométrie hyperbolique réciproque\n\\(\\arg\\mathrm{sh} x = \\ln \\left( x + \\sqrt{ 1+x^2 } \\right)\\)\n\\(\\arg\\mathrm{ch} x = \\ln \\left( x + \\sqrt{ 1 - x^2 } \\right)\\)\n\\(\\arg\\mathrm{th} x = \\dfrac12 \\ln \\left( \\dfrac{1+x}{1-x} \\right)\\)\n\\((\\arg\\mathrm{sh} x)' = \\dfrac{1}{\\sqrt{ x^2 + 1 }}\\)\n\\((\\arg\\mathrm{ch} x)' = \\dfrac{1}{\\sqrt{x^2 - 1}}\\)\n\\((\\arg\\mathrm{th} x)' = \\dfrac{1}{1-x^2}\\)\n\\((\\arg\\mathrm{sh} u)' = \\dfrac{u'}{\\sqrt{ u^2 + 1 }}\\)\n\\((\\arg\\mathrm{ch} u)' = \\dfrac{u'}{\\sqrt{ u^2 - 1}}\\)\n\\((\\arg\\mathrm{th} u)' = \\dfrac{u'}{1 - u^2}\\)"
  },
  {
    "objectID": "posts/maths/formulaire d'analyse.html#comportement-à-linfini",
    "href": "posts/maths/formulaire d'analyse.html#comportement-à-linfini",
    "title": "formulaire d’analyse",
    "section": "4.1 Comportement à l’infini",
    "text": "4.1 Comportement à l’infini\n\\(\\displaystyle\\lim_{x\\to+\\infty} \\ln x = +\\infty\\)\n\\(\\displaystyle\\lim_{x\\to+\\infty}\\exp x = +\\infty\\)\n\\(\\displaystyle\\lim_{x\\to-\\infty}\\exp x = 0\\)\nSi \\(\\alpha &gt; 0\\), \\(\\displaystyle\\lim_{x\\to+\\infty}x^{\\alpha} = +\\infty\\)\nSi \\(\\alpha &lt; 0\\), \\(\\displaystyle\\lim_{x\\to+\\infty}x^{\\alpha} = 0\\)\nSi \\(\\alpha &gt; 0\\), \\(\\displaystyle\\lim_{x\\to+\\infty}\\dfrac{\\exp x}{x^\\alpha} = \\lim_{x\\to+\\infty}\\dfrac{e^x}{x^\\alpha} = +\\infty\\)\nSi \\(\\alpha &gt; 0\\), \\(\\displaystyle\\lim_{x\\to+\\infty}x^\\alpha\\times\\exp(-x) = \\lim_{x\\to+\\infty}x^\\alpha e^{-x} = 0\\)"
  },
  {
    "objectID": "posts/maths/formulaire d'analyse.html#comportement-à-lorigine",
    "href": "posts/maths/formulaire d'analyse.html#comportement-à-lorigine",
    "title": "formulaire d’analyse",
    "section": "4.2 Comportement à l’origine",
    "text": "4.2 Comportement à l’origine\n\\(\\displaystyle\\lim_{x \\rightarrow 0} \\ln x = + \\infty\\)\nSi \\(\\alpha &gt; 0\\), \\(\\displaystyle\\lim_{x \\rightarrow 0^+} x^\\alpha = +\\infty\\)\nSi \\(\\alpha &lt; 0\\), \\(\\displaystyle\\lim_{x \\rightarrow 0^+} x^\\alpha = +\\infty\\)\nSi \\(\\alpha &gt; 0\\), \\(\\displaystyle\\lim_{x \\rightarrow 0^+} \\left( x^\\alpha \\ln x \\right) = 0\\) propriété de croissance comparée\n\\(\\displaystyle \\lim_{x \\rightarrow 0} \\dfrac{\\ln (1+x)}{x} = 1\\)\n\\(\\displaystyle \\lim_{x \\to 0} \\dfrac{e^x - 1}{x} = 1\\)\n\\(\\displaystyle \\lim_{x \\rightarrow 0} \\dfrac{\\sin x}x = 1\\)"
  },
  {
    "objectID": "posts/maths/formulaire d'analyse.html#intégration-par-parties",
    "href": "posts/maths/formulaire d'analyse.html#intégration-par-parties",
    "title": "formulaire d’analyse",
    "section": "5.1 Intégration par parties",
    "text": "5.1 Intégration par parties\n\\(\\displaystyle \\int_{a}^{b} f(x)g'(x) \\, dx = \\big[ f(x)g(x) \\big]_{a}^{b} - \\int_{a}^{b}  f'(x)g(x) \\, dx\\)"
  },
  {
    "objectID": "posts/maths/formulaire d'analyse.html#primitives-usuelles",
    "href": "posts/maths/formulaire d'analyse.html#primitives-usuelles",
    "title": "formulaire d’analyse",
    "section": "5.2 Primitives usuelles",
    "text": "5.2 Primitives usuelles\nSi \\(\\alpha \\neq -1\\), \\(\\displaystyle \\int x^\\alpha \\mathrm{d} x = \\dfrac{1}{\\alpha + 1}x^{\\alpha +1} + \\text{cte}\\)\n\\(\\displaystyle\\int \\dfrac{1}x \\mathrm{d} x = \\ln |x|+\\text{cte}\\)\n\\(\\displaystyle\\int \\dfrac{1}{x+\\alpha }\\mathrm{d} x = \\ln |x+\\alpha |+\\text{cte}\\)\n\\(\\displaystyle\\int e^x \\mathrm{d} x = e^x + \\text{cte}\\)\nSi \\(\\alpha &gt; 0\\) et \\(\\alpha \\neq 1\\), \\(\\displaystyle\\int \\alpha^x \\mathrm{d} x= \\dfrac{1}{\\ln \\alpha }\\times \\alpha^x + \\text{cte}\\)\n\\(\\displaystyle\\int \\cos x \\mathrm{d} x = \\sin x + \\text{cte}\\)\n\\(\\displaystyle\\int \\sin x \\mathrm{d} x = -\\cos x + \\text{cte}\\)\nSi \\(\\alpha \\neq 0\\), \\(\\displaystyle\\int \\cos \\alpha x \\mathrm{d} x = \\dfrac{1}{\\alpha} \\sin \\alpha x + \\text{cte}\\)\nSi \\(\\alpha \\neq 0\\), \\(\\displaystyle\\int \\sin \\alpha x \\mathrm{d} x = \\dfrac{1}{\\alpha} \\cos \\alpha x + \\text{cte}\\)\n\\(\\displaystyle \\int \\dfrac{1}{\\cos ^2 x} \\mathrm{d} x = \\tan x + \\text{cte}\\)\n\\(\\displaystyle\\int 1 + \\tan ^2 x \\mathrm{d} x = \\tan x + \\text{cte}\\)\n\\(\\displaystyle\\int \\dfrac{1}{\\sin ^2 x} \\mathrm{d} x = -\\mathrm{cotan} x + \\text{cte} \\quad= -\\dfrac{1}{\\tan x} + \\text{cte}\\)\n\\(\\displaystyle\\int \\dfrac{1}{1+x^2} \\mathrm{d} x = \\arctan x + \\text{cte}\\)\n\\(\\displaystyle\\int \\mathrm{ch} x \\mathrm{d} x = \\mathrm{sh} x + \\text{cte}\\)\n\\(\\displaystyle\\int \\mathrm{sh} x \\mathrm{d} x = \\mathrm{ch} x + \\text{cte}\\)\n\\(\\displaystyle\\int \\dfrac{1}{\\mathrm{ch}^2 x} \\mathrm{d} x = \\mathrm{th} x + \\text{cte}\\)\n\\(\\displaystyle\\int \\dfrac{1}{\\mathrm{sh}^2 x} \\mathrm{d} x = \\dfrac{1}{\\mathrm{th} x} + \\text{cte}\\)"
  },
  {
    "objectID": "posts/maths/formulaire d'analyse.html#primitives-de-fonctions-composées",
    "href": "posts/maths/formulaire d'analyse.html#primitives-de-fonctions-composées",
    "title": "formulaire d’analyse",
    "section": "5.3 Primitives de fonctions composées",
    "text": "5.3 Primitives de fonctions composées\n\\(\\displaystyle\\int \\frac{u'(x)}{u(x)} \\, dx = \\ln(u) + \\text{cte}\\)"
  },
  {
    "objectID": "posts/maths/arrangements.html",
    "href": "posts/maths/arrangements.html",
    "title": "arrangements",
    "section": "",
    "text": "Définition\n\n\n\nOn définit \\(A_{n}^{k}\\) (lire “\\(A\\), \\(n\\), \\(k\\)”), les arrangements de \\(k\\) objets d’un ensemble de \\(n\\) objets, comme le nombre de \\(k-uplets\\) d’éléments d’un ensemble à \\(n\\) éléments.\nOn a : \\(\\displaystyle A_{n}^{k} = \\frac{n!}{(n-k)!}\\)\nNote : on dit aussi parfois “arrangements dans \\(n\\) de \\(k\\) éléments” pour \\(A_{n}^{k}\\)\nC’est le nombre de \\(k\\)-uplets d’éléments d’un ensemble à \\(n\\) éléments\n\n\n\nInterprétation\nOn peut interpréter \\(A_{n}^{k}\\) comme le nombre de façons de choisir \\(k\\) éléments dans un ensemble de \\(n\\) éléments, si l’ordre des éléments compte.\n\n\n\n\n\n\nExemples\n\n\n\n\n\nVoici quelques questions de combinatoire dont la réponse passe par des arrangements :\n\nCombien y a-t-il de nombres avec 3 chiffres distincts ?\n\nautrement dit : combien de façons de choisir 3 chiffres parmi les 10 qui existent (si l’ordre est important) ?\n\\(A_{10}^{3} = 720\\)\n\n\n\n\n\n\n\nFormule\nSi on choisit \\(k\\) éléments, et que l’ordre compte, alors :\n\npour le premier élément, on a \\(n\\) possibilités\npour le deuxième élément, on a \\(n - 1\\) possibilités, car on ne peut pas choisir deux fois le premier élément\npour le troisième, \\(n - 2\\) possibilités\npour le \\(4^{\\text{ème}}\\), \\(n-3\\) possibilités\n\\(\\vdots\\)\npour le \\(k-1^{\\text{ème}}\\), \\(n-k + 2\\) possibilités\npour le \\(k^{ème}\\) élément, \\(n - k + 1\\) possibilités\n\nDonc, en tout, on a \\(n \\times (n-1) \\times (n-2) \\times \\cdots \\times (n-k+1)\\) possibilités.\nOn peut exprimer cela comme le produit des nombres de \\(n-k+1\\) jusqu’à \\(n\\) : \\(\\prod\\limits_{i = n-k+1}^{n} i\\).\nPuisqu’on veut le produit jusqu’à \\(n\\) (donc \\(n!\\)), mais sans les nombres de \\(1\\) à \\(n-k\\) inclus (donc \\((n-k)!\\)), comme \\(\\dfrac{n!}{(n-k)!}\\)\nOn a donc bien la formule : \\(\\boxed{A_{n}^{k} = \\frac{n!}{(n-k)!}}\\)"
  },
  {
    "objectID": "posts/maths/transposition.html",
    "href": "posts/maths/transposition.html",
    "title": "transposition",
    "section": "",
    "text": "Définition\n\n\n\nUne transposition est une permutation qui n’échange que \\(2\\) éléments.\nUne transposition est donc un 2-cycle.\nFormellement, une permutation \\(\\sigma \\in\\mathfrak{S}_{n}\\) est une transposition si et seulement si :\n\nil existe \\(2\\) éléments distincts \\(a\\) et \\(b\\) tels que \\(\\sigma(a)=b\\) et \\(\\sigma(b)=a\\)\n\\(\\forall i \\notin \\{ a; b \\}, \\quad \\sigma(i)=i\\) (tous les autres éléments sont invariants par \\(\\sigma\\))\n\n\n\n\n\n\n\n\n\nExemples\n\n\n\n\n\n\\(\\sigma = \\begin{pmatrix}1&2&3\\\\1&3&2\\end{pmatrix}\\) est une transposition\n\\(\\sigma=\\begin{pmatrix}1&2&3&4\\\\3&2&1&4\\end{pmatrix}\\) est une transposition\n\\(\\sigma=\\begin{pmatrix}1&2&3&4&5\\\\2&4&1&5&3\\end{pmatrix}\\) n’est pas une transposition\nVoici la visualisation d’une transposition :\n\n    \n        (\n        \n            \n                1\n                2\n                3\n                4\n                5\n            \n            \n                1\n                2\n                3\n                4\n                5\n            \n        \n        )"
  },
  {
    "objectID": "posts/maths/combinaisons.html",
    "href": "posts/maths/combinaisons.html",
    "title": "combinaisons",
    "section": "",
    "text": "Définition\n\n\n\n\\(\\displaystyle \\binom{n}{k} = \\frac{n!}{k!(n-k)!}\\) Le nombre de façons de choisir \\(k\\) éléments parmi un ensemble de \\(n\\) éléments (sans ordre)\nC’est le nombre d’ensembles à \\(k\\) éléments contenus dans un ensemble à \\(n\\) éléments. Autrement dit, c’est le nombre de sous-ensembles à \\(k\\) éléments d’un ensemble à \\(n\\) éléments - on utilise des ensembles car on a pas de répétitions d’un même élément, et que l’ordre n’est pas important\n\n\n\nInterprétation\nComme dit dans la définition, \\(\\displaystyle \\binom{n}{k}\\) est le nombre de façons de choisir \\(k\\) éléments dans un ensemble de \\(n\\) éléments.\n\n\n\n\n\n\nAttention\n\n\n\nLes combinaisons sont sans répétition, par opposition avec les combinaisons avec répétitions.\nCela veut dire que l’on ne peut choisir qu’une seule fois chaque élément.\n\n\n\n\n\n\n\n\nExemples\n\n\n\n\n\nVoici quelques questions de combinatoire dont la réponse passe par une combinaison :\n\nCombien de nouvelles couleurs peut-on faire en mélangeant 2 couleurs parmi 5 couleurs de base (cyan, magenta, jaune, noir, blanc)\n\n\\(\\displaystyle \\binom{5}{3} = 10\\)\n\nCombien de “mains” de 5 cartes peut-on former avec un jeu de 52 cartes ?\n\n\\(\\dbinom{52}{5} = 2\\,598\\,960\\)\n\ncombien de “livres” différents peut-on former en choisissant 50 pages dans un dictionnaire de \\(100\\) pages (sans considérer l’ordre de ces pages) ?\n\n\\(\\displaystyle \\binom{100}{50} = 100\\,891\\,344\\,545\\,564\\,193\\,334\\,812\\,497\\,256 \\approx 10^{30}\\) (beaucoup)\n\n\n\n\n\n\n\nFormule\nLa formule pour les combinaisons vient de celle pour les arrangements (\\(A_{n}^{k}\\)).\nPar définition, un arrangement considère l’ordre, quand une combinaison ne le considère pas (car l’un compte les \\(k\\)-uplets, quand l’autre compte les ensemble de cardinal \\(k\\)).\nOr, on sait qu’il y à \\(k!\\) façons d’arranger \\(k\\) éléments.\nDonc, on sait qu’il y à \\(k!\\) fois plus d’arrangements que de combinaisons pour des mêmes coefficients : \\(\\displaystyle \\binom{n}{k} = k! \\times A_{n}^{k}\\)\nOn en déduit : \\(\\displaystyle \\binom{n}{k} = k! \\times \\frac{n!}{(n - k)!}\\), soit :\n\\(\\boxed{\\binom{n}{k} = \\frac{n!}{k!(n-k)!}}\\)"
  },
  {
    "objectID": "posts/autres/apprentissage.html",
    "href": "posts/autres/apprentissage.html",
    "title": "comment mieux apprendre",
    "section": "",
    "text": ":techniques pour mieux apprendre\nLorsqu’on apprend quelque chose de nouveau, il faut choisir les bonnes :ressources pour apprendre, mais aussi trouver une :méthode de travail efficace.\nIl faut aussi garder une bonne :hygiène de vie et un bon :environnement de travail\n:résumé visuel de l’article\n\n\n:x-ressources-pour-apprendre\nUtilisez des livres, des articles, des sites internet, des :formations en ligne, des :formations académiques (université, BTS…)… choisissez le média qui vous correspond, et une :pédagogie adaptée.\nApprenez à :filtrer les sources.\nDes ressources pertinentes, bien ciblées, évitent de perdre du temps.\nI est également utile de :trouver des compagnons de travail, voire une :communauté de passionnés. Ceci dit, :travailler seul est aussi possible\n\n\n:x-filtrer-les-sources\nInternet est très vaste, ce qui peut être décourageant. Tout n’est pas bon à prendre, il faut savoir se méfier (y compris de l’article que vous êtes en train de lire).\n\n\n:x-formations-en-ligne\nBeaucoup de formations en ligne sont très bien faites, avec des exercices, une pédagogie réfléchie…\nIl existe beaucoup de formations gratuites, mais le fait de payer est une motivation pour aller jusqu’au bout d’une formation.\nCela est en partie dû au :biais du coût irrécupérable\n\n\n:x-biais-du-cout-irrecuperable\nLe biais du coût irrécupérable est la tendance qu’ont les individus à être influencés par des investissements (financiers par exemple) faits dans le passé, de façon irrationnelle.\n\nPar exemple, si vous êtes au cinéma et que vous n’aimez pas le film, la décision rationnelle serait de sortir de la salle. Mais la plupart des gens resteront, car ils ont dépensé de l’argent pour le ticket. Pourtant, cet argent est dépensé quoi que l’on fasse, on a le choix entre avoir acheté un ticket et voir un mauvais film, ou bien avoir acheté un ticket et s’amuser dehors !\nCe biais, qui fait que nous ne prenons pas la décision la plus rationnelle, est le biais du coût irrécupérable.\n\n\n:x-formations-academiques\nLes formations académiques ont plusieurs avantages :\n\nun cadre qui peut être plus confortable\nun diplôme (qui a plus ou mois de valeur selon les domaines)\ndes :camarades, ce qui est motivant\ndes professeurs\n\nils ont une connaissance profonde du sujet\nils peuvent vous aider, répondre à vos questions\nils ont de l’expérience sur le sujet qu’ils enseignent\n\n\n\n\n:x-aimer-son-professeur-et-son-enseignement\nLa pédagogie doit vous corresponde pour que l’apprentissage soit agréable.\nIl faut “apprendre à aimer” un enseignement, en analysant correctement et en :prenant des notes intelligentes\n\n\n:x-trouver-des-compagnons-de-travail\nL’entraide est une manière agréable d’apprendre. S’aider mutuellement permet de garder la motivation et est très gratifiant.\n:Expliquer et formuler des concepts aux autres permet de bien intégrer son apprentissage.\n\n\n:x-methode-feynman\nC’est une partie de la méthode Feynman : le meilleur moyen de comprendre quelque chose est de l’expliquer, car si vous n’arrivez pas à l’expliquer simplement, c’est que vous ne le comprenez pas assez bien\nUne des idées de cette méthode est d’expliquer (de façon imaginaire) à un enfant de 12 ans ce qu’on cherche à bien apprendre. Cela permet d’identifier ce qu’on a pas bien compris : il faut retravailler les éléments que l’on n’arrive pas à expliquer.\n\n\n\n:x-trouver-une-communaute\nIl est très utile de trouver des communautés de gens intéressés par le sujet que vous apprenez, par exemple des forums internet, des groupes Reddit, des serveurs Discord…\nUne communauté de passionnés permet :\n\nd’avoir des réponses rapides et des conseils efficaces sur des questions particulières\nd’avoir des conseils efficaces pour mieux apprendre\nde partager des concepts et des idées\n\nélaborer de nouvelles idées\nvous donner un éclairage sur des parties floues de votre apprentissage\n\ndiscuter avec des passionnés, ce qui est très motivant\n\n\n\n:x-travailler-seul-est-aussi-possible\nÊtre seul n’est pas la fin du monde. Il faut simplement avoir de l’autonomie (étymologiquement : se fixer ses propres règles), avoir une bonne :méthode de travail\n\n\n:x-hygiene-de-vie\nAvoir une bonne hygiène de vie est important pour être efficace. Bien dormir, faire de l’exercice physique et ne pas rester enfermé chez soi sont des choses simples qui ont beaucoup d’impact.\nFaire des :pauses régulières permet aussi de travailler plus longtemps sans se déconcentrer.\n\n\n:x-pomodoro\nLa méthode pomodoro consiste à diviser son travail en cycles de 25 minutes séparés par de courtes pauses : travail 25 min, pause 5 min, travail 25 min, pause 5 min…\nCette technique permet de travailler plus longtemps et efficacement, en restant concentré.\nPendant les pauses, vous pouvez faire des étirements (pour ne pas rester statique trop longtemps), lire un livre qui vous plaît, boire un café…\n\n\n:x-environnement-de-travail\nFaites attention à votre environnement de travail, il est aussi important que les :ressources que vous utilisez.\nVous devez garder un environnement :sain. Il faut aussi :séparer les environnements de travail et de divertissement\n\n\n:x-environnement-sain\n\nune pièce aérée\nune bonne luminosité\nfaire attention à l’ergonomie, notamment si vous travaillez sur un ordinateur\n\n\n\n:x-separer-travail-et-divertissement\n\nséparer les environnements de travail et de divertissement\n\nvidéo sur la séparation des environnements (en anglais) : CGP Grey - Spaceship you\navoir un bureau bien rangé\n\néloigner la nourriture, le téléphone, les objets distrayants…\n\nboire de l’eau est une alternative au grignotage\n\n\nrester concentré en évitant toute distraction durant les phases de travail\n\nfermer les pages du navigateur et les applications qui n’ont rien à voir avec votre projet\ndes logiciels permettent de faire cela (bloquer certaines applications pendant le travail, avoir plusieurs environnements de navigateur, un pour le travail, un pour le divertissement)\n\n==TODO : liste de logiciels==\n\n\n\n\n\n\n:x-methode-d-apprentissage\nAvoir de bonnes méthodes permet d’apprendre mieux et plus vite.\nDéfinissez-vous un :emploi du temps. Fixez-vous :de bons objectifs. Commencez par :apprendre ce que vous aimez. Faites des :projets (surtout pour apprendre la programmation).\nPrenez des :notes.\n\n\n:x-emploi-du-temps\n\nse fixer un emploi du temps pour apprendre (choisir des moments dédiés à notre apprentissage)\nla régularité aide à rester motivé et à garder une cadence efficace\nespacer son apprentissage dans le temps\n\nessayer de tout apprendre d’un coup est vain et décourageant\ncela permet de mieux mémoriser, c’est la répétition espacée\nessayer d’apprendre trop vite peut être décourageant, il faut du temps à votre cerveau pour intégrer les choses\n\nil ne faut pas être trop impatient\n\n\n\n\n\n:x-se-fixer-de-bons-objectifs\n\ndes objectifs SMART :\n\nSpécifique (clairement défini)\n\nil doit être clairement défini\n\nMesurable\n\nil doit être facile de savoir quant l’objectif est atteint\n\nAtteignable\n\ndes objectifs trop difficiles brisent la motivation (on ne pense pas pouvoir y arriver)\n\nRelevant (comprendre pertinent, vient de l’anglais relevant)\n\nil faut que l’objectif soit utile\ndes objectifs trop simples ne sont pas gratifiants (on a l’impression de ne pas avancer)\n\nTemporel\n\ndoit avoir une date buttoir, pour éviter la procrastination\nattention à fixer une date atteignable !\n\n\ndes formations (livres, :formations en lignes, écoles) donnent des objectifs bien pensés\nune pensée :stoïque peut aider\n\n\n\n:x-stoicisme\nLa pensée stoïque peut être résumée à :\n\nne pas essayer d’agir contre ce qu’on ne contrôle pas\nfaire son possible pour changer ce que l’on peut\nagir sur les causes directement, et non sur les conséquences\n\n\n\n:x-commencer-par-ce-quon-aime\nIl faut commencer par travailler sur ce qu’on aime, ce que l’on connaît déjà\n\nil est beaucoup plus facile et motivant de travailler dans une direction qu’on aime (par exemple : apprendre la programmation en fabriquant un petit jeu vidéo)\nutiliser ce qu’on a déjà appris, ce qu’on maîtrise déjà, pour ne pas repartir de zéro\nmélanger les apprentissages\n\n\n\n:x-faire-des-projets\n\nles projets sont très formateurs, ils permettent de mettre en applications vos connaissances\nfaire des miniprojets : de petits projets qui permettent de s’entrainer\nbien se préparer avant de se lancer dans un projet\n\nbon cahier des charges (bien définir ce qu’on veut faire)\nvérifier qu’on maîtrise les outils nécessaires\ndemander à une communauté si notre idée est pertinente\n\npeut-être que quelqu’un l’a déjà fait\npeut-être que quelqu’un a déjà essayé, et peut vous dire ce qui est à éviter, ce qui est le plus difficile\npeut-être qu’un aspect qui vous paraît évident ne l’est pas\nmultiplier les points de vue est toujours bon\n\n\n\n\n\n:x-prise-de-notes\nBien prendre des notes permet de préserver notre apprentissage.\n\napprendre par cœur n’aide pas. Il faut :\n\nanalyser (comprendre entièrement)\ndécouper (séparer les concepts)\ntrouver les liens entre les concepts\nreprendre les idées avec ses propres mots\ndévelopper ses propres idées autours des concepts appris\n\nles buts de vos notes sont :\n\ngarder les informations importantes\nretrouver rapidement un concept\npouvoir créer quelque chose (comme écrire un article)\n\nj’utilise :la méthode zettelkasten et les notes liées avec l’application obsidian\n\n\n\n:x-zettelkasten\nLa méthode zettelkasten est un système de prise de notes qui consiste à créer des notes atomiques, et liées.\n\natomiques : les notes doivent parler d’un seul concept (les atomes sont indivisibles, vos notes doivent l’être aussi). Si une note parle de 2 sujets, on doit la séparer en plusieurs notes\nliées : les concepts reliés doivent être reliés dans vos notes (avec des liens cliquables)\n\nles liens peuvent créer une hiérarchie\nles liens peuvent rapprocher des concepts similaires\nles liens améliorent la navigation (on saute de note en note en cliquant)\nles liens ont du sens : les concepts ont plus d’intérêt si ils sont reliés\n\n\nVoici un article sur la méthode Zettelkasten : Méthode Zettelkasten : Comment prendre des notes utiles ?\n\n\n:x-carte-mentale"
  }
]