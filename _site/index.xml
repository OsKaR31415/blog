<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>0SK42</title>
<link>https://osk42.quarto.pub/osk42/</link>
<atom:link href="https://osk42.quarto.pub/osk42/index.xml" rel="self" type="application/rss+xml"/>
<description>OSK42 - blog de Maths et d&#39;Informatique</description>
<language>fr</language>
<image>
<url>https://osk42.quarto.pub/osk42/_images/OsKaR.png</url>
<title>0SK42</title>
<link>https://osk42.quarto.pub/osk42/</link>
<height>81</height>
<width>144</width>
</image>
<generator>quarto-1.4.555</generator>
<lastBuildDate>Tue, 24 Sep 2024 22:00:00 GMT</lastBuildDate>
<item>
  <title>Je reprends mon blog !</title>
  <link>https://osk42.quarto.pub/osk42/posts/news/je_reprends_mon_blog.html</link>
  <description><![CDATA[ 





<p>Je reprends enfin ce blog, après une pause de plus d’un an pour cause de <em>perte de mot de passe</em>.</p>
<p>J’avais en fait complètement oublié que je n’avais pas de mot de passe ! Mon compte quarto (l’outil que j’utilise pour générer ce blog) est en fait lié à mon compte <a href="https://github.com/OsKaR31415">github</a>.</p>
<p>En 13 mois, j’ai pris beaucoup d’intérêt pour la philosophie, la politique et les sujets qui s’en rapprochent (la sociologie, la philosophie politique, en moindre mesure l’économie…). J’ai découvert la philosophie de Spinoza, et je me suis lancé dans la lecture de <em>l’Éthique</em>, son œuvre majeure, mais assez complexe à lire. J’ai également découvert des philosophes actuels, comme Bernard Friot (qui défend notamment le salaire à vie, qui n’est pas le revenu de base) ou bien Frédéric Lordon (qui cherche à allier le matérialisme Marxiste et l’axiologie Spinoziste — c’est par là que j’en suis arrivé à Spinoza).</p>
<p>J’ai donc plutôt en tête des articles de réflexion et d’opinion sur ces sujets, et moins des articles techniques comme ceux que j’ai déjà pu écrire sur l’informatique et les mathématiques.</p>



 ]]></description>
  <category>news</category>
  <guid>https://osk42.quarto.pub/osk42/posts/news/je_reprends_mon_blog.html</guid>
  <pubDate>Tue, 24 Sep 2024 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Et si tout le monde saute d’un pont, tu le fais aussi ?</title>
  <link>https://osk42.quarto.pub/osk42/posts/autres/si tout le monde saute dun pont.html</link>
  <description><![CDATA[ 





<blockquote class="blockquote">
<p>Et si tout le monde saute d’un pont, tu le fais aussi ?</p>
</blockquote>
<p>Il existe deux types de personnes : ceux qui utilisent cette phrase, et ceux qui ne l’utilisent pas. Et les premiers ont tendance à être pénibles. Voici donc ma réponse à tous ceux qui au cours d’un débat ont brandi fièrement ce fleuron de bon sens.</p>
<p>Si on suppose que la question est de savoir si l’on est prêts à sauter d’un pont simplement parce que d’autres gens le font, la réponse est sûrement, en l’absence de variables cachée, non. Cependant, il semble important de noter que si “<em>tout le monde saute d’un pont</em>”, il y a peut-être une raison, et en tout cas certainement une conséquence moindre, car loin d’être des êtres uniquement capables de dupliquer par grégarisme les comportements de leurs camarades, les êtres humains ont une pensée qui tente à chaque instant de prévoir au mieux le futur. Ainsi, si tant de gens souhaitent volontairement sauter de ce pont, c’est qu’ils doivent en être arrivés à la conclusion que cela était bénéfique.</p>
<p>Cependant, le lecteur éclairé aura remarqué l’analogie qui se cache derrière ce proverbe. La question est donc plutôt “le nombre de prédécesseurs légitime-t-il ?”. Il paraît alors important de remarquer que — et ce peut être justifié par l’explication précédemment donnée de la tendance de tous à faire des choix qui leur sont bénéfiques — les situations dans lesquelles la question rhétorique qui nous intéresse est utilisée sont bien souvent sans conséquences immédiatement grave, puisque personne ne voudrait prendre intentionnellement de mauvaises décisions. La plupart du temps, l’action dont le fait de sauter du pont est une analogie n’est pas réellement si grave. Le parallèle entre une action aux conséquences temporellement décalées et une action probablement mortelle, ou en tout cas dangereuse pour l’intégrité physique, parais peu soutenable, étant donné le contexte d’une discussion sur la suffisance de la reproduction sociale pour justifier ce premier type d’action. On peut également ajouter que, par sa nature condescendante et son fort appui sur le bon sens comme argument logique, “<em>Et si tout le monde saute d’un pont, tu le fais aussi</em>” est une phrase dont les locuteurs sont sûrement les mêmes qui sautent effectivement dans la rivière du sens commun lors d’une promenade sur le pont de l’argumentation.</p>



 ]]></description>
  <category>aphorisme</category>
  <category>réflexion</category>
  <guid>https://osk42.quarto.pub/osk42/posts/autres/si tout le monde saute dun pont.html</guid>
  <pubDate>Wed, 09 Aug 2023 22:00:00 GMT</pubDate>
</item>
<item>
  <title>comment mieux apprendre</title>
  <dc:creator>Oscar Plaisant</dc:creator>
  <dc:creator>bucdany </dc:creator>
  <link>https://osk42.quarto.pub/osk42/posts/autres/apprentissage.html</link>
  <description><![CDATA[ 





<section id="techniques-pour-mieux-apprendre" class="level1">
<h1>:techniques pour mieux apprendre</h1>
<p>Lorsqu’on apprend quelque chose de nouveau, il faut choisir les bonnes :ressources pour apprendre, mais aussi trouver une :méthode de travail efficace.</p>
<p>Il faut aussi garder une bonne :hygiène de vie et un bon :environnement de travail</p>
<p><strong>:résumé visuel de l’article</strong></p>
</section>
<section id="x-ressources-pour-apprendre" class="level1">
<h1>:x-ressources-pour-apprendre</h1>
<p>Utilisez des livres, des articles, des sites internet, des :formations en ligne, des :formations académiques (université, BTS…)… choisissez <strong>le média qui vous correspond</strong>, et une :pédagogie adaptée.</p>
<p>Apprenez à :filtrer les sources.</p>
<p>Des ressources pertinentes, bien ciblées, évitent de perdre du temps.</p>
<p>I est également utile de :trouver des compagnons de travail, voire une :communauté de passionnés. Ceci dit, :travailler seul est aussi possible</p>
</section>
<section id="x-filtrer-les-sources" class="level1">
<h1>:x-filtrer-les-sources</h1>
<p>Internet est très vaste, ce qui peut être décourageant. <strong>Tout n’est pas bon à prendre</strong>, il faut savoir se méfier (y compris de l’article que vous êtes en train de lire).</p>
</section>
<section id="x-formations-en-ligne" class="level1">
<h1>:x-formations-en-ligne</h1>
<p>Beaucoup de formations en ligne sont très bien faites, avec des exercices, une pédagogie réfléchie…</p>
<p>Il existe beaucoup de formations gratuites, mais le fait de payer est une motivation pour aller jusqu’au bout d’une formation.</p>
<p>Cela est en partie dû au :biais du coût irrécupérable</p>
</section>
<section id="x-biais-du-cout-irrecuperable" class="level1">
<h1>:x-biais-du-cout-irrecuperable</h1>
<p>Le <em>biais du coût irrécupérable</em> est la tendance qu’ont les individus à être influencés par des investissements (financiers par exemple) faits dans le passé, de façon irrationnelle.</p>
<p><img src="https://osk42.quarto.pub/osk42/posts/autres/_images/biais_cout_irrecuperable.png" class="img-fluid"></p>
<p>Par exemple, si vous êtes au cinéma et que vous n’aimez pas le film, la décision rationnelle serait de sortir de la salle. Mais la plupart des gens resteront, car ils ont dépensé de l’argent pour le ticket. Pourtant, <strong>cet argent est dépensé quoi que l’on fasse</strong>, on a le choix entre avoir acheté un ticket et voir un mauvais film, ou bien avoir acheté un ticket et s’amuser dehors !</p>
<p>Ce biais, qui fait que nous ne prenons pas la décision la plus rationnelle, est le <em>biais du coût irrécupérable</em>.</p>
</section>
<section id="x-formations-academiques" class="level1">
<h1>:x-formations-academiques</h1>
<p>Les formations académiques ont plusieurs avantages :</p>
<ul>
<li>un cadre qui peut être plus confortable</li>
<li>un diplôme (qui a plus ou mois de valeur selon les domaines)</li>
<li>des :camarades, ce qui est motivant</li>
<li>des professeurs
<ul>
<li>ils ont une connaissance profonde du sujet</li>
<li>ils peuvent vous aider, répondre à vos questions</li>
<li>ils ont de l’expérience sur le sujet qu’ils enseignent</li>
</ul></li>
</ul>
</section>
<section id="x-aimer-son-professeur-et-son-enseignement" class="level1">
<h1>:x-aimer-son-professeur-et-son-enseignement</h1>
<p>La pédagogie doit vous corresponde pour que l’apprentissage soit agréable.</p>
<p>Il faut “apprendre à aimer” un enseignement, en analysant correctement et en :prenant des notes intelligentes</p>
</section>
<section id="x-trouver-des-compagnons-de-travail" class="level1">
<h1>:x-trouver-des-compagnons-de-travail</h1>
<p>L’entraide est une manière <strong>agréable</strong> d’apprendre. S’aider mutuellement permet de garder la motivation et est très gratifiant.</p>
<p>:Expliquer et formuler des concepts aux autres permet de bien intégrer son apprentissage.</p>
</section>
<section id="x-methode-feynman" class="level1">
<h1>:x-methode-feynman</h1>
<p>C’est une partie de la méthode Feynman : <em><strong>le meilleur moyen de comprendre quelque chose est de l’expliquer</strong>, car si vous n’arrivez pas à l’expliquer simplement, c’est que vous ne le comprenez pas assez bien</em></p>
<p>Une des idées de cette méthode est d’expliquer (de façon imaginaire) à un enfant de 12 ans ce qu’on cherche à bien apprendre. Cela permet d’identifier ce qu’on a pas bien compris : il faut retravailler les éléments que l’on n’arrive pas à expliquer.</p>
<p><img src="https://osk42.quarto.pub/osk42/posts/autres/_images/apprentissage_et_motivation_methode_feynman.png" class="img-fluid"></p>
</section>
<section id="x-trouver-une-communaute" class="level1">
<h1>:x-trouver-une-communaute</h1>
<p>Il est très utile de trouver des communautés de gens intéressés par le sujet que vous apprenez, par exemple des forums internet, des groupes Reddit, des serveurs Discord…</p>
<p>Une communauté de passionnés permet :</p>
<ul>
<li>d’avoir des réponses rapides et des conseils efficaces sur des questions particulières</li>
<li>d’avoir des conseils efficaces pour mieux apprendre</li>
<li>de partager des concepts et des idées
<ul>
<li>élaborer de nouvelles idées</li>
<li>vous donner un éclairage sur des parties floues de votre apprentissage</li>
</ul></li>
<li>discuter avec des passionnés, ce qui est très motivant</li>
</ul>
</section>
<section id="x-travailler-seul-est-aussi-possible" class="level1">
<h1>:x-travailler-seul-est-aussi-possible</h1>
<p>Être seul n’est pas la fin du monde. Il faut simplement avoir de l’<strong>autonomie</strong> (étymologiquement : <em>se fixer ses propres règles</em>), avoir une bonne :méthode de travail</p>
</section>
<section id="x-hygiene-de-vie" class="level1">
<h1>:x-hygiene-de-vie</h1>
<p>Avoir une bonne <strong>hygiène de vie</strong> est important pour être efficace. Bien <strong>dormir</strong>, faire de l’exercice physique et ne pas rester enfermé chez soi sont des choses simples qui ont beaucoup d’impact.</p>
<p>Faire des :pauses régulières permet aussi de travailler plus longtemps sans se déconcentrer.</p>
</section>
<section id="x-pomodoro" class="level1">
<h1>:x-pomodoro</h1>
<p>La méthode <strong><em><a href="https://fr.wikipedia.org/wiki/Technique_Pomodoro">pomodoro</a></em></strong> consiste à diviser son travail en cycles de 25 minutes séparés par de courtes pauses : travail 25 min, pause 5 min, travail 25 min, pause 5 min…</p>
<p>Cette technique permet de travailler plus longtemps et efficacement, en restant concentré.</p>
<p>Pendant les pauses, vous pouvez faire des étirements (pour ne pas rester statique trop longtemps), lire un livre qui vous plaît, boire un café…</p>
</section>
<section id="x-environnement-de-travail" class="level1">
<h1>:x-environnement-de-travail</h1>
<p>Faites attention à votre environnement de travail, il est aussi important que les :ressources que vous utilisez.</p>
<p>Vous devez garder un environnement :sain. Il faut aussi :séparer les environnements de travail et de divertissement</p>
</section>
<section id="x-environnement-sain" class="level1">
<h1>:x-environnement-sain</h1>
<ul>
<li>une pièce aérée</li>
<li>une bonne luminosité</li>
<li>faire attention à l’ergonomie, notamment si vous travaillez sur un ordinateur</li>
</ul>
</section>
<section id="x-separer-travail-et-divertissement" class="level1">
<h1>:x-separer-travail-et-divertissement</h1>
<ul>
<li><strong>séparer les environnements</strong> de travail et de divertissement
<ul>
<li>vidéo sur la séparation des environnements (en anglais) : <a href="https://www.youtube.com/watch?v=snAhsXyO3Ck">CGP Grey - Spaceship you</a></li>
<li>avoir un bureau bien rangé
<ul>
<li>éloigner la nourriture, le téléphone, les objets distrayants…
<ul>
<li>boire de l’eau est une alternative au grignotage</li>
</ul></li>
</ul></li>
<li>rester concentré en évitant toute distraction durant les phases de travail
<ul>
<li>fermer les pages du navigateur et les applications qui n’ont rien à voir avec votre projet</li>
<li>des logiciels permettent de faire cela (bloquer certaines applications pendant le travail, avoir plusieurs environnements de navigateur, un pour le travail, un pour le divertissement)
<ul>
<li>==TODO : liste de logiciels==</li>
</ul></li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="x-methode-d-apprentissage" class="level1">
<h1>:x-methode-d-apprentissage</h1>
<p>Avoir de bonnes méthodes permet d’apprendre mieux et plus vite.</p>
<p>Définissez-vous un :emploi du temps. Fixez-vous :de bons objectifs. Commencez par :apprendre ce que vous aimez. Faites des :projets (surtout pour apprendre la programmation).</p>
<p>Prenez des :notes.</p>
</section>
<section id="x-emploi-du-temps" class="level1">
<h1>:x-emploi-du-temps</h1>
<ul>
<li>se fixer un emploi du temps pour apprendre (choisir des moments dédiés à notre apprentissage)</li>
<li>la régularité aide à rester motivé et à garder une cadence efficace</li>
<li>espacer son apprentissage dans le temps
<ul>
<li>essayer de tout apprendre d’un coup est vain et décourageant</li>
<li>cela permet de mieux mémoriser, c’est la <strong><a href="https://ncase.me/remember/fr.html">répétition espacée</a></strong></li>
<li>essayer d’apprendre trop vite peut être décourageant, il faut du temps à votre cerveau pour intégrer les choses
<ul>
<li>il ne faut pas être trop impatient</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="x-se-fixer-de-bons-objectifs" class="level1">
<h1>:x-se-fixer-de-bons-objectifs</h1>
<ul>
<li><p>des objectifs <strong>SMART</strong> :</p>
<ul>
<li><strong>S</strong>pécifique (clairement défini)
<ul>
<li>il doit être clairement défini</li>
</ul></li>
<li><strong>M</strong>esurable
<ul>
<li>il doit être facile de savoir quant l’objectif est atteint</li>
</ul></li>
<li><strong>A</strong>tteignable
<ul>
<li>des objectifs trop difficiles brisent la motivation (on ne pense pas pouvoir y arriver)</li>
</ul></li>
<li><strong>R</strong>elevant (comprendre pertinent, vient de l’anglais <em>relevant</em>)
<ul>
<li>il faut que l’objectif soit utile</li>
<li>des objectifs trop simples ne sont pas gratifiants (on a l’impression de ne pas avancer)</li>
</ul></li>
<li><strong>T</strong>emporel
<ul>
<li>doit avoir une date buttoir, pour éviter la procrastination</li>
<li>attention à fixer une date atteignable !</li>
</ul></li>
</ul></li>
<li><p>des formations (livres, :formations en lignes, écoles) donnent des objectifs bien pensés</p></li>
<li><p>une pensée :stoïque peut aider</p></li>
</ul>
</section>
<section id="x-stoicisme" class="level1">
<h1>:x-stoicisme</h1>
<p>La pensée stoïque peut être résumée à :</p>
<ul>
<li>ne pas essayer d’agir contre ce qu’on ne contrôle pas</li>
<li>faire son possible pour changer ce que l’on peut</li>
<li>agir sur les causes directement, et non sur les conséquences</li>
</ul>
</section>
<section id="x-commencer-par-ce-quon-aime" class="level1">
<h1>:x-commencer-par-ce-quon-aime</h1>
<p>Il faut commencer par travailler sur ce qu’on aime, ce que l’on connaît déjà</p>
<ul>
<li>il est beaucoup plus facile et motivant de travailler dans une direction qu’on aime (par exemple : apprendre la programmation en fabriquant un petit jeu vidéo)</li>
<li>utiliser ce qu’on a déjà appris, ce qu’on maîtrise déjà, pour ne pas repartir de zéro</li>
<li>mélanger les apprentissages</li>
</ul>
</section>
<section id="x-faire-des-projets" class="level1">
<h1>:x-faire-des-projets</h1>
<ul>
<li>les projets sont très formateurs, ils permettent de mettre en applications vos connaissances</li>
<li>faire des miniprojets : de petits projets qui permettent de s’entrainer</li>
<li>bien se préparer avant de se lancer dans un projet
<ul>
<li>bon cahier des charges (bien définir ce qu’on veut faire)</li>
<li>vérifier qu’on maîtrise les outils nécessaires</li>
<li>demander à une communauté si notre idée est pertinente
<ul>
<li>peut-être que quelqu’un l’a déjà fait</li>
<li>peut-être que quelqu’un a déjà essayé, et peut vous dire ce qui est à éviter, ce qui est le plus difficile</li>
<li>peut-être qu’un aspect qui vous paraît évident ne l’est pas</li>
<li>multiplier les points de vue est toujours bon</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="x-prise-de-notes" class="level1">
<h1>:x-prise-de-notes</h1>
<p>Bien prendre des notes permet de préserver notre apprentissage.</p>
<ul>
<li>apprendre par cœur n’aide pas. Il faut :
<ul>
<li>analyser (comprendre entièrement)</li>
<li>découper (séparer les concepts)</li>
<li>trouver les liens entre les concepts</li>
<li>reprendre les idées avec ses propres mots</li>
<li>développer ses propres idées autours des concepts appris</li>
</ul></li>
<li>les buts de vos notes sont :
<ul>
<li>garder les informations importantes</li>
<li>retrouver rapidement un concept</li>
<li>pouvoir créer quelque chose (comme écrire un article)</li>
</ul></li>
<li>j’utilise :la méthode <em>zettelkasten</em> et les <em>notes liées</em> avec l’application <strong><a href="https://obsidian.md">obsidian</a></strong></li>
</ul>
</section>
<section id="x-zettelkasten" class="level1">
<h1>:x-zettelkasten</h1>
<p>La méthode zettelkasten est un système de prise de notes qui consiste à créer des notes <strong>atomiques</strong>, et <strong>liées</strong>.</p>
<ul>
<li><strong>atomiques</strong> : les notes doivent parler d’un seul concept (les atomes sont indivisibles, vos notes doivent l’être aussi). Si une note parle de 2 sujets, on doit la séparer en plusieurs notes</li>
<li><strong>liées</strong> : les concepts reliés doivent être reliés dans vos notes (avec des liens cliquables)
<ul>
<li>les liens peuvent créer une hiérarchie</li>
<li>les liens peuvent rapprocher des concepts similaires</li>
<li>les liens améliorent la navigation (on saute de note en note en cliquant)</li>
<li>les liens ont du sens : les concepts ont plus d’intérêt si ils sont reliés</li>
</ul></li>
</ul>
<p>Voici un article sur la méthode Zettelkasten : <em><a href="https://everlaab.com/methode-zettelkasten-comment-prendre-des-notes-utiles/">Méthode Zettelkasten : Comment prendre des notes utiles ?</a></em></p>
</section>
<section id="x-carte-mentale" class="level1">
<h1>:x-carte-mentale</h1>
<p><img src="https://osk42.quarto.pub/osk42/posts/autres/_images/apprentissage.png" class="img-fluid"></p>


</section>

 ]]></description>
  <category>apprendre</category>
  <guid>https://osk42.quarto.pub/osk42/posts/autres/apprentissage.html</guid>
  <pubDate>Thu, 03 Aug 2023 22:00:00 GMT</pubDate>
  <media:content url="https://osk42.quarto.pub/osk42/posts/autres/_images/apprentissage.png" medium="image" type="image/png" height="140" width="144"/>
</item>
<item>
  <title>Contre, l’usage, abusif, de la virgule, dans la notation, mathématique</title>
  <link>https://osk42.quarto.pub/osk42/posts/maths/contre l usage abusif de la virgule dans la notation mathematique.html</link>
  <description><![CDATA[ 





<p>La notation mathématique traditionnelle cherche à traduire des phrases et des calculs en symboles.</p>
<p>Par exemple, on peut dire “tous les nombres entiers sont pairs ou impairs”, mais on peut également écrire <img src="https://latex.codecogs.com/png.latex?%5Cforall%20n%20%5Cin%20%5Cmathbb%7BN%7D,%20%5Cquad%20(2%5Cmid%20n)%20%5Cvee%20(2%20%5Cnmid%20n)">, ce qui veut dire la même chose.</p>
<p>La notation mathématique intéressante principalement pour deux choses :</p>
<ul>
<li>elle est plus lisible : on préfère <img src="https://latex.codecogs.com/png.latex?%5Cforall%20x%20%5Cin%20N,%20%5Cforall%20i,%20j%20%5Cin%20%5Cmathbb%7BN%7D,%20%5Cquad%20i%5Ctimes%20j%7Cn%20%5Cimplies%20(i%5Cmid%20n)%20%5Cwedge%20(j%5Cmid%20n)"> plutôt que “<em>si un entier est divisible par le produit de deux entiers, alors il est divisible par chacun des deux entiers</em>”</li>
<li>elle est plus rigoureuse : écrire des théorèmes ou expressions mathématiques en français peut être ambigu et sujet à interprétation</li>
</ul>
<p>C’est pour cette deuxième raison que la virgule pose un problème : elle rend la notation mathématique moins rigoureuse, et parfois même ambigüe.</p>
<section id="les-différentes-significations-de-la-virgule" class="level2">
<h2 class="anchored" data-anchor-id="les-différentes-significations-de-la-virgule">Les différentes significations de la virgule</h2>
<p>Pour comprendre les problèmes de la virgule, listons les significations possibles de ce symbole :</p>
<ul>
<li>pour des vecteurs, elle sépare les valeurs : <img src="https://latex.codecogs.com/png.latex?(x,%20y,%20z)"></li>
<li>Elle sépare les quantificateurs : <img src="https://latex.codecogs.com/png.latex?%5Cforall%20x%20%5Cin%20%5Cmathbb%7BR%7D,%20%5Cexists%20y%20%5Cin%20%5Cmathbb%7BR%7D%20%5Cdots"></li>
<li>Elle signifie “tel que” : <img src="https://latex.codecogs.com/png.latex?%5Cexists%20x%20%5Cin%20%5Cmathbb%7BR%7D,%20x%5E%7B2%7D%20%3C%2042"></li>
<li>Elle “distribue” un <img src="https://latex.codecogs.com/png.latex?%5Cin"> sur plusieurs valeurs : <img src="https://latex.codecogs.com/png.latex?%5Cforall%20x,%20y%20%5Cin%20%5Cmathbb%7BR%7D%5Cdots"></li>
</ul>
</section>
<section id="ambiguïtés-créées-par-la-virgule" class="level2">
<h2 class="anchored" data-anchor-id="ambiguïtés-créées-par-la-virgule">Ambiguïtés créées par la virgule</h2>
<p>Nous avons vu que la virgule possède plusieurs utilisations différentes. En fait, on peut aisément construire un exemple qui utilise toutes ces significations :</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cforall%20x,%20y%20%5Cin%20%5Cmathbb%7BR%7D,%20%5Cexists%20y%20%5Cin%20%5Cmathbb%7BR%7D,%20y%20%5Cin%20(x,%20y)"></p>
<p>Ici, on a le même problème qu’avec l’écriture en français : le même mot (symbole) peut avoir beaucoup de significations selon le contexte. On peut tout de même donner des règles qui permettent de reconnaître quelle interprétation est la bonne : - dans un vecteur (une valeur entre parenthèses), c’est un séparateur des coefficients du vecteur - avant un <img src="https://latex.codecogs.com/png.latex?%5Cin">, c’est un raccourci pour dire que toutes les variables listées appartiennent à l’ensemble désigné - Après / entre des quantificateurs - c’est un “tel que” s’il est suivi par une expression ou bien par un “il existe” - c’est un séparateur s’il est suivi par un quantificateur “pour tout” ( <img src="https://latex.codecogs.com/png.latex?%5Cforall"> )</p>
<section id="cas-où-la-notation-est-vraiment-ambiguë" class="level3">
<h3 class="anchored" data-anchor-id="cas-où-la-notation-est-vraiment-ambiguë">Cas où la notation est vraiment ambiguë</h3>
<p>On a vu que, si les interprétations possibles de la virgule, on peut dire <span class="citation" data-cites="de">@de</span> façon certaine laquelle est la bonne en fonction du contexte.</p>
<p>Mais il arrive que, quand on sait que l’on travaille sur un ensemble particulier (par exemple en arithmétique, on travaille très souvent sur <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BZ%7D">, ou bien en analyse sur <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D">) on note <img src="https://latex.codecogs.com/png.latex?%5Cforall%20x,%20%5Cdots"> pour dire <img src="https://latex.codecogs.com/png.latex?%5Cforall%20x%20%5Cin%20%5Ctext%7Bensemble%20concern%C3%A9%7D,%20%5Cdots">. C’est un raccourci de notation qui est pratique, mais on peut alors écrire :</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cforall%20x,y%20%5Cin%20%5Cmathbb%7BR%7D"></p>
<p>Le problème est le suivant : si <img src="https://latex.codecogs.com/png.latex?y"> est une variable qui dépend de <img src="https://latex.codecogs.com/png.latex?x"> (par exemple, si on a posé avant <img src="https://latex.codecogs.com/png.latex?y%20=%20x+1">), on peut interpréter l’expression comme <img src="https://latex.codecogs.com/png.latex?%5Cforall%20x%20%5Cin%20%5Cmathbb%7BR%7D,%20x+1%20%5Cin%20%5Cmathbb%7BR%7D">. L’interprétation est logique, mais on a bien sûr d’abord pensé à ceci : <img src="https://latex.codecogs.com/png.latex?%5Cforall%20x%20%5Cin%20%5Cmathbb%7BR%7D,%20%5Cforall%20y%20%5Cin%20%5Cmathbb%7BR%7D"> (ou <img src="https://latex.codecogs.com/png.latex?%5Cforall%20(x,%20y)%5Cin%20%5Cmathbb%7BR%7D%5E%7B2%7D">, ce qui est équivalent).</p>
<p>On voit donc que quelques cas (rares, il faut l’admettre) sont réellement sujets à interprétation</p>
</section>
<section id="description-des-ensembles" class="level3">
<h3 class="anchored" data-anchor-id="description-des-ensembles">Description des ensembles</h3>
<p>Une autre notation intéressante est celle que l’on utilise pour décrire les ensembles.</p>
<p>La notation générale est : <img src="https://latex.codecogs.com/png.latex?%5Clbrace%20x%20%5Cin%20E%20%5Cmid%20%5Cmathscr%7BP%7D(x)%20%5Crbrace"> où <img src="https://latex.codecogs.com/png.latex?%5Cmathscr%7BP%7D"> est une propriété qui dépend de <img src="https://latex.codecogs.com/png.latex?x">. On voit parfois aussi <img src="https://latex.codecogs.com/png.latex?%5Clbrace%20x%20%5Cin%20E%20:%20%5Cmathscr%7BP%7D(x)%20%5Crbrace">.</p>
<p>Bien sûr, la propriété <img src="https://latex.codecogs.com/png.latex?%5Cmathscr%7BP%7D"> peut contenir des quantificateurs. Par exemple, on peut noter <img src="https://latex.codecogs.com/png.latex?%5Clbrace%20x%20%5Cin%20%5Cmathbb%7BR%7D%20%5Cmid%20%5Cnot%20%5Cexists%20y%20%5Cin%20%5Cmathbb%7BQ%7D,%20x%20%5Ccdot%20y%20%5Cin%20%5Cmathbb%7BZ%7D%20%5Crbrace"></p>
<p>Ici, on note que le “tel que” est noté avec un <img src="https://latex.codecogs.com/png.latex?%5Cmid">. L’utilisation de la virgule dans ce contexte est assez rare. En effet, les expressions sont alors beaucoup moins lisibles : <img src="https://latex.codecogs.com/png.latex?%5Clbrace%20x%20%5Cin%20%5Cmathbb%7BR%7D,%20%5Cforall%20y%20%5Cin%20%5Cmathbb%7BN%7D,%20x%5Ccdot%20y%20%5Cnotin%20%5Cmathbb%7BN%7D%20%5Crbrace"> J’ai pourtant déjà vu cette expression : <img src="https://latex.codecogs.com/png.latex?%5C%7B%20%5Coverrightarrow%7BMN%7D,%20M,%20N%20%5Cin%20F%5C%7D">.</p>
<p>Il arrive également que l’on utilise la virgule comme “et” logique : <img src="https://latex.codecogs.com/png.latex?%5Cleft%5Clbrace%20%20%5Cfrac%7Ba%7D%7Bb%7D%20%5Cmid%20a%20%5Cin%20%5Cmathbb%7BZ%7D,%20b%20%5Cin%20%5Cmathbb%7BZ%7D%5E%7B%5Cast%7D%20%20%5Cright%5Crbrace"> ou même <img src="https://latex.codecogs.com/png.latex?%5Cleft%5Clbrace%20q%20%5Cmid%20a%20%5Cin%20%5Cmathbb%7BZ%7D,%20b%20%5Cin%20%5Cmathbb%7BZ%7D%5E%7B%5Cast%7D,%20q%20=%20%5Cfrac%7Ba%7D%7Bb%7D%20%5Cright%5Crbrace">.</p>
<p>On pourrait donc avoir cette formule : <img src="https://latex.codecogs.com/png.latex?%5Cleft%5Clbrace%20q,%20a,%20b%20%5Cin%20%5Cmathbb%7BZ%7D,%20b%20%5Cneq%200,%20q%20=%20%5Cfrac%7Ba%7D%7Bb%7D%20%5Cright%5Crbrace">, que l’on n’écrira bien sûr jamais, mais qui montre bien les nombreuses significations possibles de la virgule et le travail d’interprétation que l’on doit faire à chaque fois pour deviner laquelle est la bonne.</p>
</section>
</section>
<section id="solutions-possibles" class="level2">
<h2 class="anchored" data-anchor-id="solutions-possibles">Solutions possibles</h2>
<section id="solution-de-la-logique-formelle" class="level3">
<h3 class="anchored" data-anchor-id="solution-de-la-logique-formelle">Solution de la logique formelle</h3>
<p>En logique formelle, quand on utilise les quantificateurs, on ne met jamais de virgules, ni pour les séparer, ni pour mettre plusieurs variables à la fois. Par exemple, on ne noterait pas <img src="https://latex.codecogs.com/png.latex?%5Cforall%20x,%20y%20%5Cin%20%5Cmathbb%7BR%7D,%20%5Cexists%20z%20%5Cin%20%5Cmathbb%7BR%7D,%20z%20=%20x+y">, mais plutôt <img src="https://latex.codecogs.com/png.latex?%5Cforall%20x%20%5Cin%20%5Cmathbb%7BR%7D%20%5Cleft(%20%5Cforall%20y%20%5Cin%20%5Cmathbb%7BR%7D%20%5Cleft(%20%5Cexists%20z%20%5Cin%20%5Cmathbb%7BR%7D%20%5Cleft(%20z%20=%20x+y%20%5Cright)%20%5Cright)%20%5Cright)"></p>
<p>La solution consiste donc à : - ne jamais mettre deux variables ensemble (utiliser plusieurs quantificateurs, un par variable) - on peut aussi écrire <img src="https://latex.codecogs.com/png.latex?(x,%20y)%20%5Cin%20%5Cmathbb%7BR%7D%5E%7B2%7D"> (on a en fait qu’une seule variable : le vecteur <img src="https://latex.codecogs.com/png.latex?(x,%20y)"> ) - mettre des parenthèses plutôt que des virgules (élimine toutes les ambiguïtés)</p>
</section>
<section id="utiliser-de-meilleurs-symboles" class="level3">
<h3 class="anchored" data-anchor-id="utiliser-de-meilleurs-symboles">Utiliser de meilleurs symboles</h3>
<p>La solution proposée par la logique formelle est plutôt lourde (longue à écrire et moins lisible).</p>
<p>On peut, plus simplement, utiliser des symboles spécialisés pour chacune des significations</p>
<ul>
<li>Le <img src="https://latex.codecogs.com/png.latex?;"> est un meilleur symbole pour séparer les éléments d’un vecteur
<ul>
<li>Dans les langues où c’est la virgule qui est l’indicateur pour les nombres décimaux, on préfère le ” <img src="https://latex.codecogs.com/png.latex?;"> ” dans les vecteurs</li>
</ul></li>
<li>Pour “tel que”, on préfère ” <img src="https://latex.codecogs.com/png.latex?%5Cmid"> “,” <img src="https://latex.codecogs.com/png.latex?/"> ” ou bien quelquefois ” <img src="https://latex.codecogs.com/png.latex?:"> ”
<ul>
<li><strong>Exemple :</strong> <img src="https://latex.codecogs.com/png.latex?%5Cforall%20x%20%5Cin%20%5Cmathbb%7BR%7D,%20%5Cexists%20y%20%5Cin%20%5Cmathbb%7BR%7D%20%5Cmid%20y%20=%20x+1"> ou bien <img src="https://latex.codecogs.com/png.latex?%5Clbrace%20x%20%5Cin%20%5Cmathbb%7BR%7D%20:%20%5Ccos(x)%20=%200%20%5Crbrace"></li>
</ul></li>
<li>Pour décrire que plusieurs variables sont dans un ensemble, on utilise <img src="https://latex.codecogs.com/png.latex?(x,%20y)%20%5Cin%20%5Cmathbb%7BR%7D%5E%7B2%7D"> ou bien <img src="https://latex.codecogs.com/png.latex?(x,%20y,%20z)%20%5Cin%20%5Cmathbb%7BR%7D%5E%7B3%7D"> etc.
<ul>
<li>On peut d’ailleurs utiliser le <img src="https://latex.codecogs.com/png.latex?;"> pour séparer les éléments : <img src="https://latex.codecogs.com/png.latex?(x;y;z)%5Cin%20%5Cmathbb%7BR%7D%5E%7B3%7D"></li>
</ul></li>
</ul>
<p>Ces remplacements ont plusieurs avantages : - ils retirent toute ambiguïté, même celles qui n’en sont pas, mais qui sont des erreurs de lecture - ils sont plus lisibles : avoir un symbole pour chaque signification permet au cerveau de comprendre et d’utiliser plus facilement ces symboles et de mieux les associer à leur signification</p>
<p>Ils ont cependant un problème : ils obligent parfois à être plus formel, et donc à écrire plus de choses. Par exemple, <img src="https://latex.codecogs.com/png.latex?%5Cleft%5Clbrace%20%5Cfrac%7Ba%7D%7Bb%7D%20%5Cmid%20a,%20b%20%5Cin%20%5Cmathbb%7BZ%7D,%20b%20%5Cneq%200%20%20%5Cright%5Crbrace"> est plus lisible que <img src="https://latex.codecogs.com/png.latex?%5Cleft%5Clbrace%20%5Cfrac%7Ba%7D%7Bb%7D%20%5Cmid%20(a;b)%5Cin%20%5Cmathbb%7BZ%7D%5Ctimes%20%5Cmathbb%7BZ%7D%5E%7B%5Cast%7D%20%20%5Cright%5Crbrace">, ou bien <img src="https://latex.codecogs.com/png.latex?%5Cleft%5Clbrace%20%5Cfrac%7Ba%7D%7Bb%7D%5Cmid%20(a;b)%5Cin%5Cmathbb%7BZ%7D%5E%7B2%7D%20%5Cwedge%20b%5Cneq%200%20%20%5Cright%5Crbrace"> ou encore <img src="https://latex.codecogs.com/png.latex?%5Cleft%5Clbrace%20%5Cfrac%7Ba%7D%7Bb%7D%20%5Cmid%20a%20%5Cin%20%5Cmathbb%7BZ%7D%20%5Cwedge%20b%20%5Cin%20%5Cmathbb%7BZ%7D%5E%7B%5Cast%7D%20%20%5Cright%5Crbrace"> (bien sûr, les 4 ont la même signification, et sont donc tous aussi simples, mais il faut moins d’efforts au cerveau pour comprendre les valeurs possibles de <img src="https://latex.codecogs.com/png.latex?a"> et <img src="https://latex.codecogs.com/png.latex?b"> dans le premier cas, car la notation donne sans détour les informations que l’on recherche).</p>
<p>Il semble donc que, dans certains cas, c’est au contraire l’utilisation de notation plus abrégée, par exemple avec des virgules, qui est plus lisible.</p>
</section>
<section id="exemples" class="level3">
<h3 class="anchored" data-anchor-id="exemples">Exemples</h3>
<p>Voici quelques exemples d’expressions écrites en utilisant plus ou moins de virgules</p>
<table class="caption-top table">
<colgroup>
<col style="width: 21%">
<col style="width: 27%">
<col style="width: 51%">
</colgroup>
<thead>
<tr class="header">
<th>maximum de virgules</th>
<th>intermédiaire</th>
<th>minimum de virgules</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?%5Cforall%20x,%20y%20%5Cin%20%5Cmathbb%7BR%7D,%20%5Cexists%20a,%20b%20%5Cin%20%5Cmathbb%7BR%7D,%20x+y%20=%20a+b,%20x%5Cneq%20a,%20y%20%5Cneq%20b"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cforall%20(x,%20y)%20%5Cin%20%5Cmathbb%7BR%7D%5E%7B2%7D,%20%5Cexists%20(a,%20b)%20%5Cin%20%5Cmathbb%7BR%7D%5E%7B2%7D,%20x+y%20=%20a+b%20%5Cwedge%20x%5Cneq%20a%20%5Cwedge%20y%20%5Cneq%20b"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cforall%20(x;y)%5Cin%5Cmathbb%7BR%7D%5E%7B2%7D,%20%5Cexists%20(a;b)%5Cin%5Cmathbb%7BR%7D%5E%7B2%7D,%20x+y=a+b%20%5Cwedge%20x%5Cneq%20a%20%5Cwedge%20y%20%5Cneq%20b"></td>
</tr>
<tr class="even">
<td><img src="https://latex.codecogs.com/png.latex?%5Cleft%5Clbrace%20q,a,b%5Cin%5Cmathbb%7BZ%7D,%20b%20%5Cneq%200,%20q=%5Cfrac%7Ba%7D%7Bb%7D%20%5Cright%5Crbrace"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cleft%5Clbrace%20q%20%5Cmid%20a%20%5Cin%20%5Cmathbb%7BZ%7D,%20b%20%5Cin%20%5Cmathbb%7BZ%7D%5E%7B%5Cast%7D,%20q%20=%20%5Cfrac%7Ba%7D%7Bb%7D%20%5Cright%5Crbrace"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cleft%5Clbrace%20q%20%5Cmid%20(a;%20b)%20%5Cin%20%5Cmathbb%7BZ%7D%5E%7B2%7D%20%5Cwedge%20b%20%5Cneq%200%20%5Cwedge%20q%20=%20%5Cfrac%7Ba%7D%7Bb%7D%20%5Cright%5Crbrace"> ou bien <img src="https://latex.codecogs.com/png.latex?%5Cleft%5Clbrace%20q%20%5Cmid%20(a;%20b)%20%5Cin%20%5Cmathbb%7BZ%7D%20%5Ctimes%20%5Cmathbb%7BZ%7D%5E%7B%5Cast%7D%20%5Cwedge%20q%20=%20%5Cfrac%7Ba%7D%7Bb%7D%20%5Cright%5Crbrace"></td>
</tr>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?%5C%7B%20%5Coverrightarrow%7BMN%7D,M,N%20%5Cin%20F%20%5C%7D"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5C%7B%20%5Coverrightarrow%7BMN%7D%20%5Cmid%20M,%20N%20%5Cin%20F%20%5C%7D"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5C%7B%20%5Coverrightarrow%7BMN%7D%20%5Cmid%20(M,%20N)%20%5Cin%20F%5E%7B2%7D%20%5C%7D"></td>
</tr>
</tbody>
</table>
</section>
<section id="quand-utiliser-quoi" class="level3">
<h3 class="anchored" data-anchor-id="quand-utiliser-quoi">Quand utiliser quoi ?</h3>
<p>Nous avons vu que, dans certains cas, la virgule est plus lisible car elle abrège les notations, et nous évite des réflexions inutiles sur le sens qu’apporte un symbole donné.</p>
<p>Mon avis personnel est donc :</p>
<ul>
<li>Dans un contexte où il est nécessaire d’être précis (articles, cours, énoncés, définitions…), utiliser des symboles adaptés pour chaque signification
<ul>
<li>notamment, le fait de ne pas utiliser de raccourcis de notation apporte un formalisme supplémentaire</li>
</ul></li>
<li>Dans un contexte où le but est simplement de faire comprendre (solution ou correction d’un exercice, cours et énoncés simples de choses connues ou évidentes), utiliser des virgules (et autres abréviations) peut être avantageux
<ul>
<li>cela allège la rédaction et rend donc la lecture et la compréhension plus rapides</li>
<li>cela permet d’écrire plus vite (notamment utile lorsqu’on résout un exercice) J’ajouterai que, avant d’utiliser des notations raccourcies, il est nécessaire de bien comprendre comment les notations formelles fonctionnent. Pour cela, écrire sans aucune abréviation (de manière rigoureuse) est utile. Il vaut mieux s’habituer d’abord à une utilisation stricte, puis utiliser des raccourcis quand c’est justifié (ceci ne se limite pas aux raccourcis de notation traités ici, mais est valable pour toutes les abréviations, comme <img src="https://latex.codecogs.com/png.latex?2%5Cmathbb%7BN%7D"> pour <img src="https://latex.codecogs.com/png.latex?%5C%7B%202n%20%5Cmid%20n%20%5Cin%20%5Cmathbb%7BN%7D%20%5C%7D">, ou bien <img src="https://latex.codecogs.com/png.latex?%5Csum%5Climits_%7Bi%7Dv_%7Bi%7D"> pour <img src="https://latex.codecogs.com/png.latex?%5Csum%5Climits_%7Bi=0%7D%5En%20v_%7Bi%7D%20%5Ctext%7B%20o%C3%B9%20%7D%20n%20%5Ctext%7B%20est%20la%20dimension%20du%20vecteur%20%7D%20v">)</li>
</ul></li>
</ul>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>L’utilisation de la virgule dans la notation mathématique peut parfois conduire, sinon à des ambiguïtés, à des erreurs de lectures ou d’interprétation. Elles vont aussi rendre la compréhension de certaines expressions plus difficile.</p>
<p>Les alternatives disponibles sont meilleures, car elles facilitent la compréhension et l’écriture des mathématiques.</p>
<p>Et en plus c’est beaucoup plus joli !</p>


</section>

 ]]></description>
  <category>maths</category>
  <guid>https://osk42.quarto.pub/osk42/posts/maths/contre l usage abusif de la virgule dans la notation mathematique.html</guid>
  <pubDate>Sat, 22 Jul 2023 22:00:00 GMT</pubDate>
  <media:content url="https://osk42.quarto.pub/osk42/posts/maths/_images/virgule.png" medium="image" type="image/png" height="52" width="71"/>
</item>
<item>
  <title>Le langage APL</title>
  <link>https://osk42.quarto.pub/osk42/posts/informatique/Le langage APL.html</link>
  <description><![CDATA[ 





<p>APL est mon langage de programmation préféré, parce qu’il est assez mathématique, très agréable à utiliser, et qu’il change vraiment votre façon d’approcher les problèmes (comme <a href="https://en.wikipedia.org/wiki/Alan_Perlis">Alan Perlis</a> l’a dit : <a href="https://cpsc.yale.edu/epigrams-programming">“A language that doesn’t affect the way you think about programming, is not worth knowing.”</a>). Ce langage à apporté beaucoup de concepts en programmation qui sont très intéressants. Notamment, son créateur, Kenneth Iverson, à obtenu le prix Turing en 1979, pour ses travaux sur la notation mathématique, qui ont mené a la création du langage APL, pour l’utilisation éducative d’APL, et pour sa recherche sur la théorie et la pratique des langages.</p>
<p>APL signifie “A Programming Language”, et il à été créé en 1962 (ou un peu plus tard selon comment on compte), c’est-à-dire avant le C, et 4 ans après le LISP. Pourtant, même les premières versions intègrent des concepts qui sont toujours novateurs et très intéressants (et, bien sûr, de nombreux dialectes et dérivés ont émergés depuis).</p>
<p>La plupart des langages ou librairies qui manipulent des tableaux généralisés sont très inspirés par APL (on les appelle parfois des “Iverson ghosts”), notamment numpy (on retrouve par exemple <code>iota</code> dans beaucoup de langages, pour générer les nombres de <code>1</code> à <code>n</code>).</p>
<p>Les principaux avantages d’APL sont :</p>
<ul>
<li>le paradigme “<a href="https://en.wikipedia.org/wiki/Array_programming">programmation array</a>”
<ul>
<li>les opérations sont généralisées le plus possible sur les tableaux (donc faire une addition de tableaux est comme faire une addition de nombres)</li>
</ul></li>
<li>la programmation avec des <a href="https://mlochbaum.github.io/BQN/commentary/primitive.html">primitives</a>
<ul>
<li>cela permet de combiner des fonctions de façon très riche, et assez facilement</li>
<li>c’est une façon de penser que j’adore : on a beaucoup moins de travail de traduction pour l’ordinateur à faire : pas de boucles, rarement des conditions explicites, et plutôt des opération que l’on applique de différentes manières sur des listes ou tableaux
<ul>
<li>Encore une fois, commme <a href="https://en.wikipedia.org/wiki/Alan_Perlis">Alan Perlis</a> l’a dit : “A programming language is low level when its programs require attention to the irrelevant.”</li>
</ul></li>
</ul></li>
<li>L’utilisation de symboles
<ul>
<li>chaque primitive est représentée par un symbole, ce qui évite d’avoir du code illisible comme quand on utilise numpy</li>
</ul></li>
<li>Les Dfns
<ul>
<li>APL permet de définir des fonction anonymes assez puissantes</li>
<li>elles incluent la possibilité de faire de la récursion anonyme, ce qui est incroyable</li>
</ul></li>
<li>La concision
<ul>
<li>APL est très concis (par exemple, voici le code pour le jeu de la vie : <code>life ← {⊃1 ⍵ ∨.∧ 3 4 = +/ +/ ¯1 0 1 ∘.⊖ ¯1 0 1 ⌽¨ ⊂⍵}</code>)</li>
</ul></li>
<li>la facilité d’apprentissage
<ul>
<li>comme les primitives sont assez simples à apprendre, et pourtant très riches, on arrive rapidement à faire beaucoup de choses</li>
<li>il n’y a qu’un nombre assez petit de primitives, plus quelques variables et fonctions système</li>
</ul></li>
<li>la notation comme outils pour la pensée
<ul>
<li>Iverson à notamment créé un concept (et écrit un papier pour l’expliciter en APL) : <a href="https://www.eecg.utoronto.ca/~jzhu/csc326/readings/iverson.pdf">“Notation as a tool of thought”</a></li>
<li>Cela inclut notamment des “design patterns for a programming language” :
<ul>
<li>Ease of expressing constructs arising in problems.
<ul>
<li>primitives plutôt que boucles ou concepts bas niveau</li>
<li>symboles pour les écrire facilement</li>
</ul></li>
<li>Suggestivity
<ul>
<li>comme “serendipity”, le fait de permettre la découverte de nouvelles choses en les suggérant</li>
<li>les symboles et les façons riches de les combiner permettent des manipulations symboliques qui font que l’on découvre de nouvelles façons d’exprimer la même chose assez facilement</li>
<li>cela fait que golfer un code APL (le rendre le plus court possible) revient souvent à le simplifier (contrairement à beaucoup d’autres langages où il est très facile de <em>trop</em> golfer, et que tout devienne illisible).</li>
</ul></li>
<li>Ability to subordinate detail
<ul>
<li>ne surtout pas confondre avec “ability to hide detail” : les fonctions font cela dans tous les langages</li>
<li>plutôt que de cacher les détails dans une fonction à un autre endroit, il est plus pratique de mettre les détails à un endroit du programme où on les voit mais où on comprends qu’ils sont subordonnés</li>
<li>La syntaxe APL (qui fonctionne de droite à gauche) permet de faire cela très facilement</li>
<li>par exemple, le calcul de la moyenne d’une liste est <code>+/÷≢</code>. Il est plus pratique d’intégrer ce morceau de code directement dans notre code plus grand, plutôt que de définir une fonction <code>mean</code> ou <code>average</code>, qu’il faudra de toute façon consulter pour connaître les détails de son fonctionnement</li>
</ul></li>
<li>Economy
<ul>
<li>les primitives sont représentées par un seul symbole, et les symboles sont même souvent polysémiques selon leur nombre d’arguments</li>
<li>par exemple, <code>⌈</code> est le plafond quand ses arguments sont seulement à droite, et le maximum de ses deux arguments quand l’un est à droite, l’autre à gauche (ce qui fait que la réduction par <code>⌈</code>, notée <code>⌈/</code> donne le maximum d’une liste)</li>
</ul></li>
<li>Amenability to formal proofs
<ul>
<li>aujourd’hui, on je cherche plus nécessairement à avoir des programmes dont on démontre formellement qu’ils fonctionnent (on utilise plutôt une approche empirique, avec des tests), mais le fait qu’APL soit proche de la notation mathématique fait que les démonstrations se font assez bien.</li>
</ul></li>
</ul></li>
</ul></li>
</ul>
<p>De nombreux dialectes d’APL sont apparus depuis sa création, notamment le J, qui n’utilise que des symboles ASCII (mais parfois deux symboles pour une seule primitive), et qui à apporté les combinateurs (des fonctions qui combine des fonctions de façon assez riches) et les trains (ce qui permet d’écrire la moyenne littéralement comme “somme divisée par longueur” : <code>+/ ÷ ≢</code>). Plus récemment, le BQN est apparu, qui est plus fonctionnel, et qui apporte des primitives différentes, ainsi que des symboles parfois un peu mieux choisis.</p>
<p>APL est vraiment un langage très particulier, la quasi totalité des gens qui l’apprennent adorent programmer avec, car il est très agréable à utiliser, mais il faut vraiment sortir de la façon “habituelle” de coder : il faut accepter que les symboles sont plus lisibles que des noms, que faire une longue ligne est plus lisible que de séparer le code en fonctions etc…</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Introduction au langage APL
</div>
</div>
<div class="callout-body-container callout-body">
<p>J’ai filmé 4 vidéos qui présentent quelques bases du langage APL sur un exemple simple : comment calculer des <a href="https://fr.wikipedia.org/wiki/Triplet_pythagoricien">triplets pythagoriciens</a>.</p>
<p><a href="https://www.youtube.com/playlist?list=PL5ZGZlm-yp_xQfzsBtD66HIMW1M97wCsE">Voir a playlist complète</a></p>
<ul>
<li><a href="https://www.youtube.com/watch?v=6J0Au6AKGWw&amp;list=PL5ZGZlm-yp_xQfzsBtD66HIMW1M97wCsE&amp;index=2">Vidéo 1</a></li>
<li><a href="https://www.youtube.com/watch?v=tax604gMJvA&amp;list=PL5ZGZlm-yp_xQfzsBtD66HIMW1M97wCsE&amp;index=3">Vidéo 2</a></li>
<li><a href="https://www.youtube.com/watch?v=iS26PGxl_oI&amp;list=PL5ZGZlm-yp_xQfzsBtD66HIMW1M97wCsE&amp;index=4">Vidéo 3</a></li>
<li><a href="https://www.youtube.com/watch?v=yTMfEhadmyg&amp;list=PL5ZGZlm-yp_xQfzsBtD66HIMW1M97wCsE&amp;index=5">Vidéo 4</a></li>
</ul>
</div>
</div>



 ]]></description>
  <category>informatique</category>
  <guid>https://osk42.quarto.pub/osk42/posts/informatique/Le langage APL.html</guid>
  <pubDate>Wed, 22 Mar 2023 23:00:00 GMT</pubDate>
  <media:content url="https://osk42.quarto.pub/osk42/posts/informatique/_images/APL_logo.svg.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>convertir des listes python en tables markdown</title>
  <link>https://osk42.quarto.pub/osk42/posts/informatique/python convertir une liste en table markdown.html</link>
  <description><![CDATA[ 





<p>La syntaxe <a href="https://docs.framasoft.org/fr/grav/markdown.html">markdown</a> est très pratique, car elle est légère, lisible, et qu’elle peut être facilement exportée dans de nombreux autre formats (notamment via <a href="https://pandoc.org">pandoc</a>).</p>
<p>Certains dialectes du markdown (des <em>flavours</em>) intègrent la possibilité de faire des tableaux. Cela permet donc d’intégrer des données dans un document.</p>
<p>Ce script vous permet de transformer des listes python en tables markdown, pour intégrer les résultats d’un calcul dans un document markdown :</p>
<div id="7b6c45df" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> make_markdown_table(table, alignement: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb1-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        table: La table python à convertir en table markdown.</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">               Elle doit être une liste de listes (rectangulaire).</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        alignement: L'alignement des cesllules ('gauche', 'centre' ou 'droite').</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># transformer tous les éléments en str</span></span>
<span id="cb1-9">    table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(elt) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> elt <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> line] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> table]</span>
<span id="cb1-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># récupérer la largeur de chaque colonne</span></span>
<span id="cb1-11">    widths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(line[i]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> table) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(table[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]))]</span>
<span id="cb1-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># faire que la largeur de chaque colonne soit au moins 3</span></span>
<span id="cb1-13">    widths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(w, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> widths]</span>
<span id="cb1-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># centrer le texte dans les colonnes</span></span>
<span id="cb1-15">    table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[elt.center(w) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> elt, w <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(line, widths)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> table]</span>
<span id="cb1-16"></span>
<span id="cb1-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># séparer les titres et le contenu</span></span>
<span id="cb1-18">    liste_titres, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>liste_contenu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> table</span>
<span id="cb1-19"></span>
<span id="cb1-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># formatter les titres</span></span>
<span id="cb1-21">    titres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'| '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' | '</span>.join(liste_titres) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' |'</span></span>
<span id="cb1-22"></span>
<span id="cb1-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mettre l'alignement des cellules</span></span>
<span id="cb1-24">    alignement <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(alignement).lower()</span>
<span id="cb1-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> alignement <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'none'</span>:</span>
<span id="cb1-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on modifie uniquement la position des ":"</span></span>
<span id="cb1-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># par défaut il n'y en a aucun</span></span>
<span id="cb1-28">        bord_gauche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'| '</span></span>
<span id="cb1-29">        bord_centre <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' | '</span></span>
<span id="cb1-30">        bord_droite <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' |'</span></span>
<span id="cb1-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> alignement <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'centre'</span>:</span>
<span id="cb1-32">        bord_gauche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'|:'</span></span>
<span id="cb1-33">        bord_centre <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">':|:'</span></span>
<span id="cb1-34">        bord_droite <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">':|'</span></span>
<span id="cb1-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> alignement <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gauche'</span>:</span>
<span id="cb1-36">        bord_gauche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'|:'</span></span>
<span id="cb1-37">        bord_centre <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' |:'</span></span>
<span id="cb1-38">        bord_droite <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' |'</span></span>
<span id="cb1-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> alignement <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'droite'</span>:</span>
<span id="cb1-40">        bord_gauche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'| '</span></span>
<span id="cb1-41">        bord_centre <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">':| '</span></span>
<span id="cb1-42">        bord_droite <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">':|'</span></span>
<span id="cb1-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb1-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l'alignement doit être 'gauche', 'centre' ou 'droite'."</span>)</span>
<span id="cb1-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># la ligne de séparation entre les titres et le contenu</span></span>
<span id="cb1-46">    separateur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bord_gauche <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bord_centre.join([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> widths]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bord_droite</span>
<span id="cb1-47"></span>
<span id="cb1-48">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># le contenu de la table</span></span>
<span id="cb1-49">    contenu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(liste_contenu)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># liste vide qui sera remplie ensuite</span></span>
<span id="cb1-50">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idx, ligne <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(liste_contenu):</span>
<span id="cb1-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pour chaque ligne, on modifie le contenu au bon indice</span></span>
<span id="cb1-52">        contenu[idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'| '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' | '</span>.join(ligne) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' |'</span></span>
<span id="cb1-53">    contenu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.join(contenu)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on regroupe les lignes</span></span>
<span id="cb1-54"></span>
<span id="cb1-55">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> titres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> separateur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> contenu</span></code></pre></div>
</div>
<section id="exemples" class="level2">
<h2 class="anchored" data-anchor-id="exemples">Exemples</h2>
<div id="17dd4394" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> math <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pi</span>
<span id="cb2-2"></span>
<span id="cb2-3">T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"colonne"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"colonne 2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"colonne avec un nom super long"</span>],</span>
<span id="cb2-4">     [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"contenu"</span>],</span>
<span id="cb2-5">     [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"super"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cool"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">73</span>],</span>
<span id="cb2-6">     [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"contenu assez long"</span>, pi, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"valeur"</span>]]</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(make_markdown_table(T))</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Alignée à gauche"</span>)</span>
<span id="cb2-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(make_markdown_table(T, alignement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gauche'</span>))</span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Alignée au centre"</span>)</span>
<span id="cb2-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(make_markdown_table(T, alignement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'centre'</span>))</span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Alignée à droite"</span>)</span>
<span id="cb2-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(make_markdown_table(T, alignement<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'droite'</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>|      colonne       |     colonne 2     | colonne avec un nom super long |
| ------------------ | ----------------- | ------------------------------ |
|         1          |         42        |            contenu             |
|       super        |        cool       |               73               |
| contenu assez long | 3.141592653589793 |             valeur             |

Alignée à gauche
|      colonne       |     colonne 2     | colonne avec un nom super long |
|:------------------ |:----------------- |:------------------------------ |
|         1          |         42        |            contenu             |
|       super        |        cool       |               73               |
| contenu assez long | 3.141592653589793 |             valeur             |

Alignée au centre
|      colonne       |     colonne 2     | colonne avec un nom super long |
|:------------------:|:-----------------:|:------------------------------:|
|         1          |         42        |            contenu             |
|       super        |        cool       |               73               |
| contenu assez long | 3.141592653589793 |             valeur             |

Alignée à droite
|      colonne       |     colonne 2     | colonne avec un nom super long |
| ------------------:| -----------------:| ------------------------------:|
|         1          |         42        |            contenu             |
|       super        |        cool       |               73               |
| contenu assez long | 3.141592653589793 |             valeur             |</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>informatique</category>
  <guid>https://osk42.quarto.pub/osk42/posts/informatique/python convertir une liste en table markdown.html</guid>
  <pubDate>Thu, 09 Mar 2023 23:00:00 GMT</pubDate>
  <media:content url="https://osk42.quarto.pub/osk42/posts/informatique/_images/logo_markdown.png" medium="image" type="image/png" height="89" width="144"/>
</item>
<item>
  <title>algo avancee activite 4</title>
  <link>https://osk42.quarto.pub/osk42/posts/informatique/algo_avancee/algo avancee activite 4.html</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Implémentation d’une liste chaînée
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div id="3119a88c" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Node:</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, valeur, suivant<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb1-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.valeur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valeur</span>
<span id="cb1-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.suivant <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> suivant</span>
<span id="cb1-5"></span>
<span id="cb1-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.to_list()))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span></span>
<span id="cb1-8"></span>
<span id="cb1-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> to_list(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>:</span>
<span id="cb1-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.suivant <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb1-11">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.valeur]</span>
<span id="cb1-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.valeur] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.suivant.to_list()</span></code></pre></div>
</div>
</div>
</div>
</div>
<section id="elements-plus-grands" class="level1">
<h1>elements plus grands</h1>
<section id="section" class="level2">
<h2 class="anchored" data-anchor-id="section">1.</h2>
<blockquote class="blockquote">
<p>Ecrire une fonction itérative <code>plusGrands(L, seuil)</code> qui retourne tous les nombres de <code>L</code> dont la valeur est au moins égale au seuil.</p>
</blockquote>
<div id="50d52640" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plusGrands(L: Node, seuil: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Node:</span>
<span id="cb2-2">    liste_plus_grands <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb2-3">    tail <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> liste_plus_grands</span>
<span id="cb2-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> L <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb2-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> L.valeur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> seuil:</span>
<span id="cb2-6">            tail.suivant <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(L.valeur)</span>
<span id="cb2-7">            tail <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tail.suivant</span>
<span id="cb2-8">        L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L.suivant</span>
<span id="cb2-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ne pas oublier de retirer le premier élément</span></span>
<span id="cb2-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> liste_plus_grands.suivant</span>
<span id="cb2-11"></span>
<span id="cb2-12">L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">73</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)))))</span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(plusGrands(L, 40))</span></span></code></pre></div>
</div>
</section>
<section id="section-1" class="level2">
<h2 class="anchored" data-anchor-id="section-1">2.</h2>
<blockquote class="blockquote">
<p>Donner mantenant une solution utilisant une fonctionelle <code>filter</code>. Cette fonctionnelle permet de conerver les éléments d’une liste vérifiant un prdivat passé en argument.</p>
</blockquote>


</section>
</section>

 ]]></description>
  <category>informatique</category>
  <guid>https://osk42.quarto.pub/osk42/posts/informatique/algo_avancee/algo avancee activite 4.html</guid>
  <pubDate>Wed, 08 Mar 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>algo avancee correction controle</title>
  <link>https://osk42.quarto.pub/osk42/posts/informatique/algo_avancee/algo avancee correction controle 1.html</link>
  <description><![CDATA[ 





<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Implémentation d’une liste chaînée
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div id="14047c6d" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Node:</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, value, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb1-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.valeur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value</span>
<span id="cb1-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.suivant <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.to_list()))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span></span>
<span id="cb1-8"></span>
<span id="cb1-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> to_list(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>:</span>
<span id="cb1-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.suivant <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb1-11">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.valeur]</span>
<span id="cb1-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.valeur] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.suivant.to_list()</span></code></pre></div>
</div>
</div>
</div>
</div>
<section id="sujet-de-14h45" class="level1">
<h1>Sujet de 14h45</h1>
<section id="genalea" class="level2">
<h2 class="anchored" data-anchor-id="genalea">1. <code>genAlea</code></h2>
<div id="65f695c5" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> genAlea(nb_val: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Node:</span>
<span id="cb2-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Retourner une liste chaînée de nbVal entiers aléatoires entre 1 et 100.</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        nb_val (int): Le nombre d'entiers à générer</span></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Node: La liste de nb_val</span></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-10">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb2-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nb_val):</span>
<span id="cb2-12">        res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), res)</span>
<span id="cb2-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> res</span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"12 nombres aléatoires :"</span>, genAlea(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>12 nombres aléatoires : (8, 83, 83, 59, 93, 1, 3, 69, 51, 57, 74, 97)</code></pre>
</div>
</div>
</section>
<section id="comptesup" class="level2">
<h2 class="anchored" data-anchor-id="comptesup">2. <code>compteSup</code></h2>
<div id="db1260e9" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compteSup(L: Node, seuil) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb4-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Retourne le nombre de valeurs de L strictement supérieures à seuil.</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        L (Node): La liste chaînée.</span></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        seuil (comparable): La valeur de seuil (on compte les valeurs strictement supérieures au seuil).</span></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        int: Le nombre de valeurs strictement supérieurs au seuil.</span></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb4-9">    nb_vals_sup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> L <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb4-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> L.valeur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> seuil:</span>
<span id="cb4-12">            nb_vals_sup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-13">        L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L.suivant</span>
<span id="cb4-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> nb_vals_sup</span>
<span id="cb4-15"></span>
<span id="cb4-16">L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)))))))</span>
<span id="cb4-17">seuil <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb4-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(L, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"contient"</span>, compteSup(L, seuil), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"valeurs strictement supérieures à"</span>, seuil)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(3, 1, 4, 1, 5, 9, 2) contient 2 valeurs strictement supérieures à 4</code></pre>
</div>
</div>
</section>
<section id="dansintervalle-récursivement" class="level2">
<h2 class="anchored" data-anchor-id="dansintervalle-récursivement">3. <code>dansIntervalle</code> récursivement</h2>
<div id="17d32165" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> dansIntervalle(L: Node, a, b) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Node:</span>
<span id="cb6-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Créer une nouvelle liste à partir de L en ne gardant que les éléments dans l'intervalle [a, b].</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        L (Node): La liste chaînée de départ.</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        a (comparable): Le minimum de l'intervalle</span></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        b (comparable): Le maximum de l'intervalle</span></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Node: Une nouvelle liste pour laquelle on a gardé seulement les élément qui sont dans l'intervalle [a, b].</span></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb6-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> b:</span>
<span id="cb6-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a doit être inférieur ou égal à b."</span>)</span>
<span id="cb6-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">##### ajouter/enlever un # devant la ligne suivante pour changer d'implémentation #####</span></span>
<span id="cb6-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> L <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>: <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb6-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> L.valeur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> b:</span>
<span id="cb6-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on garde le node actuel</span></span>
<span id="cb6-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Node(L.valeur, dansIntervalle(L.suivant, a, b))</span>
<span id="cb6-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> dansIntervalle(L.suivant, a, b)</span>
<span id="cb6-18"></span>
<span id="cb6-19">L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))))))))))))))))))</span>
<span id="cb6-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(dansIntervalle(L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(3, 4, 2, 3, 3, 2, 3)</code></pre>
</div>
</div>
</section>
<section id="dansintervalle-avec-un-itérateur-fonctionnel" class="level2">
<h2 class="anchored" data-anchor-id="dansintervalle-avec-un-itérateur-fonctionnel">4. <code>dansIntervalle</code> avec un itérateur fonctionnel</h2>
</section>
<section id="implémentation-de-lfilter" class="level2 callout-info" data-collapse="true">
<h2 class="anchored" data-anchor-id="implémentation-de-lfilter">Implémentation de <code>Lfilter</code></h2>
<div id="9852c9de" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> Lfilter(L : Node, f):</span>
<span id="cb8-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Filtrer les valeurs de L selon le prédicat f.</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    On garde seulement les valeurs de les pour lesquelles</span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    f(valeur) == True.</span></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        L (Node): La liste de départ.</span></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        f (fonction): Le prédicat (fonction qui renvoie True</span></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                      ou False).</span></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Node: La nouvelle liste contenant seulement les</span></span>
<span id="cb8-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              valeurs de L pour lesquelles f(valeur) == True</span></span>
<span id="cb8-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              (on conserve l'ordre).</span></span>
<span id="cb8-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb8-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> L <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb8-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb8-16">    p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L</span>
<span id="cb8-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> f(p.valeur):</span>
<span id="cb8-18">        p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p.suivant</span>
<span id="cb8-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb8-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb8-21"></span>
<span id="cb8-22">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(p.valeur)</span>
<span id="cb8-23">    w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> res</span>
<span id="cb8-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> p.suivant <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb8-25">        p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p.suivant</span>
<span id="cb8-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> f(p.valeur):</span>
<span id="cb8-27">            w.suivant <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(p.valeur)</span>
<span id="cb8-28">            w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w.suivant</span>
<span id="cb8-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> res</span></code></pre></div>
</div>
</section>
<div id="3507881d" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> dansIntervalle(L: Node, a, b) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Node:</span>
<span id="cb9-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Créer une nouvelle liste à partir de L en ne gardant que les éléments dans l'intervalle [a, b].</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        L (Node): La liste chaînée de départ.</span></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        a (comparable): Le minimum de l'intervalle</span></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        b (comparable): Le maximum de l'intervalle</span></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Node: Une nouvelle liste pour laquelle on a gardé seulement les élément qui sont dans l'intervalle [a, b].</span></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb9-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> b:</span>
<span id="cb9-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a doit être inférieur ou égal à b."</span>)</span>
<span id="cb9-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># avec un itérateur fonctionnel</span></span>
<span id="cb9-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Lfilter(L, <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> b)</span>
<span id="cb9-14"></span>
<span id="cb9-15"></span>
<span id="cb9-16">L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, Node(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))))))))))))))))))</span>
<span id="cb9-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(dansIntervalle(L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(3, 4, 2, 3, 3, 2, 3)</code></pre>
</div>
</div>
</section>
<section id="sujet-de-15h30" class="level1">
<h1>Sujet de 15h30</h1>
<section id="genrandom" class="level2">
<h2 class="anchored" data-anchor-id="genrandom">1. <code>genRandom</code></h2>
<div id="697655af" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> genRandom(nbVal: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Node:</span>
<span id="cb11-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Créer une liste de nbVal nombres aléatoires entre 0 et 20</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        nbVal (int): Le nombre de nombres aléatoires à générer.</span></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Node: Une liste chaînée qui contient `nbVal` nombre</span></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              aléatoires entre 0 et 20.</span></span>
<span id="cb11-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb11-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> nbVal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb11-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb11-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Node(randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>), genRandom(nbVal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb11-12"></span>
<span id="cb11-13">L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> genRandom(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb11-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(L)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(15, 6, 1, 1, 5, 16, 8, 7, 11, 20)</code></pre>
</div>
</div>
</section>
<section id="compteinf" class="level2">
<h2 class="anchored" data-anchor-id="compteinf">2. <code>compteInf</code></h2>
<div id="dddbd87d" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compteInf(L: Node, seuil) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb13-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Compter le nombre de valeurs strictement inférieures à `seuil` dans L.</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        L (Node): La liste dans laquelle on compte.</span></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        seuil: La valeur utilisée pour les comparaisons.</span></span>
<span id="cb13-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        int: Le nombre de valeurs dans `L` qui sont</span></span>
<span id="cb13-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">             strictement inférieures à `seuil`.</span></span>
<span id="cb13-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb13-10">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb13-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> L <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb13-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> L.valeur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> seuil:</span>
<span id="cb13-13">            res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb13-14">        L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L.suivant</span>
<span id="cb13-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> res</span>
<span id="cb13-16"></span>
<span id="cb13-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(compteInf(L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>6</code></pre>
</div>
</div>
</section>
<section id="horsintervalle-récursivement" class="level2">
<h2 class="anchored" data-anchor-id="horsintervalle-récursivement">3. <code>horsIntervalle</code> récursivement</h2>
<div id="bc98f2ce" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> horsIntervalle(L: Node, a, b) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Node:</span>
<span id="cb15-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Retirer les éléments de L qui sont dans [a, b].</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        L (Node): La liste que l'on veut filtrer.</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        a: La valeur minimale de l'intervalle exclue.</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        b: La valeur maximale de l'intervalle exclue.</span></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Node: Une nouvelle liste qui est L sans les élément</span></span>
<span id="cb15-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              de L qui sont compris entre a et b inclus.</span></span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb15-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> L <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb15-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb15-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Si la valeur dépasse en dessous de a ou au dessus de b</span></span>
<span id="cb15-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> L.valeur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> L.valeur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> b :</span>
<span id="cb15-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on garde la valeur dan la nouvelle liste</span></span>
<span id="cb15-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Node(L.valeur, horsIntervalle(L.suivant, a, b))</span>
<span id="cb15-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sinon on no garde pas la valeur</span></span>
<span id="cb15-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> horsIntervalle(L.suivant, a, b)</span>
<span id="cb15-19"></span>
<span id="cb15-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(horsIntervalle(L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(15, 1, 1, 16, 11, 20)</code></pre>
</div>
</div>
</section>
<section id="horsintervallefonc-avec-un-itérateur-fonctionnel" class="level2">
<h2 class="anchored" data-anchor-id="horsintervallefonc-avec-un-itérateur-fonctionnel">4. <code>horsIntervalleFonc</code> avec un itérateur fonctionnel</h2>
<div id="80837a1c" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> horsIntervalleFonc(L: Node, a, b) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Node:</span>
<span id="cb17-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Retirer les éléments de L qui sont dans [a, b].</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        L (Node): La liste que l'on veut filtrer.</span></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        a: La valeur minimale de l'intervalle exclue.</span></span>
<span id="cb17-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        b: La valeur maximale de l'intervalle exclue.</span></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb17-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Node: Une nouvelle liste qui est L sans les élément</span></span>
<span id="cb17-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              de L qui sont compris entre a et b inclus.</span></span>
<span id="cb17-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb17-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> b:</span>
<span id="cb17-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a doit être inférieur ou égal à b."</span>)</span>
<span id="cb17-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Lfilter(L, <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> b)</span>
<span id="cb17-14"></span>
<span id="cb17-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(horsIntervalleFonc(L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(15, 1, 1, 16, 11, 20)</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>informatique</category>
  <guid>https://osk42.quarto.pub/osk42/posts/informatique/algo_avancee/algo avancee correction controle 1.html</guid>
  <pubDate>Wed, 01 Mar 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>terminal - btop : statistiques des processus</title>
  <link>https://osk42.quarto.pub/osk42/posts/informatique/terminal btop.html</link>
  <description><![CDATA[ 





<p><code>btop</code> est un utilitaire pour visualiser les processus actifs sur votre ordinateur, et les statistiques comme la quantité d’entrée/sortie en mémoire ou réseau.</p>
<p>Dépôt github de <code>btop</code> : <a href="https://github.com/aristocratos/btop">aristocratos/btop</a></p>
<section id="pourquoi-btop" class="level1">
<h1>Pourquoi <code>btop</code> ?</h1>
<p>Il existe de nombreuses alternatives à <code>btop</code>. Il est lui-même dérivé de <code>bashtop</code> et <code>bpytop</code>.</p>
<p>L’outil similaire le plus connu est certainement <code>top</code>, qui permet d’afficher la liste des processus en cours sur votre machine, ainsi que des statistiques sur la charge du processeur ou de la mémoire. <code>top</code> à l’avantage d’être présent sur presque toutes les machines Linux.</p>
<p>Ceci dit, top est très simple dans son interface, et très peu intuitif.</p>
<section id="htop" class="level2">
<h2 class="anchored" data-anchor-id="htop"><code>htop</code></h2>
<p>Un autre utilitaire très connu est <code>htop</code>, qui est une version plus jolie et utilisable de <code>top</code>, qui permet de chercher et filtrer les processus selon leur nom.</p>
<p><code>htop</code> est beaucoup plus agréable à utiliser que <code>top</code>, avec des raccourcis plus intuitifs, des boutons cliquables (oui, c’est possible sur un terminal), et une interface plus agréable.</p>
<p>Voici à quoi ressemble <code>htop</code> :</p>
<p><img src="https://osk42.quarto.pub/osk42/posts/informatique/_images/htop.png" class="img-fluid"></p>
</section>
<section id="btop" class="level2">
<h2 class="anchored" data-anchor-id="btop"><code>btop</code></h2>
<p><code>btop</code> est un autre utilitaire du même type, mais il a quelques avantages :</p>
<ul>
<li>il est plus intuitif
<ul>
<li>les raccourcis clavier sont affichés</li>
<li>le menu d’options est bien fait (plus simple à utiliser que celui de <code>htop</code>)</li>
</ul></li>
<li>il est plus joli</li>
<li>il permet de voir plus de statistiques</li>
</ul>
<p><img src="https://osk42.quarto.pub/osk42/posts/informatique/_images/btop.png" class="img-fluid"></p>
<p>Les raccourcis claviers sont montrés par la lettre en rouge dans leur nom (comme <code>m</code> pour aller dans le <code style="color: white"><span style="color:darkred">m</span>enu</code>), et chaque fenêtre peut être affichée/masquée en appuyant sur le chiffre qui lui correspond (de 1 à 4).</p>
</section>
</section>
<section id="comparaison" class="level1">
<h1>Comparaison</h1>
<p>Voici une comparaison des interfaces des 3 outils dont j’ai parlé : <code>top</code>, <code>htop</code> et <code>btop</code></p>
<p><img src="https://osk42.quarto.pub/osk42/posts/informatique/_images/comparaison_top_htop_btop.png" class="img-fluid"></p>
</section>
<section id="installer-btop" class="level1">
<h1>Installer <code>btop</code></h1>
<p><code>btop</code> est disponible sur la plupart des distributions linux et sur macOS. Il est probablement disponible pour votre installeur habituel (et avec <code>homebrew</code> sur macOS).</p>
<ul>
<li>macOS : <code>brew install btop</code></li>
<li>ubuntu : <code>sudo apt-get update &amp;&amp; sudo apt install btop</code></li>
</ul>


</section>

 ]]></description>
  <category>informatique</category>
  <guid>https://osk42.quarto.pub/osk42/posts/informatique/terminal btop.html</guid>
  <pubDate>Sun, 19 Feb 2023 23:00:00 GMT</pubDate>
  <media:content url="https://osk42.quarto.pub/osk42/posts/informatique/_images/btop.png" medium="image" type="image/png" height="79" width="144"/>
</item>
<item>
  <title>Correction du TD 1 de probabilités (combinatoire)</title>
  <link>https://osk42.quarto.pub/osk42/posts/maths/probabilites TD1.html</link>
  <description><![CDATA[ 





<section id="exercice-5" class="level1">
<h1>Exercice 5</h1>
<p>Un ascenseur dessert les 12 étages d’un immeuble. Au rez-de-chaussée, l’ascenseur est vide et 10 personnes y entrent. On suppose que personne ne monte dans l’ascenseur aux différents étages atteints. Déterminer de combien de façons les 10 personnes qui ont pris cet ascenseur peuvent s’être réparties entre les étages.</p>
</section>
<section id="exercice-6" class="level1">
<h1>Exercice 6</h1>
</section>
<section id="exercice-7" class="level1">
<h1>Exercice 7</h1>
<p>Un réseau de téléphonie mobile comporte des numéros à 10 chiffres dont les deux premiers sont imposés. On ne raisonnera donc que sur les 8 chiffres restants. Ces 8 chiffres sont pris dans l’ensemble <img src="https://latex.codecogs.com/png.latex?%5B%5C!%5B0;%209%5D%5C!%5D">. Dénombrer les numéros comportant.</p>
<section id="un-chiffre-apparaissant-4-fois-les-autres-1-fois" class="level2">
<h2 class="anchored" data-anchor-id="un-chiffre-apparaissant-4-fois-les-autres-1-fois">5) un chiffre apparaissant 4 fois, les autres 1 fois</h2>
</section>
<section id="chiffres-formant-une-suite-strictement-croissante" class="level2">
<h2 class="anchored" data-anchor-id="chiffres-formant-une-suite-strictement-croissante">6) 8 chiffres formant une suite strictement croissante</h2>
<p>Pour former une suite strictement croissante de 8 chiffres, il faut prendre la suite <img src="https://latex.codecogs.com/png.latex?(0,%201,%202,%203,%204,%205,%206,%207,%209)">, et sélectionner 8 chiffres dans cette liste (l’ordre étant forcément croissant, on a pas besoin de considérer l’ordre).</p>
<p>Donc, il y à <img src="https://latex.codecogs.com/png.latex?%5Cdbinom%7B10%7D%7B8%7D=45"> possibilités</p>
</section>
<section id="chiffres-formant-une-suite-croissante" class="level2">
<h2 class="anchored" data-anchor-id="chiffres-formant-une-suite-croissante">7) 8 chiffres formant une suite croissante</h2>
<p>Pour former une suite croissante (non strictement) de 8 chiffres, il faut considérer que l’on peut répéter le même élément. A nouveau, l’ordre est fixé, donc on ne le compte pas.</p>
<p>Donc, il y à <img src="https://latex.codecogs.com/png.latex?K_%7B10%7D%5E%7B8%7D%20=%20%5Cbegin%7Bpmatrix%7D%5C!%5C!%5Cdbinom%7B10%7D%7B8%7D%5C!%5C!%5Cend%7Bpmatrix%7D%20=%20%5Cdbinom%7B10%7D%7B3%7D%20=%20120"></p>
</section>
</section>
<section id="exercice-8" class="level1">
<h1>Exercice 8</h1>
</section>
<section id="exercice-9" class="level1">
<h1>Exercice 9</h1>


</section>

 ]]></description>
  <category>maths</category>
  <guid>https://osk42.quarto.pub/osk42/posts/maths/probabilites TD1.html</guid>
  <pubDate>Thu, 19 Jan 2023 23:00:00 GMT</pubDate>
</item>
</channel>
</rss>
